
OpenThreadUDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077cc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08007908  08007908  00017908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007cfc  08007cfc  00017cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007d04  08007d04  00017d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007d08  08007d08  00017d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000118  20000004  08007d0c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  2000011c  08007e24  0002011c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001b8  08007ebd  000201b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  200001cc  08007ece  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000698  08007ece  00020698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c9  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000000b8  20030028  20030028  00030000  2**2
                  ALLOC
 14 MB_MEM2       00000a77  200300e0  200300e0  00030000  2**2
                  ALLOC
 15 .debug_info   0002e43a  00000000  00000000  000201f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000561a  00000000  00000000  0004e633  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000021f8  00000000  00000000  00053c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00001fa0  00000000  00000000  00055e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  00029f0f  00000000  00000000  00057de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0001c880  00000000  00000000  00081cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    000ef2e7  00000000  00000000  0009e577  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      0000007b  00000000  00000000  0018d85e  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000089a0  00000000  00000000  0018d8dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001cc 	.word	0x200001cc
 8000158:	00000000 	.word	0x00000000
 800015c:	080078f0 	.word	0x080078f0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001d0 	.word	0x200001d0
 8000178:	080078f0 	.word	0x080078f0

0800017c <strcmp>:
 800017c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000184:	2a01      	cmp	r2, #1
 8000186:	bf28      	it	cs
 8000188:	429a      	cmpcs	r2, r3
 800018a:	d0f7      	beq.n	800017c <strcmp>
 800018c:	1ad0      	subs	r0, r2, r3
 800018e:	4770      	bx	lr

08000190 <strlen>:
 8000190:	4603      	mov	r3, r0
 8000192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000196:	2a00      	cmp	r2, #0
 8000198:	d1fb      	bne.n	8000192 <strlen+0x2>
 800019a:	1a18      	subs	r0, r3, r0
 800019c:	3801      	subs	r0, #1
 800019e:	4770      	bx	lr

080001a0 <__aeabi_uldivmod>:
 80001a0:	b953      	cbnz	r3, 80001b8 <__aeabi_uldivmod+0x18>
 80001a2:	b94a      	cbnz	r2, 80001b8 <__aeabi_uldivmod+0x18>
 80001a4:	2900      	cmp	r1, #0
 80001a6:	bf08      	it	eq
 80001a8:	2800      	cmpeq	r0, #0
 80001aa:	bf1c      	itt	ne
 80001ac:	f04f 31ff 	movne.w	r1, #4294967295
 80001b0:	f04f 30ff 	movne.w	r0, #4294967295
 80001b4:	f000 b972 	b.w	800049c <__aeabi_idiv0>
 80001b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001c0:	f000 f806 	bl	80001d0 <__udivmoddi4>
 80001c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001cc:	b004      	add	sp, #16
 80001ce:	4770      	bx	lr

080001d0 <__udivmoddi4>:
 80001d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001d4:	9e08      	ldr	r6, [sp, #32]
 80001d6:	4604      	mov	r4, r0
 80001d8:	4688      	mov	r8, r1
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d14b      	bne.n	8000276 <__udivmoddi4+0xa6>
 80001de:	428a      	cmp	r2, r1
 80001e0:	4615      	mov	r5, r2
 80001e2:	d967      	bls.n	80002b4 <__udivmoddi4+0xe4>
 80001e4:	fab2 f282 	clz	r2, r2
 80001e8:	b14a      	cbz	r2, 80001fe <__udivmoddi4+0x2e>
 80001ea:	f1c2 0720 	rsb	r7, r2, #32
 80001ee:	fa01 f302 	lsl.w	r3, r1, r2
 80001f2:	fa20 f707 	lsr.w	r7, r0, r7
 80001f6:	4095      	lsls	r5, r2
 80001f8:	ea47 0803 	orr.w	r8, r7, r3
 80001fc:	4094      	lsls	r4, r2
 80001fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000202:	0c23      	lsrs	r3, r4, #16
 8000204:	fbb8 f7fe 	udiv	r7, r8, lr
 8000208:	fa1f fc85 	uxth.w	ip, r5
 800020c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000210:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000214:	fb07 f10c 	mul.w	r1, r7, ip
 8000218:	4299      	cmp	r1, r3
 800021a:	d909      	bls.n	8000230 <__udivmoddi4+0x60>
 800021c:	18eb      	adds	r3, r5, r3
 800021e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000222:	f080 811b 	bcs.w	800045c <__udivmoddi4+0x28c>
 8000226:	4299      	cmp	r1, r3
 8000228:	f240 8118 	bls.w	800045c <__udivmoddi4+0x28c>
 800022c:	3f02      	subs	r7, #2
 800022e:	442b      	add	r3, r5
 8000230:	1a5b      	subs	r3, r3, r1
 8000232:	b2a4      	uxth	r4, r4
 8000234:	fbb3 f0fe 	udiv	r0, r3, lr
 8000238:	fb0e 3310 	mls	r3, lr, r0, r3
 800023c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000240:	fb00 fc0c 	mul.w	ip, r0, ip
 8000244:	45a4      	cmp	ip, r4
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x8c>
 8000248:	192c      	adds	r4, r5, r4
 800024a:	f100 33ff 	add.w	r3, r0, #4294967295
 800024e:	f080 8107 	bcs.w	8000460 <__udivmoddi4+0x290>
 8000252:	45a4      	cmp	ip, r4
 8000254:	f240 8104 	bls.w	8000460 <__udivmoddi4+0x290>
 8000258:	3802      	subs	r0, #2
 800025a:	442c      	add	r4, r5
 800025c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000260:	eba4 040c 	sub.w	r4, r4, ip
 8000264:	2700      	movs	r7, #0
 8000266:	b11e      	cbz	r6, 8000270 <__udivmoddi4+0xa0>
 8000268:	40d4      	lsrs	r4, r2
 800026a:	2300      	movs	r3, #0
 800026c:	e9c6 4300 	strd	r4, r3, [r6]
 8000270:	4639      	mov	r1, r7
 8000272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000276:	428b      	cmp	r3, r1
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0xbe>
 800027a:	2e00      	cmp	r6, #0
 800027c:	f000 80eb 	beq.w	8000456 <__udivmoddi4+0x286>
 8000280:	2700      	movs	r7, #0
 8000282:	e9c6 0100 	strd	r0, r1, [r6]
 8000286:	4638      	mov	r0, r7
 8000288:	4639      	mov	r1, r7
 800028a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800028e:	fab3 f783 	clz	r7, r3
 8000292:	2f00      	cmp	r7, #0
 8000294:	d147      	bne.n	8000326 <__udivmoddi4+0x156>
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__udivmoddi4+0xd0>
 800029a:	4282      	cmp	r2, r0
 800029c:	f200 80fa 	bhi.w	8000494 <__udivmoddi4+0x2c4>
 80002a0:	1a84      	subs	r4, r0, r2
 80002a2:	eb61 0303 	sbc.w	r3, r1, r3
 80002a6:	2001      	movs	r0, #1
 80002a8:	4698      	mov	r8, r3
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	d0e0      	beq.n	8000270 <__udivmoddi4+0xa0>
 80002ae:	e9c6 4800 	strd	r4, r8, [r6]
 80002b2:	e7dd      	b.n	8000270 <__udivmoddi4+0xa0>
 80002b4:	b902      	cbnz	r2, 80002b8 <__udivmoddi4+0xe8>
 80002b6:	deff      	udf	#255	; 0xff
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	2a00      	cmp	r2, #0
 80002be:	f040 808f 	bne.w	80003e0 <__udivmoddi4+0x210>
 80002c2:	1b49      	subs	r1, r1, r5
 80002c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002c8:	fa1f f885 	uxth.w	r8, r5
 80002cc:	2701      	movs	r7, #1
 80002ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80002d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002dc:	fb08 f10c 	mul.w	r1, r8, ip
 80002e0:	4299      	cmp	r1, r3
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0x124>
 80002e4:	18eb      	adds	r3, r5, r3
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0x122>
 80002ec:	4299      	cmp	r1, r3
 80002ee:	f200 80cd 	bhi.w	800048c <__udivmoddi4+0x2bc>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1a59      	subs	r1, r3, r1
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000300:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x14c>
 800030c:	192c      	adds	r4, r5, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x14a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80b6 	bhi.w	8000486 <__udivmoddi4+0x2b6>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e79f      	b.n	8000266 <__udivmoddi4+0x96>
 8000326:	f1c7 0c20 	rsb	ip, r7, #32
 800032a:	40bb      	lsls	r3, r7
 800032c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000330:	ea4e 0e03 	orr.w	lr, lr, r3
 8000334:	fa01 f407 	lsl.w	r4, r1, r7
 8000338:	fa20 f50c 	lsr.w	r5, r0, ip
 800033c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000340:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000344:	4325      	orrs	r5, r4
 8000346:	fbb3 f9f8 	udiv	r9, r3, r8
 800034a:	0c2c      	lsrs	r4, r5, #16
 800034c:	fb08 3319 	mls	r3, r8, r9, r3
 8000350:	fa1f fa8e 	uxth.w	sl, lr
 8000354:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000358:	fb09 f40a 	mul.w	r4, r9, sl
 800035c:	429c      	cmp	r4, r3
 800035e:	fa02 f207 	lsl.w	r2, r2, r7
 8000362:	fa00 f107 	lsl.w	r1, r0, r7
 8000366:	d90b      	bls.n	8000380 <__udivmoddi4+0x1b0>
 8000368:	eb1e 0303 	adds.w	r3, lr, r3
 800036c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000370:	f080 8087 	bcs.w	8000482 <__udivmoddi4+0x2b2>
 8000374:	429c      	cmp	r4, r3
 8000376:	f240 8084 	bls.w	8000482 <__udivmoddi4+0x2b2>
 800037a:	f1a9 0902 	sub.w	r9, r9, #2
 800037e:	4473      	add	r3, lr
 8000380:	1b1b      	subs	r3, r3, r4
 8000382:	b2ad      	uxth	r5, r5
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000390:	fb00 fa0a 	mul.w	sl, r0, sl
 8000394:	45a2      	cmp	sl, r4
 8000396:	d908      	bls.n	80003aa <__udivmoddi4+0x1da>
 8000398:	eb1e 0404 	adds.w	r4, lr, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a0:	d26b      	bcs.n	800047a <__udivmoddi4+0x2aa>
 80003a2:	45a2      	cmp	sl, r4
 80003a4:	d969      	bls.n	800047a <__udivmoddi4+0x2aa>
 80003a6:	3802      	subs	r0, #2
 80003a8:	4474      	add	r4, lr
 80003aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ae:	fba0 8902 	umull	r8, r9, r0, r2
 80003b2:	eba4 040a 	sub.w	r4, r4, sl
 80003b6:	454c      	cmp	r4, r9
 80003b8:	46c2      	mov	sl, r8
 80003ba:	464b      	mov	r3, r9
 80003bc:	d354      	bcc.n	8000468 <__udivmoddi4+0x298>
 80003be:	d051      	beq.n	8000464 <__udivmoddi4+0x294>
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d069      	beq.n	8000498 <__udivmoddi4+0x2c8>
 80003c4:	ebb1 050a 	subs.w	r5, r1, sl
 80003c8:	eb64 0403 	sbc.w	r4, r4, r3
 80003cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003d0:	40fd      	lsrs	r5, r7
 80003d2:	40fc      	lsrs	r4, r7
 80003d4:	ea4c 0505 	orr.w	r5, ip, r5
 80003d8:	e9c6 5400 	strd	r5, r4, [r6]
 80003dc:	2700      	movs	r7, #0
 80003de:	e747      	b.n	8000270 <__udivmoddi4+0xa0>
 80003e0:	f1c2 0320 	rsb	r3, r2, #32
 80003e4:	fa20 f703 	lsr.w	r7, r0, r3
 80003e8:	4095      	lsls	r5, r2
 80003ea:	fa01 f002 	lsl.w	r0, r1, r2
 80003ee:	fa21 f303 	lsr.w	r3, r1, r3
 80003f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f6:	4338      	orrs	r0, r7
 80003f8:	0c01      	lsrs	r1, r0, #16
 80003fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80003fe:	fa1f f885 	uxth.w	r8, r5
 8000402:	fb0e 3317 	mls	r3, lr, r7, r3
 8000406:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040a:	fb07 f308 	mul.w	r3, r7, r8
 800040e:	428b      	cmp	r3, r1
 8000410:	fa04 f402 	lsl.w	r4, r4, r2
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x256>
 8000416:	1869      	adds	r1, r5, r1
 8000418:	f107 3cff 	add.w	ip, r7, #4294967295
 800041c:	d22f      	bcs.n	800047e <__udivmoddi4+0x2ae>
 800041e:	428b      	cmp	r3, r1
 8000420:	d92d      	bls.n	800047e <__udivmoddi4+0x2ae>
 8000422:	3f02      	subs	r7, #2
 8000424:	4429      	add	r1, r5
 8000426:	1acb      	subs	r3, r1, r3
 8000428:	b281      	uxth	r1, r0
 800042a:	fbb3 f0fe 	udiv	r0, r3, lr
 800042e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb00 f308 	mul.w	r3, r0, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x27e>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f100 3cff 	add.w	ip, r0, #4294967295
 8000444:	d217      	bcs.n	8000476 <__udivmoddi4+0x2a6>
 8000446:	428b      	cmp	r3, r1
 8000448:	d915      	bls.n	8000476 <__udivmoddi4+0x2a6>
 800044a:	3802      	subs	r0, #2
 800044c:	4429      	add	r1, r5
 800044e:	1ac9      	subs	r1, r1, r3
 8000450:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000454:	e73b      	b.n	80002ce <__udivmoddi4+0xfe>
 8000456:	4637      	mov	r7, r6
 8000458:	4630      	mov	r0, r6
 800045a:	e709      	b.n	8000270 <__udivmoddi4+0xa0>
 800045c:	4607      	mov	r7, r0
 800045e:	e6e7      	b.n	8000230 <__udivmoddi4+0x60>
 8000460:	4618      	mov	r0, r3
 8000462:	e6fb      	b.n	800025c <__udivmoddi4+0x8c>
 8000464:	4541      	cmp	r1, r8
 8000466:	d2ab      	bcs.n	80003c0 <__udivmoddi4+0x1f0>
 8000468:	ebb8 0a02 	subs.w	sl, r8, r2
 800046c:	eb69 020e 	sbc.w	r2, r9, lr
 8000470:	3801      	subs	r0, #1
 8000472:	4613      	mov	r3, r2
 8000474:	e7a4      	b.n	80003c0 <__udivmoddi4+0x1f0>
 8000476:	4660      	mov	r0, ip
 8000478:	e7e9      	b.n	800044e <__udivmoddi4+0x27e>
 800047a:	4618      	mov	r0, r3
 800047c:	e795      	b.n	80003aa <__udivmoddi4+0x1da>
 800047e:	4667      	mov	r7, ip
 8000480:	e7d1      	b.n	8000426 <__udivmoddi4+0x256>
 8000482:	4681      	mov	r9, r0
 8000484:	e77c      	b.n	8000380 <__udivmoddi4+0x1b0>
 8000486:	3802      	subs	r0, #2
 8000488:	442c      	add	r4, r5
 800048a:	e747      	b.n	800031c <__udivmoddi4+0x14c>
 800048c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000490:	442b      	add	r3, r5
 8000492:	e72f      	b.n	80002f4 <__udivmoddi4+0x124>
 8000494:	4638      	mov	r0, r7
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xda>
 8000498:	4637      	mov	r7, r6
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0xa0>

0800049c <__aeabi_idiv0>:
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop

080004a0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80004a8:	4b07      	ldr	r3, [pc, #28]	; (80004c8 <LL_C2_PWR_SetPowerMode+0x28>)
 80004aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004ae:	f023 0207 	bic.w	r2, r3, #7
 80004b2:	4905      	ldr	r1, [pc, #20]	; (80004c8 <LL_C2_PWR_SetPowerMode+0x28>)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4313      	orrs	r3, r2
 80004b8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80004bc:	bf00      	nop
 80004be:	370c      	adds	r7, #12
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr
 80004c8:	58000400 	.word	0x58000400

080004cc <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80004d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004d8:	689b      	ldr	r3, [r3, #8]
 80004da:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80004de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4313      	orrs	r3, r2
 80004e6:	608b      	str	r3, [r1, #8]
}
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 80004f8:	f000 f80a 	bl	8000510 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80004fc:	4903      	ldr	r1, [pc, #12]	; (800050c <APPE_Init+0x18>)
 80004fe:	2000      	movs	r0, #0
 8000500:	f000 f922 	bl	8000748 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000504:	f000 f812 	bl	800052c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000508:	bf00      	nop
}
 800050a:	bd80      	pop	{r7, pc}
 800050c:	200005d4 	.word	0x200005d4

08000510 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000514:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000518:	f7ff ffd8 	bl	80004cc <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800051c:	f006 ff9e 	bl	800745c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000520:	2004      	movs	r0, #4
 8000522:	f7ff ffbd 	bl	80004a0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000526:	bf00      	nop
}
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b088      	sub	sp, #32
 8000530:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000532:	f004 ff1f 	bl	8005374 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000536:	4a11      	ldr	r2, [pc, #68]	; (800057c <appe_Tl_Init+0x50>)
 8000538:	2100      	movs	r1, #0
 800053a:	2004      	movs	r0, #4
 800053c:	f007 f8ae 	bl	800769c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000540:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <appe_Tl_Init+0x54>)
 8000542:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <appe_Tl_Init+0x58>)
 8000546:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000548:	463b      	mov	r3, r7
 800054a:	4619      	mov	r1, r3
 800054c:	480e      	ldr	r0, [pc, #56]	; (8000588 <appe_Tl_Init+0x5c>)
 800054e:	f004 fdd7 	bl	8005100 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000556:	4b0d      	ldr	r3, [pc, #52]	; (800058c <appe_Tl_Init+0x60>)
 8000558:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800055a:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <appe_Tl_Init+0x64>)
 800055c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800055e:	f240 533c 	movw	r3, #1340	; 0x53c
 8000562:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000564:	f107 0308 	add.w	r3, r7, #8
 8000568:	4618      	mov	r0, r3
 800056a:	f005 f86d 	bl	8005648 <TL_MM_Init>

  TL_Enable();
 800056e:	f004 fefb 	bl	8005368 <TL_Enable>

  return;
 8000572:	bf00      	nop
}
 8000574:	3720      	adds	r7, #32
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	08005139 	.word	0x08005139
 8000580:	2003061c 	.word	0x2003061c
 8000584:	08000595 	.word	0x08000595
 8000588:	080005ab 	.word	0x080005ab
 800058c:	20030728 	.word	0x20030728
 8000590:	200300e0 	.word	0x200300e0

08000594 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800059e:	bf00      	nop
}
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b084      	sub	sp, #16
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	685b      	ldr	r3, [r3, #4]
 80005b6:	330b      	adds	r3, #11
 80005b8:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	881b      	ldrh	r3, [r3, #0]
 80005be:	b29b      	uxth	r3, r3
 80005c0:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 80005c4:	d004      	beq.n	80005d0 <APPE_SysUserEvtRx+0x26>
 80005c6:	f249 2201 	movw	r2, #37377	; 0x9201
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d003      	beq.n	80005d6 <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 80005ce:	e008      	b.n	80005e2 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 80005d0:	f000 f834 	bl	800063c <APPE_SysEvtReadyProcessing>
         break;
 80005d4:	e005      	b.n	80005e2 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	789b      	ldrb	r3, [r3, #2]
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 f806 	bl	80005ec <APPE_SysEvtError>
         break;
 80005e0:	bf00      	nop
  }
  return;
 80005e2:	bf00      	nop
}
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	2b7d      	cmp	r3, #125	; 0x7d
 80005fa:	d002      	beq.n	8000602 <APPE_SysEvtError+0x16>
 80005fc:	2b7e      	cmp	r3, #126	; 0x7e
 80005fe:	d006      	beq.n	800060e <APPE_SysEvtError+0x22>
 8000600:	e00b      	b.n	800061a <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8000602:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <APPE_SysEvtError+0x44>)
 8000604:	2101      	movs	r1, #1
 8000606:	2000      	movs	r0, #0
 8000608:	f000 fe58 	bl	80012bc <logApplication>
       break;
 800060c:	e00c      	b.n	8000628 <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 800060e:	4a09      	ldr	r2, [pc, #36]	; (8000634 <APPE_SysEvtError+0x48>)
 8000610:	2101      	movs	r1, #1
 8000612:	2000      	movs	r0, #0
 8000614:	f000 fe52 	bl	80012bc <logApplication>
       break;
 8000618:	e006      	b.n	8000628 <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	4a06      	ldr	r2, [pc, #24]	; (8000638 <APPE_SysEvtError+0x4c>)
 800061e:	2101      	movs	r1, #1
 8000620:	2000      	movs	r0, #0
 8000622:	f000 fe4b 	bl	80012bc <logApplication>
       break;
 8000626:	bf00      	nop
  }
  return;
 8000628:	bf00      	nop
}
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	08007908 	.word	0x08007908
 8000634:	0800792c 	.word	0x0800792c
 8000638:	0800794c 	.word	0x0800794c

0800063c <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8000640:	f005 f876 	bl	8005730 <TL_TRACES_Init>

  APP_THREAD_Init();
 8000644:	f005 ff78 	bl	8006538 <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000648:	2100      	movs	r1, #0
 800064a:	2001      	movs	r0, #1
 800064c:	f006 ff18 	bl	8007480 <UTIL_LPM_SetOffMode>
  return;
 8000650:	bf00      	nop
}
 8000652:	bd80      	pop	{r7, pc}

08000654 <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8000658:	bf00      	nop
}
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr

08000662 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000662:	b580      	push	{r7, lr}
 8000664:	b082      	sub	sp, #8
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
 800066a:	6039      	str	r1, [r7, #0]
  switch(evt_waited_bm)
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	2b02      	cmp	r3, #2
 8000670:	d002      	beq.n	8000678 <UTIL_SEQ_EvtIdle+0x16>
 8000672:	2b04      	cmp	r3, #4
 8000674:	d004      	beq.n	8000680 <UTIL_SEQ_EvtIdle+0x1e>
 8000676:	e00a      	b.n	800068e <UTIL_SEQ_EvtIdle+0x2c>
  {
  case EVENT_ACK_FROM_M0_EVT:
    /* Does not allow other tasks when waiting for OT Cmd response */
    UTIL_SEQ_Run(0);
 8000678:	2000      	movs	r0, #0
 800067a:	f006 ff2f 	bl	80074dc <UTIL_SEQ_Run>
    break;
 800067e:	e00b      	b.n	8000698 <UTIL_SEQ_EvtIdle+0x36>
  case EVENT_SYNCHRO_BYPASS_IDLE:
    UTIL_SEQ_SetEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 8000680:	2004      	movs	r0, #4
 8000682:	f007 f855 	bl	8007730 <UTIL_SEQ_SetEvt>
    /* Run only the task CFG_TASK_MSG_FROM_M0_TO_M4 */
    UTIL_SEQ_Run(TASK_MSG_FROM_M0_TO_M4);
 8000686:	2001      	movs	r0, #1
 8000688:	f006 ff28 	bl	80074dc <UTIL_SEQ_Run>
    break;
 800068c:	e004      	b.n	8000698 <UTIL_SEQ_EvtIdle+0x36>
  default :
    /* default case */
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 800068e:	f04f 30ff 	mov.w	r0, #4294967295
 8000692:	f006 ff23 	bl	80074dc <UTIL_SEQ_Run>
    break;
 8000696:	bf00      	nop
  }
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  UTIL_SEQ_SetTask(1U << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, CFG_SCH_PRIO_0);
 80006a8:	2100      	movs	r1, #0
 80006aa:	2004      	movs	r0, #4
 80006ac:	f007 f816 	bl	80076dc <UTIL_SEQ_SetTask>
  return;
 80006b0:	bf00      	nop
}
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  UTIL_SEQ_SetEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 80006c0:	2001      	movs	r0, #1
 80006c2:	f007 f835 	bl	8007730 <UTIL_SEQ_SetEvt>
  return;
 80006c6:	bf00      	nop
}
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b082      	sub	sp, #8
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  UTIL_SEQ_WaitEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 80006d6:	2001      	movs	r0, #1
 80006d8:	f007 f848 	bl	800776c <UTIL_SEQ_WaitEvt>
  return;
 80006dc:	bf00      	nop
}
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f004 ffe7 	bl	80056c0 <TL_MM_EvtDone>
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <LL_EXTI_EnableIT_0_31+0x24>)
 8000706:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800070a:	4905      	ldr	r1, [pc, #20]	; (8000720 <LL_EXTI_EnableIT_0_31+0x24>)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4313      	orrs	r3, r2
 8000710:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	58000800 	.word	0x58000800

08000724 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	4904      	ldr	r1, [pc, #16]	; (8000744 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4313      	orrs	r3, r2
 8000736:	600b      	str	r3, [r1, #0]

}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	58000800 	.word	0x58000800

08000748 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	6039      	str	r1, [r7, #0]
 8000752:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000754:	4a64      	ldr	r2, [pc, #400]	; (80008e8 <HW_TS_Init+0x1a0>)
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800075a:	4b63      	ldr	r3, [pc, #396]	; (80008e8 <HW_TS_Init+0x1a0>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	22ca      	movs	r2, #202	; 0xca
 8000762:	625a      	str	r2, [r3, #36]	; 0x24
 8000764:	4b60      	ldr	r3, [pc, #384]	; (80008e8 <HW_TS_Init+0x1a0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2253      	movs	r2, #83	; 0x53
 800076c:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800076e:	4b5f      	ldr	r3, [pc, #380]	; (80008ec <HW_TS_Init+0x1a4>)
 8000770:	689b      	ldr	r3, [r3, #8]
 8000772:	4a5e      	ldr	r2, [pc, #376]	; (80008ec <HW_TS_Init+0x1a4>)
 8000774:	f043 0320 	orr.w	r3, r3, #32
 8000778:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800077a:	4b5c      	ldr	r3, [pc, #368]	; (80008ec <HW_TS_Init+0x1a4>)
 800077c:	689b      	ldr	r3, [r3, #8]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	f003 0307 	and.w	r3, r3, #7
 8000784:	b2db      	uxtb	r3, r3
 8000786:	f1c3 0304 	rsb	r3, r3, #4
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b58      	ldr	r3, [pc, #352]	; (80008f0 <HW_TS_Init+0x1a8>)
 800078e:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000790:	4b56      	ldr	r3, [pc, #344]	; (80008ec <HW_TS_Init+0x1a4>)
 8000792:	691b      	ldr	r3, [r3, #16]
 8000794:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000798:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800079c:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800079e:	693a      	ldr	r2, [r7, #16]
 80007a0:	fa92 f2a2 	rbit	r2, r2
 80007a4:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80007a6:	68fa      	ldr	r2, [r7, #12]
 80007a8:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80007aa:	697a      	ldr	r2, [r7, #20]
 80007ac:	2a00      	cmp	r2, #0
 80007ae:	d101      	bne.n	80007b4 <HW_TS_Init+0x6c>
  {
    return 32U;
 80007b0:	2220      	movs	r2, #32
 80007b2:	e003      	b.n	80007bc <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 80007b4:	697a      	ldr	r2, [r7, #20]
 80007b6:	fab2 f282 	clz	r2, r2
 80007ba:	b2d2      	uxtb	r2, r2
 80007bc:	40d3      	lsrs	r3, r2
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	3301      	adds	r3, #1
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	4b4b      	ldr	r3, [pc, #300]	; (80008f4 <HW_TS_Init+0x1ac>)
 80007c6:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80007c8:	4b48      	ldr	r3, [pc, #288]	; (80008ec <HW_TS_Init+0x1a4>)
 80007ca:	691b      	ldr	r3, [r3, #16]
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	3301      	adds	r3, #1
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	4b47      	ldr	r3, [pc, #284]	; (80008f8 <HW_TS_Init+0x1b0>)
 80007da:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80007dc:	4b46      	ldr	r3, [pc, #280]	; (80008f8 <HW_TS_Init+0x1b0>)
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	3b01      	subs	r3, #1
 80007e2:	4a44      	ldr	r2, [pc, #272]	; (80008f4 <HW_TS_Init+0x1ac>)
 80007e4:	7812      	ldrb	r2, [r2, #0]
 80007e6:	fb02 f303 	mul.w	r3, r2, r3
 80007ea:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80007ee:	4a40      	ldr	r2, [pc, #256]	; (80008f0 <HW_TS_Init+0x1a8>)
 80007f0:	7812      	ldrb	r2, [r2, #0]
 80007f2:	40d3      	lsrs	r3, r2
 80007f4:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80007f6:	69bb      	ldr	r3, [r7, #24]
 80007f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d904      	bls.n	800080a <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000800:	4b3e      	ldr	r3, [pc, #248]	; (80008fc <HW_TS_Init+0x1b4>)
 8000802:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000806:	801a      	strh	r2, [r3, #0]
 8000808:	e003      	b.n	8000812 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800080a:	69bb      	ldr	r3, [r7, #24]
 800080c:	b29a      	uxth	r2, r3
 800080e:	4b3b      	ldr	r3, [pc, #236]	; (80008fc <HW_TS_Init+0x1b4>)
 8000810:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000812:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000816:	f7ff ff85 	bl	8000724 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800081a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800081e:	f7ff ff6d 	bl	80006fc <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d143      	bne.n	80008b0 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000828:	4b35      	ldr	r3, [pc, #212]	; (8000900 <HW_TS_Init+0x1b8>)
 800082a:	2201      	movs	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800082e:	4b35      	ldr	r3, [pc, #212]	; (8000904 <HW_TS_Init+0x1bc>)
 8000830:	f04f 32ff 	mov.w	r2, #4294967295
 8000834:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000836:	2300      	movs	r3, #0
 8000838:	77fb      	strb	r3, [r7, #31]
 800083a:	e00c      	b.n	8000856 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800083c:	7ffa      	ldrb	r2, [r7, #31]
 800083e:	4932      	ldr	r1, [pc, #200]	; (8000908 <HW_TS_Init+0x1c0>)
 8000840:	4613      	mov	r3, r2
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	4413      	add	r3, r2
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	440b      	add	r3, r1
 800084a:	330c      	adds	r3, #12
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000850:	7ffb      	ldrb	r3, [r7, #31]
 8000852:	3301      	adds	r3, #1
 8000854:	77fb      	strb	r3, [r7, #31]
 8000856:	7ffb      	ldrb	r3, [r7, #31]
 8000858:	2b05      	cmp	r3, #5
 800085a:	d9ef      	bls.n	800083c <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800085c:	4b2b      	ldr	r3, [pc, #172]	; (800090c <HW_TS_Init+0x1c4>)
 800085e:	2206      	movs	r2, #6
 8000860:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000862:	4b21      	ldr	r3, [pc, #132]	; (80008e8 <HW_TS_Init+0x1a0>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	689a      	ldr	r2, [r3, #8]
 800086a:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <HW_TS_Init+0x1a0>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000874:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <HW_TS_Init+0x1a0>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	68db      	ldr	r3, [r3, #12]
 800087e:	b2da      	uxtb	r2, r3
 8000880:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <HW_TS_Init+0x1a0>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800088a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800088c:	4b20      	ldr	r3, [pc, #128]	; (8000910 <HW_TS_Init+0x1c8>)
 800088e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000892:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000894:	2003      	movs	r0, #3
 8000896:	f000 ffc8 	bl	800182a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <HW_TS_Init+0x1a0>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	689a      	ldr	r2, [r3, #8]
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <HW_TS_Init+0x1a0>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	e00a      	b.n	80008c6 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80008b0:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <HW_TS_Init+0x1a0>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d002      	beq.n	80008c6 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80008c0:	2003      	movs	r0, #3
 80008c2:	f000 ffa4 	bl	800180e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <HW_TS_Init+0x1a0>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	22ff      	movs	r2, #255	; 0xff
 80008ce:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80008d0:	2200      	movs	r2, #0
 80008d2:	2103      	movs	r1, #3
 80008d4:	2003      	movs	r0, #3
 80008d6:	f000 ff62 	bl	800179e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80008da:	2003      	movs	r0, #3
 80008dc:	f000 ff79 	bl	80017d2 <HAL_NVIC_EnableIRQ>

  return;
 80008e0:	bf00      	nop
}
 80008e2:	3720      	adds	r7, #32
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200001e8 	.word	0x200001e8
 80008ec:	40002800 	.word	0x40002800
 80008f0:	200001ec 	.word	0x200001ec
 80008f4:	200001ed 	.word	0x200001ed
 80008f8:	200001ee 	.word	0x200001ee
 80008fc:	200001f0 	.word	0x200001f0
 8000900:	200001b4 	.word	0x200001b4
 8000904:	200001b0 	.word	0x200001b0
 8000908:	2000011c 	.word	0x2000011c
 800090c:	200001ac 	.word	0x200001ac
 8000910:	58000800 	.word	0x58000800

08000914 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	60b9      	str	r1, [r7, #8]
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4603      	mov	r3, r0
 8000920:	73fb      	strb	r3, [r7, #15]
 8000922:	4613      	mov	r3, r2
 8000924:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	2b02      	cmp	r3, #2
 800092a:	d000      	beq.n	800092e <HW_UART_Receive_IT+0x1a>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 800092c:	e00c      	b.n	8000948 <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(hlpuart1, LPUART1);
 800092e:	4a08      	ldr	r2, [pc, #32]	; (8000950 <HW_UART_Receive_IT+0x3c>)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6013      	str	r3, [r2, #0]
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <HW_UART_Receive_IT+0x40>)
 8000936:	4a08      	ldr	r2, [pc, #32]	; (8000958 <HW_UART_Receive_IT+0x44>)
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	89bb      	ldrh	r3, [r7, #12]
 800093c:	461a      	mov	r2, r3
 800093e:	68b9      	ldr	r1, [r7, #8]
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <HW_UART_Receive_IT+0x40>)
 8000942:	f003 facb 	bl	8003edc <HAL_UART_Receive_IT>
            break;
 8000946:	bf00      	nop
    }

    return;
 8000948:	bf00      	nop
}
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000544 	.word	0x20000544
 8000954:	20000548 	.word	0x20000548
 8000958:	40008000 	.word	0x40008000

0800095c <HW_UART_Transmit_IT>:

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	60b9      	str	r1, [r7, #8]
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4603      	mov	r3, r0
 8000968:	73fb      	strb	r3, [r7, #15]
 800096a:	4613      	mov	r3, r2
 800096c:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	2b02      	cmp	r3, #2
 8000972:	d000      	beq.n	8000976 <HW_UART_Transmit_IT+0x1a>
            HW_UART_TX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8000974:	e00c      	b.n	8000990 <HW_UART_Transmit_IT+0x34>
            HW_UART_TX_IT(hlpuart1, LPUART1);
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <HW_UART_Transmit_IT+0x3c>)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6013      	str	r3, [r2, #0]
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <HW_UART_Transmit_IT+0x40>)
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <HW_UART_Transmit_IT+0x44>)
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	89bb      	ldrh	r3, [r7, #12]
 8000984:	461a      	mov	r2, r3
 8000986:	68b9      	ldr	r1, [r7, #8]
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <HW_UART_Transmit_IT+0x40>)
 800098a:	f003 fa23 	bl	8003dd4 <HAL_UART_Transmit_IT>
            break;
 800098e:	bf00      	nop
    }

    return;
 8000990:	bf00      	nop
}
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000540 	.word	0x20000540
 800099c:	20000548 	.word	0x20000548
 80009a0:	40008000 	.word	0x40008000

080009a4 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <HAL_UART_RxCpltCallback+0x30>)
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d000      	beq.n	80009ba <HAL_UART_RxCpltCallback+0x16>
            }
            break;
#endif

        default:
            break;
 80009b8:	e007      	b.n	80009ca <HAL_UART_RxCpltCallback+0x26>
            if(HW_hlpuart1RxCb)
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <HAL_UART_RxCpltCallback+0x34>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d002      	beq.n	80009c8 <HAL_UART_RxCpltCallback+0x24>
                HW_hlpuart1RxCb();
 80009c2:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <HAL_UART_RxCpltCallback+0x34>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4798      	blx	r3
            break;
 80009c8:	bf00      	nop
    }

    return;
 80009ca:	bf00      	nop
}
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40008000 	.word	0x40008000
 80009d8:	20000544 	.word	0x20000544

080009dc <LL_EXTI_DisableIT_0_31>:
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80009e4:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <LL_EXTI_DisableIT_0_31+0x28>)
 80009e6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	43db      	mvns	r3, r3
 80009ee:	4905      	ldr	r1, [pc, #20]	; (8000a04 <LL_EXTI_DisableIT_0_31+0x28>)
 80009f0:	4013      	ands	r3, r2
 80009f2:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	58000800 	.word	0x58000800

08000a08 <LL_EXTI_DisableIT_32_63>:
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <LL_EXTI_DisableIT_32_63+0x28>)
 8000a12:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	4905      	ldr	r1, [pc, #20]	; (8000a30 <LL_EXTI_DisableIT_32_63+0x28>)
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	58000800 	.word	0x58000800

08000a34 <LL_RCC_HSE_SetCapacitorTuning>:
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a40:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000a42:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000a4e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	021b      	lsls	r3, r3, #8
 8000a56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	cafecafe 	.word	0xcafecafe

08000a70 <LL_RCC_LSE_SetDriveCapability>:
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a80:	f023 0218 	bic.w	r2, r3, #24
 8000a84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000aa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000aca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ad2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000aec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000af0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000af4:	d101      	bne.n	8000afa <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000af6:	2301      	movs	r3, #1
 8000af8:	e000      	b.n	8000afc <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000b1a:	d101      	bne.n	8000b20 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e000      	b.n	8000b22 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000b3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b50:	68fb      	ldr	r3, [r7, #12]
}
 8000b52:	bf00      	nop
 8000b54:	3714      	adds	r7, #20
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b085      	sub	sp, #20
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b82:	68fb      	ldr	r3, [r7, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000b9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
}
 8000bb6:	bf00      	nop
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685a      	ldr	r2, [r3, #4]
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	041b      	lsls	r3, r3, #16
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	605a      	str	r2, [r3, #4]
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
 8000bee:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	431a      	orrs	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	605a      	str	r2, [r3, #4]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	695a      	ldr	r2, [r3, #20]
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	041b      	lsls	r3, r3, #16
 8000c1a:	431a      	orrs	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	615a      	str	r2, [r3, #20]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	695a      	ldr	r2, [r3, #20]
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	431a      	orrs	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	615a      	str	r2, [r3, #20]
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	b083      	sub	sp, #12
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	683a      	ldr	r2, [r7, #0]
 8000c5c:	609a      	str	r2, [r3, #8]
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
 8000c72:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	619a      	str	r2, [r3, #24]
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <main+0x58>)
 8000c8e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c92:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c94:	f000 fbb0 	bl	80013f8 <HAL_Init>

  /* USER CODE BEGIN Init */
	Reset_Device();
 8000c98:	f000 f981 	bl	8000f9e <Reset_Device>
	Config_HSE();
 8000c9c:	f000 f96b 	bl	8000f76 <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca0:	f000 f822 	bl	8000ce8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	PeriphClock_Config();
 8000ca4:	f000 f960 	bl	8000f68 <PeriphClock_Config>
	Init_Exti();
 8000ca8:	f000 f9bb 	bl	8001022 <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cac:	f000 f934 	bl	8000f18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cb0:	f000 f920 	bl	8000ef4 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000cb4:	f000 f8a0 	bl	8000df8 <MX_LPUART1_UART_Init>
  MX_RF_Init();
 8000cb8:	f000 f8ea 	bl	8000e90 <MX_RF_Init>
  MX_RTC_Init();
 8000cbc:	f000 f8f0 	bl	8000ea0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 8000cc0:	f7ff fc18 	bl	80004f4 <APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if(child_notif == 1){
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <main+0x5c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d103      	bne.n	8000cd4 <main+0x4c>
			UTIL_SEQ_SetTask(TASK_UDP_SEND, CFG_SCH_PRIO_1);
 8000ccc:	2101      	movs	r1, #1
 8000cce:	2008      	movs	r0, #8
 8000cd0:	f006 fd04 	bl	80076dc <UTIL_SEQ_SetTask>
		}
		UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f006 fc00 	bl	80074dc <UTIL_SEQ_Run>
		if(child_notif == 1){
 8000cdc:	e7f2      	b.n	8000cc4 <main+0x3c>
 8000cde:	bf00      	nop
 8000ce0:	58004000 	.word	0x58004000
 8000ce4:	200001f4 	.word	0x200001f4

08000ce8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b0ae      	sub	sp, #184	; 0xb8
 8000cec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000cf2:	2248      	movs	r2, #72	; 0x48
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f006 fdf1 	bl	80078de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cfc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
 8000d0c:	615a      	str	r2, [r3, #20]
 8000d0e:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2250      	movs	r2, #80	; 0x50
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f006 fde1 	bl	80078de <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d1c:	f001 f916 	bl	8001f4c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d20:	2000      	movs	r0, #0
 8000d22:	f7ff fea5 	bl	8000a70 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d26:	4b33      	ldr	r3, [pc, #204]	; (8000df4 <SystemClock_Config+0x10c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d2e:	4a31      	ldr	r2, [pc, #196]	; (8000df4 <SystemClock_Config+0x10c>)
 8000d30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	4b2f      	ldr	r3, [pc, #188]	; (8000df4 <SystemClock_Config+0x10c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000d42:	2327      	movs	r3, #39	; 0x27
 8000d44:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d4a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d54:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d56:	2301      	movs	r3, #1
 8000d58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d5c:	2340      	movs	r3, #64	; 0x40
 8000d5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000d68:	23a0      	movs	r3, #160	; 0xa0
 8000d6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d74:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f001 fc7b 	bl	8002674 <HAL_RCC_OscConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000d84:	f000 f959 	bl	800103a <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000d88:	236f      	movs	r3, #111	; 0x6f
 8000d8a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000da4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000da8:	2101      	movs	r1, #1
 8000daa:	4618      	mov	r0, r3
 8000dac:	f001 ffee 	bl	8002d8c <HAL_RCC_ClockConfig>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000db6:	f000 f940 	bl	800103a <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8000dba:	f643 0302 	movw	r3, #14338	; 0x3802
 8000dbe:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000dc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8000dca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000dce:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000dd4:	2310      	movs	r3, #16
 8000dd6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f002 fc15 	bl	800360a <HAL_RCCEx_PeriphCLKConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <SystemClock_Config+0x102>
  {
    Error_Handler();
 8000de6:	f000 f928 	bl	800103a <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000dea:	bf00      	nop
 8000dec:	37b8      	adds	r7, #184	; 0xb8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	58000400 	.word	0x58000400

08000df8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPUART1_UART_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000dfc:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <MX_LPUART1_UART_Init+0x90>)
 8000dfe:	4a23      	ldr	r2, [pc, #140]	; (8000e8c <MX_LPUART1_UART_Init+0x94>)
 8000e00:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000e02:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <MX_LPUART1_UART_Init+0x90>)
 8000e04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e08:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <MX_LPUART1_UART_Init+0x90>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e10:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <MX_LPUART1_UART_Init+0x90>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e16:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <MX_LPUART1_UART_Init+0x90>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <MX_LPUART1_UART_Init+0x90>)
 8000e1e:	220c      	movs	r2, #12
 8000e20:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <MX_LPUART1_UART_Init+0x90>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <MX_LPUART1_UART_Init+0x90>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <MX_LPUART1_UART_Init+0x90>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_LPUART1_UART_Init+0x90>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <MX_LPUART1_UART_Init+0x90>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e40:	4811      	ldr	r0, [pc, #68]	; (8000e88 <MX_LPUART1_UART_Init+0x90>)
 8000e42:	f002 ff76 	bl	8003d32 <HAL_UART_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e4c:	f000 f8f5 	bl	800103a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e50:	2100      	movs	r1, #0
 8000e52:	480d      	ldr	r0, [pc, #52]	; (8000e88 <MX_LPUART1_UART_Init+0x90>)
 8000e54:	f003 ff95 	bl	8004d82 <HAL_UARTEx_SetTxFifoThreshold>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e5e:	f000 f8ec 	bl	800103a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e62:	2100      	movs	r1, #0
 8000e64:	4808      	ldr	r0, [pc, #32]	; (8000e88 <MX_LPUART1_UART_Init+0x90>)
 8000e66:	f003 ffca 	bl	8004dfe <HAL_UARTEx_SetRxFifoThreshold>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e70:	f000 f8e3 	bl	800103a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000e74:	4804      	ldr	r0, [pc, #16]	; (8000e88 <MX_LPUART1_UART_Init+0x90>)
 8000e76:	f003 ff4b 	bl	8004d10 <HAL_UARTEx_DisableFifoMode>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e80:	f000 f8db 	bl	800103a <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000548 	.word	0x20000548
 8000e8c:	40008000 	.word	0x40008000

08000e90 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_RTC_Init+0x4c>)
 8000ea6:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <MX_RTC_Init+0x50>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <MX_RTC_Init+0x4c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <MX_RTC_Init+0x4c>)
 8000eb2:	220f      	movs	r2, #15
 8000eb4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <MX_RTC_Init+0x4c>)
 8000eb8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000ebc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <MX_RTC_Init+0x4c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_RTC_Init+0x4c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <MX_RTC_Init+0x4c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_RTC_Init+0x4c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_RTC_Init+0x4c>)
 8000ed8:	f002 fe1d 	bl	8003b16 <HAL_RTC_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000ee2:	f000 f8aa 	bl	800103a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200005d4 	.word	0x200005d4
 8000ef0:	40002800 	.word	0x40002800

08000ef4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ef8:	2004      	movs	r0, #4
 8000efa:	f7ff fe17 	bl	8000b2c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000efe:	2001      	movs	r0, #1
 8000f00:	f7ff fe14 	bl	8000b2c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2100      	movs	r1, #0
 8000f08:	200b      	movs	r0, #11
 8000f0a:	f000 fc48 	bl	800179e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f0e:	200b      	movs	r0, #11
 8000f10:	f000 fc5f 	bl	80017d2 <HAL_NVIC_EnableIRQ>

}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2c:	2004      	movs	r0, #4
 8000f2e:	f7ff fe16 	bl	8000b5e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	2002      	movs	r0, #2
 8000f34:	f7ff fe13 	bl	8000b5e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2103      	movs	r1, #3
 8000f3c:	4809      	ldr	r0, [pc, #36]	; (8000f64 <MX_GPIO_Init+0x4c>)
 8000f3e:	f000 ffaf 	bl	8001ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f42:	2303      	movs	r3, #3
 8000f44:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	4619      	mov	r1, r3
 8000f56:	4803      	ldr	r0, [pc, #12]	; (8000f64 <MX_GPIO_Init+0x4c>)
 8000f58:	f000 fe32 	bl	8001bc0 <HAL_GPIO_Init>

}
 8000f5c:	bf00      	nop
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	48000400 	.word	0x48000400

08000f68 <PeriphClock_Config>:

/* USER CODE BEGIN 4 */
void PeriphClock_Config(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0

  /* Start automatic synchronization */
  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

  return;
 8000f6c:	bf00      	nop
}
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <Config_HSE>:
static void Config_HSE(void)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f005 f9ff 	bl	8006380 <OTP_Read>
 8000f82:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d005      	beq.n	8000f96 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	799b      	ldrb	r3, [r3, #6]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fd50 	bl	8000a34 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
}
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <Reset_Device>:


static void Reset_Device( void )
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8000fa2:	f000 f827 	bl	8000ff4 <Reset_BackupDomain>

  Reset_IPCC();
 8000fa6:	f000 f803 	bl	8000fb0 <Reset_IPCC>
#endif

  return;
 8000faa:	bf00      	nop
}
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000fb4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000fb8:	f7ff fdea 	bl	8000b90 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000fbc:	213f      	movs	r1, #63	; 0x3f
 8000fbe:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <Reset_IPCC+0x40>)
 8000fc0:	f7ff fe45 	bl	8000c4e <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000fc4:	213f      	movs	r1, #63	; 0x3f
 8000fc6:	480a      	ldr	r0, [pc, #40]	; (8000ff0 <Reset_IPCC+0x40>)
 8000fc8:	f7ff fe4f 	bl	8000c6a <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000fcc:	213f      	movs	r1, #63	; 0x3f
 8000fce:	4808      	ldr	r0, [pc, #32]	; (8000ff0 <Reset_IPCC+0x40>)
 8000fd0:	f7ff fdf7 	bl	8000bc2 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000fd4:	213f      	movs	r1, #63	; 0x3f
 8000fd6:	4806      	ldr	r0, [pc, #24]	; (8000ff0 <Reset_IPCC+0x40>)
 8000fd8:	f7ff fe16 	bl	8000c08 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000fdc:	213f      	movs	r1, #63	; 0x3f
 8000fde:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <Reset_IPCC+0x40>)
 8000fe0:	f7ff fe01 	bl	8000be6 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000fe4:	213f      	movs	r1, #63	; 0x3f
 8000fe6:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <Reset_IPCC+0x40>)
 8000fe8:	f7ff fe20 	bl	8000c2c <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000fec:	bf00      	nop
}
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	58000c00 	.word	0x58000c00

08000ff4 <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000ff8:	f7ff fd72 	bl	8000ae0 <LL_RCC_IsActiveFlag_PINRST>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00d      	beq.n	800101e <Reset_BackupDomain+0x2a>
 8001002:	f7ff fd80 	bl	8000b06 <LL_RCC_IsActiveFlag_SFTRST>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d108      	bne.n	800101e <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800100c:	f000 ff9e 	bl	8001f4c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8001010:	f000 ff9c 	bl	8001f4c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001014:	f7ff fd42 	bl	8000a9c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001018:	f7ff fd51 	bl	8000abe <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 800101c:	bf00      	nop
 800101e:	bf00      	nop
}
 8001020:	bd80      	pop	{r7, pc}

08001022 <Init_Exti>:


static void Init_Exti( void )
{
 8001022:	b580      	push	{r7, lr}
 8001024:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 8001026:	f04f 30ff 	mov.w	r0, #4294967295
 800102a:	f7ff fcd7 	bl	80009dc <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 800102e:	f06f 0050 	mvn.w	r0, #80	; 0x50
 8001032:	f7ff fce9 	bl	8000a08 <LL_EXTI_DisableIT_32_63>

  return;
 8001036:	bf00      	nop
}
 8001038:	bd80      	pop	{r7, pc}

0800103a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800103e:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001040:	e7fe      	b.n	8001040 <Error_Handler+0x6>

08001042 <LL_RCC_EnableRTC>:
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800104a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800104e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001056:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <LL_AHB2_GRP1_EnableClock>:
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800106c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001070:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001072:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4313      	orrs	r3, r2
 800107a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800107c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001080:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4013      	ands	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001088:	68fb      	ldr	r3, [r7, #12]
}
 800108a:	bf00      	nop
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <LL_AHB3_GRP1_EnableClock>:
{
 8001096:	b480      	push	{r7}
 8001098:	b085      	sub	sp, #20
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800109e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80010ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4013      	ands	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010ba:	68fb      	ldr	r3, [r7, #12]
}
 80010bc:	bf00      	nop
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80010d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4313      	orrs	r3, r2
 80010de:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80010e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4013      	ands	r3, r2
 80010ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010ec:	68fb      	ldr	r3, [r7, #12]
}
 80010ee:	bf00      	nop
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b085      	sub	sp, #20
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001106:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001108:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4313      	orrs	r3, r2
 8001110:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001116:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4013      	ands	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001130:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001134:	f7ff ffaf 	bl	8001096 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	2100      	movs	r1, #0
 800113c:	202e      	movs	r0, #46	; 0x2e
 800113e:	f000 fb2e 	bl	800179e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001142:	202e      	movs	r0, #46	; 0x2e
 8001144:	f000 fb45 	bl	80017d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}

0800114c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a22      	ldr	r2, [pc, #136]	; (80011f4 <HAL_UART_MspInit+0xa8>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d13e      	bne.n	80011ec <HAL_UART_MspInit+0xa0>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800116e:	2001      	movs	r0, #1
 8001170:	f7ff ffc3 	bl	80010fa <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001174:	2004      	movs	r0, #4
 8001176:	f7ff ff75 	bl	8001064 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800117a:	2303      	movs	r3, #3
 800117c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800118a:	2308      	movs	r3, #8
 800118c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	4619      	mov	r1, r3
 8001194:	4818      	ldr	r0, [pc, #96]	; (80011f8 <HAL_UART_MspInit+0xac>)
 8001196:	f000 fd13 	bl	8001bc0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <HAL_UART_MspInit+0xb0>)
 800119c:	4a18      	ldr	r2, [pc, #96]	; (8001200 <HAL_UART_MspInit+0xb4>)
 800119e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <HAL_UART_MspInit+0xb0>)
 80011a2:	2211      	movs	r2, #17
 80011a4:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_UART_MspInit+0xb0>)
 80011a8:	2210      	movs	r2, #16
 80011aa:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <HAL_UART_MspInit+0xb0>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_UART_MspInit+0xb0>)
 80011b4:	2280      	movs	r2, #128	; 0x80
 80011b6:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <HAL_UART_MspInit+0xb0>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <HAL_UART_MspInit+0xb0>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80011c4:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <HAL_UART_MspInit+0xb0>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <HAL_UART_MspInit+0xb0>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80011d0:	480a      	ldr	r0, [pc, #40]	; (80011fc <HAL_UART_MspInit+0xb0>)
 80011d2:	f000 fb39 	bl	8001848 <HAL_DMA_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <HAL_UART_MspInit+0x94>
    {
      Error_Handler();
 80011dc:	f7ff ff2d 	bl	800103a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a06      	ldr	r2, [pc, #24]	; (80011fc <HAL_UART_MspInit+0xb0>)
 80011e4:	675a      	str	r2, [r3, #116]	; 0x74
 80011e6:	4a05      	ldr	r2, [pc, #20]	; (80011fc <HAL_UART_MspInit+0xb0>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80011ec:	bf00      	nop
 80011ee:	3720      	adds	r7, #32
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40008000 	.word	0x40008000
 80011f8:	48000800 	.word	0x48000800
 80011fc:	200005f8 	.word	0x200005f8
 8001200:	40020008 	.word	0x40020008

08001204 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a06      	ldr	r2, [pc, #24]	; (800122c <HAL_RTC_MspInit+0x28>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d105      	bne.n	8001222 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001216:	f7ff ff14 	bl	8001042 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800121a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800121e:	f7ff ff53 	bl	80010c8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40002800 	.word	0x40002800

08001230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <NMI_Handler+0x4>

08001236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <MemManage_Handler+0x4>

08001242 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <UsageFault_Handler+0x4>

0800124e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800127c:	f000 f916 	bl	80014ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}

08001284 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001288:	4802      	ldr	r0, [pc, #8]	; (8001294 <DMA1_Channel1_IRQHandler+0x10>)
 800128a:	f000 fb85 	bl	8001998 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200005f8 	.word	0x200005f8

08001298 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800129c:	f000 fe32 	bl	8001f04 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <IPCC_C1_RX_IRQHandler>:
  * @brief  This function handles IPCC RX occupied global interrupt request.
  * @param  None
  * @retval None
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 80012a8:	f005 fefe 	bl	80070a8 <HW_IPCC_Rx_Handler>
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <IPCC_C1_TX_IRQHandler>:
  * @brief  This function handles IPCC TX free global interrupt request.
  * @param  None
  * @retval None
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
   HW_IPCC_Tx_Handler();
 80012b4:	f005 ff52 	bl	800715c <HW_IPCC_Tx_Handler>
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}

080012bc <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 80012bc:	b40c      	push	{r2, r3}
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	460a      	mov	r2, r1
 80012c8:	71fb      	strb	r3, [r7, #7]
 80012ca:	4613      	mov	r3, r2
 80012cc:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	b002      	add	sp, #8
 80012da:	4770      	bx	lr

080012dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80012e0:	4b26      	ldr	r3, [pc, #152]	; (800137c <SystemInit+0xa0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80012e6:	4b25      	ldr	r3, [pc, #148]	; (800137c <SystemInit+0xa0>)
 80012e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ec:	4a23      	ldr	r2, [pc, #140]	; (800137c <SystemInit+0xa0>)
 80012ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80012f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800130a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800130e:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800131a:	4b19      	ldr	r3, [pc, #100]	; (8001380 <SystemInit+0xa4>)
 800131c:	4013      	ands	r3, r2
 800131e:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001324:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001328:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800132c:	f023 0305 	bic.w	r3, r3, #5
 8001330:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001338:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800133c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001340:	f023 0301 	bic.w	r3, r3, #1
 8001344:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800134c:	4a0d      	ldr	r2, [pc, #52]	; (8001384 <SystemInit+0xa8>)
 800134e:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001354:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <SystemInit+0xa8>)
 8001356:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001366:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000ed00 	.word	0xe000ed00
 8001380:	faf6fefb 	.word	0xfaf6fefb
 8001384:	22041000 	.word	0x22041000

08001388 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001388:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800138a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138c:	3304      	adds	r3, #4

0800138e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800138e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001390:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001392:	d3f9      	bcc.n	8001388 <CopyDataInit>
  bx lr
 8001394:	4770      	bx	lr

08001396 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001396:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001398:	3004      	adds	r0, #4

0800139a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800139a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800139c:	d3fb      	bcc.n	8001396 <FillZerobss>
  bx lr
 800139e:	4770      	bx	lr

080013a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013a0:	480c      	ldr	r0, [pc, #48]	; (80013d4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80013a2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80013a4:	f7ff ff9a 	bl	80012dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80013a8:	480b      	ldr	r0, [pc, #44]	; (80013d8 <LoopForever+0x8>)
 80013aa:	490c      	ldr	r1, [pc, #48]	; (80013dc <LoopForever+0xc>)
 80013ac:	4a0c      	ldr	r2, [pc, #48]	; (80013e0 <LoopForever+0x10>)
 80013ae:	2300      	movs	r3, #0
 80013b0:	f7ff ffed 	bl	800138e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80013b4:	480b      	ldr	r0, [pc, #44]	; (80013e4 <LoopForever+0x14>)
 80013b6:	490c      	ldr	r1, [pc, #48]	; (80013e8 <LoopForever+0x18>)
 80013b8:	2300      	movs	r3, #0
 80013ba:	f7ff ffee 	bl	800139a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80013be:	480b      	ldr	r0, [pc, #44]	; (80013ec <LoopForever+0x1c>)
 80013c0:	490b      	ldr	r1, [pc, #44]	; (80013f0 <LoopForever+0x20>)
 80013c2:	2300      	movs	r3, #0
 80013c4:	f7ff ffe9 	bl	800139a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013c8:	f006 fa5a 	bl	8007880 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80013cc:	f7ff fc5c 	bl	8000c88 <main>

080013d0 <LoopForever>:

LoopForever:
  b LoopForever
 80013d0:	e7fe      	b.n	80013d0 <LoopForever>
 80013d2:	0000      	.short	0x0000
  ldr   r0, =_estack
 80013d4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80013d8:	20000004 	.word	0x20000004
 80013dc:	2000011c 	.word	0x2000011c
 80013e0:	08007d0c 	.word	0x08007d0c
  INIT_BSS _sbss, _ebss
 80013e4:	200001cc 	.word	0x200001cc
 80013e8:	20000698 	.word	0x20000698
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80013ec:	200300e0 	.word	0x200300e0
 80013f0:	20030b57 	.word	0x20030b57

080013f4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC1_IRQHandler>
	...

080013f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <HAL_Init+0x3c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a0b      	ldr	r2, [pc, #44]	; (8001434 <HAL_Init+0x3c>)
 8001408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800140c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800140e:	2003      	movs	r0, #3
 8001410:	f000 f9ba 	bl	8001788 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001414:	2000      	movs	r0, #0
 8001416:	f000 f80f 	bl	8001438 <HAL_InitTick>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d002      	beq.n	8001426 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	71fb      	strb	r3, [r7, #7]
 8001424:	e001      	b.n	800142a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001426:	f7ff fe81 	bl	800112c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800142a:	79fb      	ldrb	r3, [r7, #7]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	58004000 	.word	0x58004000

08001438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001444:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <HAL_InitTick+0x6c>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d024      	beq.n	8001496 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 800144c:	f001 fe48 	bl	80030e0 <HAL_RCC_GetHCLKFreq>
 8001450:	4602      	mov	r2, r0
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <HAL_InitTick+0x6c>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	4619      	mov	r1, r3
 8001458:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001460:	fbb2 f3f3 	udiv	r3, r2, r3
 8001464:	4618      	mov	r0, r3
 8001466:	f000 f9c6 	bl	80017f6 <HAL_SYSTICK_Config>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d10f      	bne.n	8001490 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b0f      	cmp	r3, #15
 8001474:	d809      	bhi.n	800148a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001476:	2200      	movs	r2, #0
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	f04f 30ff 	mov.w	r0, #4294967295
 800147e:	f000 f98e 	bl	800179e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001482:	4a09      	ldr	r2, [pc, #36]	; (80014a8 <HAL_InitTick+0x70>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	e007      	b.n	800149a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	73fb      	strb	r3, [r7, #15]
 800148e:	e004      	b.n	800149a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	73fb      	strb	r3, [r7, #15]
 8001494:	e001      	b.n	800149a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800149a:	7bfb      	ldrb	r3, [r7, #15]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	2000000c 	.word	0x2000000c
 80014a8:	20000008 	.word	0x20000008

080014ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_IncTick+0x20>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_IncTick+0x24>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <HAL_IncTick+0x24>)
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	2000000c 	.word	0x2000000c
 80014d0:	20000658 	.word	0x20000658

080014d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return uwTick;
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <HAL_GetTick+0x14>)
 80014da:	681b      	ldr	r3, [r3, #0]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000658 	.word	0x20000658

080014ec <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <HAL_GetTickPrio+0x14>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000008 	.word	0x20000008

08001504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 800150c:	f7ff ffe2 	bl	80014d4 <HAL_GetTick>
 8001510:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151c:	d005      	beq.n	800152a <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_Delay+0x40>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800152a:	bf00      	nop
 800152c:	f7ff ffd2 	bl	80014d4 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	429a      	cmp	r2, r3
 800153a:	d8f7      	bhi.n	800152c <HAL_Delay+0x28>
    {
    }
  }
 800153c:	bf00      	nop
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	2000000c 	.word	0x2000000c

08001548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <__NVIC_SetPriorityGrouping+0x44>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001564:	4013      	ands	r3, r2
 8001566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001570:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157a:	4a04      	ldr	r2, [pc, #16]	; (800158c <__NVIC_SetPriorityGrouping+0x44>)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	60d3      	str	r3, [r2, #12]
}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	0a1b      	lsrs	r3, r3, #8
 800159a:	f003 0307 	and.w	r3, r3, #7
}
 800159e:	4618      	mov	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	db0b      	blt.n	80015d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	f003 021f 	and.w	r2, r3, #31
 80015c4:	4907      	ldr	r1, [pc, #28]	; (80015e4 <__NVIC_EnableIRQ+0x38>)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	095b      	lsrs	r3, r3, #5
 80015cc:	2001      	movs	r0, #1
 80015ce:	fa00 f202 	lsl.w	r2, r0, r2
 80015d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000e100 	.word	0xe000e100

080015e8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	db0c      	blt.n	8001614 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	f003 021f 	and.w	r2, r3, #31
 8001600:	4907      	ldr	r1, [pc, #28]	; (8001620 <__NVIC_SetPendingIRQ+0x38>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	095b      	lsrs	r3, r3, #5
 8001608:	2001      	movs	r0, #1
 800160a:	fa00 f202 	lsl.w	r2, r0, r2
 800160e:	3340      	adds	r3, #64	; 0x40
 8001610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000e100 	.word	0xe000e100

08001624 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	2b00      	cmp	r3, #0
 8001634:	db0c      	blt.n	8001650 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	f003 021f 	and.w	r2, r3, #31
 800163c:	4907      	ldr	r1, [pc, #28]	; (800165c <__NVIC_ClearPendingIRQ+0x38>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	095b      	lsrs	r3, r3, #5
 8001644:	2001      	movs	r0, #1
 8001646:	fa00 f202 	lsl.w	r2, r0, r2
 800164a:	3360      	adds	r3, #96	; 0x60
 800164c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000e100 	.word	0xe000e100

08001660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	6039      	str	r1, [r7, #0]
 800166a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	2b00      	cmp	r3, #0
 8001672:	db0a      	blt.n	800168a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	b2da      	uxtb	r2, r3
 8001678:	490c      	ldr	r1, [pc, #48]	; (80016ac <__NVIC_SetPriority+0x4c>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	0112      	lsls	r2, r2, #4
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	440b      	add	r3, r1
 8001684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001688:	e00a      	b.n	80016a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4908      	ldr	r1, [pc, #32]	; (80016b0 <__NVIC_SetPriority+0x50>)
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	3b04      	subs	r3, #4
 8001698:	0112      	lsls	r2, r2, #4
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	440b      	add	r3, r1
 800169e:	761a      	strb	r2, [r3, #24]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000e100 	.word	0xe000e100
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b089      	sub	sp, #36	; 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f1c3 0307 	rsb	r3, r3, #7
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	bf28      	it	cs
 80016d2:	2304      	movcs	r3, #4
 80016d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3304      	adds	r3, #4
 80016da:	2b06      	cmp	r3, #6
 80016dc:	d902      	bls.n	80016e4 <NVIC_EncodePriority+0x30>
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3b03      	subs	r3, #3
 80016e2:	e000      	b.n	80016e6 <NVIC_EncodePriority+0x32>
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43da      	mvns	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	401a      	ands	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	43d9      	mvns	r1, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	4313      	orrs	r3, r2
         );
}
 800170e:	4618      	mov	r0, r3
 8001710:	3724      	adds	r7, #36	; 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001720:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <__NVIC_SystemReset+0x20>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800172c:	4903      	ldr	r1, [pc, #12]	; (800173c <__NVIC_SystemReset+0x20>)
 800172e:	4b04      	ldr	r3, [pc, #16]	; (8001740 <__NVIC_SystemReset+0x24>)
 8001730:	4313      	orrs	r3, r2
 8001732:	60cb      	str	r3, [r1, #12]
 8001734:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <__NVIC_SystemReset+0x1c>
 800173c:	e000ed00 	.word	0xe000ed00
 8001740:	05fa0004 	.word	0x05fa0004

08001744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3b01      	subs	r3, #1
 8001750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001754:	d301      	bcc.n	800175a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001756:	2301      	movs	r3, #1
 8001758:	e00f      	b.n	800177a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800175a:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <SysTick_Config+0x40>)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3b01      	subs	r3, #1
 8001760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001762:	210f      	movs	r1, #15
 8001764:	f04f 30ff 	mov.w	r0, #4294967295
 8001768:	f7ff ff7a 	bl	8001660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800176c:	4b05      	ldr	r3, [pc, #20]	; (8001784 <SysTick_Config+0x40>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001772:	4b04      	ldr	r3, [pc, #16]	; (8001784 <SysTick_Config+0x40>)
 8001774:	2207      	movs	r2, #7
 8001776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	e000e010 	.word	0xe000e010

08001788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff fed9 	bl	8001548 <__NVIC_SetPriorityGrouping>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	4603      	mov	r3, r0
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
 80017aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017ac:	f7ff fef0 	bl	8001590 <__NVIC_GetPriorityGrouping>
 80017b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	68b9      	ldr	r1, [r7, #8]
 80017b6:	6978      	ldr	r0, [r7, #20]
 80017b8:	f7ff ff7c 	bl	80016b4 <NVIC_EncodePriority>
 80017bc:	4602      	mov	r2, r0
 80017be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c2:	4611      	mov	r1, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff4b 	bl	8001660 <__NVIC_SetPriority>
}
 80017ca:	bf00      	nop
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	4603      	mov	r3, r0
 80017da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fee3 	bl	80015ac <__NVIC_EnableIRQ>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80017f2:	f7ff ff93 	bl	800171c <__NVIC_SystemReset>

080017f6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff ffa0 	bl	8001744 <SysTick_Config>
 8001804:	4603      	mov	r3, r0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fee3 	bl	80015e8 <__NVIC_SetPendingIRQ>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fef3 	bl	8001624 <__NVIC_ClearPendingIRQ>
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e08e      	b.n	8001978 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	461a      	mov	r2, r3
 8001860:	4b47      	ldr	r3, [pc, #284]	; (8001980 <HAL_DMA_Init+0x138>)
 8001862:	429a      	cmp	r2, r3
 8001864:	d80f      	bhi.n	8001886 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	4b45      	ldr	r3, [pc, #276]	; (8001984 <HAL_DMA_Init+0x13c>)
 800186e:	4413      	add	r3, r2
 8001870:	4a45      	ldr	r2, [pc, #276]	; (8001988 <HAL_DMA_Init+0x140>)
 8001872:	fba2 2303 	umull	r2, r3, r2, r3
 8001876:	091b      	lsrs	r3, r3, #4
 8001878:	009a      	lsls	r2, r3, #2
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a42      	ldr	r2, [pc, #264]	; (800198c <HAL_DMA_Init+0x144>)
 8001882:	641a      	str	r2, [r3, #64]	; 0x40
 8001884:	e00e      	b.n	80018a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	4b40      	ldr	r3, [pc, #256]	; (8001990 <HAL_DMA_Init+0x148>)
 800188e:	4413      	add	r3, r2
 8001890:	4a3d      	ldr	r2, [pc, #244]	; (8001988 <HAL_DMA_Init+0x140>)
 8001892:	fba2 2303 	umull	r2, r3, r2, r3
 8001896:	091b      	lsrs	r3, r3, #4
 8001898:	009a      	lsls	r2, r3, #2
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a3c      	ldr	r2, [pc, #240]	; (8001994 <HAL_DMA_Init+0x14c>)
 80018a2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2202      	movs	r2, #2
 80018a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80018ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80018c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 f8fe 	bl	8001af8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001904:	d102      	bne.n	800190c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001914:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001918:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001922:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d010      	beq.n	800194e <HAL_DMA_Init+0x106>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b04      	cmp	r3, #4
 8001932:	d80c      	bhi.n	800194e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 f91d 	bl	8001b74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	e008      	b.n	8001960 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40020407 	.word	0x40020407
 8001984:	bffdfff8 	.word	0xbffdfff8
 8001988:	cccccccd 	.word	0xcccccccd
 800198c:	40020000 	.word	0x40020000
 8001990:	bffdfbf8 	.word	0xbffdfbf8
 8001994:	40020400 	.word	0x40020400

08001998 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b4:	f003 031c 	and.w	r3, r3, #28
 80019b8:	2204      	movs	r2, #4
 80019ba:	409a      	lsls	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4013      	ands	r3, r2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d026      	beq.n	8001a12 <HAL_DMA_IRQHandler+0x7a>
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d021      	beq.n	8001a12 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0320 	and.w	r3, r3, #32
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d107      	bne.n	80019ec <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0204 	bic.w	r2, r2, #4
 80019ea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f0:	f003 021c 	and.w	r2, r3, #28
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	2104      	movs	r1, #4
 80019fa:	fa01 f202 	lsl.w	r2, r1, r2
 80019fe:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d071      	beq.n	8001aec <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001a10:	e06c      	b.n	8001aec <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	f003 031c 	and.w	r3, r3, #28
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	409a      	lsls	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d02e      	beq.n	8001a84 <HAL_DMA_IRQHandler+0xec>
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d029      	beq.n	8001a84 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0320 	and.w	r3, r3, #32
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10b      	bne.n	8001a56 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 020a 	bic.w	r2, r2, #10
 8001a4c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f003 021c 	and.w	r2, r3, #28
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	2102      	movs	r1, #2
 8001a64:	fa01 f202 	lsl.w	r2, r1, r2
 8001a68:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d038      	beq.n	8001aec <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001a82:	e033      	b.n	8001aec <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a88:	f003 031c 	and.w	r3, r3, #28
 8001a8c:	2208      	movs	r2, #8
 8001a8e:	409a      	lsls	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4013      	ands	r3, r2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d02a      	beq.n	8001aee <HAL_DMA_IRQHandler+0x156>
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d025      	beq.n	8001aee <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 020e 	bic.w	r2, r2, #14
 8001ab0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	f003 021c 	and.w	r2, r3, #28
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	2101      	movs	r1, #1
 8001ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d004      	beq.n	8001aee <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
}
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d80a      	bhi.n	8001b22 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b10:	089b      	lsrs	r3, r3, #2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b18:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6493      	str	r3, [r2, #72]	; 0x48
 8001b20:	e007      	b.n	8001b32 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	089b      	lsrs	r3, r3, #2
 8001b28:	009a      	lsls	r2, r3, #2
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001b2c:	4413      	add	r3, r2
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	3b08      	subs	r3, #8
 8001b3a:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001b48:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f003 031f 	and.w	r3, r3, #31
 8001b50:	2201      	movs	r2, #1
 8001b52:	409a      	lsls	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001b58:	bf00      	nop
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	40020407 	.word	0x40020407
 8001b68:	4002081c 	.word	0x4002081c
 8001b6c:	cccccccd 	.word	0xcccccccd
 8001b70:	40020880 	.word	0x40020880

08001b74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b84:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001b8a:	4413      	add	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	461a      	mov	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a09      	ldr	r2, [pc, #36]	; (8001bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8001b98:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	409a      	lsls	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	1000823f 	.word	0x1000823f
 8001bbc:	40020940 	.word	0x40020940

08001bc0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b087      	sub	sp, #28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bce:	e14c      	b.n	8001e6a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bdc:	4013      	ands	r3, r2
 8001bde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 813e 	beq.w	8001e64 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d00b      	beq.n	8001c08 <HAL_GPIO_Init+0x48>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d007      	beq.n	8001c08 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bfc:	2b11      	cmp	r3, #17
 8001bfe:	d003      	beq.n	8001c08 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b12      	cmp	r3, #18
 8001c06:	d130      	bne.n	8001c6a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	2203      	movs	r2, #3
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c3e:	2201      	movs	r2, #1
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	091b      	lsrs	r3, r3, #4
 8001c54:	f003 0201 	and.w	r2, r3, #1
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	2203      	movs	r2, #3
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_Init+0xea>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b12      	cmp	r3, #18
 8001ca8:	d123      	bne.n	8001cf2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	08da      	lsrs	r2, r3, #3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3208      	adds	r2, #8
 8001cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	220f      	movs	r2, #15
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	691a      	ldr	r2, [r3, #16]
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	08da      	lsrs	r2, r3, #3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3208      	adds	r2, #8
 8001cec:	6939      	ldr	r1, [r7, #16]
 8001cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4013      	ands	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 0203 	and.w	r2, r3, #3
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 8098 	beq.w	8001e64 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001d34:	4a54      	ldr	r2, [pc, #336]	; (8001e88 <HAL_GPIO_Init+0x2c8>)
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	089b      	lsrs	r3, r3, #2
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	220f      	movs	r2, #15
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d5e:	d019      	beq.n	8001d94 <HAL_GPIO_Init+0x1d4>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a4a      	ldr	r2, [pc, #296]	; (8001e8c <HAL_GPIO_Init+0x2cc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d013      	beq.n	8001d90 <HAL_GPIO_Init+0x1d0>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a49      	ldr	r2, [pc, #292]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d00d      	beq.n	8001d8c <HAL_GPIO_Init+0x1cc>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a48      	ldr	r2, [pc, #288]	; (8001e94 <HAL_GPIO_Init+0x2d4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d007      	beq.n	8001d88 <HAL_GPIO_Init+0x1c8>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a47      	ldr	r2, [pc, #284]	; (8001e98 <HAL_GPIO_Init+0x2d8>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d101      	bne.n	8001d84 <HAL_GPIO_Init+0x1c4>
 8001d80:	2304      	movs	r3, #4
 8001d82:	e008      	b.n	8001d96 <HAL_GPIO_Init+0x1d6>
 8001d84:	2307      	movs	r3, #7
 8001d86:	e006      	b.n	8001d96 <HAL_GPIO_Init+0x1d6>
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e004      	b.n	8001d96 <HAL_GPIO_Init+0x1d6>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e002      	b.n	8001d96 <HAL_GPIO_Init+0x1d6>
 8001d90:	2301      	movs	r3, #1
 8001d92:	e000      	b.n	8001d96 <HAL_GPIO_Init+0x1d6>
 8001d94:	2300      	movs	r3, #0
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	f002 0203 	and.w	r2, r2, #3
 8001d9c:	0092      	lsls	r2, r2, #2
 8001d9e:	4093      	lsls	r3, r2
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001da6:	4938      	ldr	r1, [pc, #224]	; (8001e88 <HAL_GPIO_Init+0x2c8>)
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	089b      	lsrs	r3, r3, #2
 8001dac:	3302      	adds	r3, #2
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001db4:	4b39      	ldr	r3, [pc, #228]	; (8001e9c <HAL_GPIO_Init+0x2dc>)
 8001db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dda:	4a30      	ldr	r2, [pc, #192]	; (8001e9c <HAL_GPIO_Init+0x2dc>)
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001de2:	4b2e      	ldr	r3, [pc, #184]	; (8001e9c <HAL_GPIO_Init+0x2dc>)
 8001de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e08:	4a24      	ldr	r2, [pc, #144]	; (8001e9c <HAL_GPIO_Init+0x2dc>)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e10:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <HAL_GPIO_Init+0x2dc>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e34:	4a19      	ldr	r2, [pc, #100]	; (8001e9c <HAL_GPIO_Init+0x2dc>)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e3a:	4b18      	ldr	r3, [pc, #96]	; (8001e9c <HAL_GPIO_Init+0x2dc>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	4013      	ands	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e5e:	4a0f      	ldr	r2, [pc, #60]	; (8001e9c <HAL_GPIO_Init+0x2dc>)
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	3301      	adds	r3, #1
 8001e68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	fa22 f303 	lsr.w	r3, r2, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f47f aeab 	bne.w	8001bd0 <HAL_GPIO_Init+0x10>
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	371c      	adds	r7, #28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40010000 	.word	0x40010000
 8001e8c:	48000400 	.word	0x48000400
 8001e90:	48000800 	.word	0x48000800
 8001e94:	48000c00 	.word	0x48000c00
 8001e98:	48001000 	.word	0x48001000
 8001e9c:	58000800 	.word	0x58000800

08001ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	807b      	strh	r3, [r7, #2]
 8001eac:	4613      	mov	r3, r2
 8001eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eb0:	787b      	ldrb	r3, [r7, #1]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eb6:	887a      	ldrh	r2, [r7, #2]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ebc:	e002      	b.n	8001ec4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ebe:	887a      	ldrh	r2, [r7, #2]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ee2:	887a      	ldrh	r2, [r7, #2]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	041a      	lsls	r2, r3, #16
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	43d9      	mvns	r1, r3
 8001eee:	887b      	ldrh	r3, [r7, #2]
 8001ef0:	400b      	ands	r3, r1
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	619a      	str	r2, [r3, #24]
}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_HSEM_IRQHandler+0x30>)
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <HAL_HSEM_IRQHandler+0x30>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	4906      	ldr	r1, [pc, #24]	; (8001f34 <HAL_HSEM_IRQHandler+0x30>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001f1e:	4a05      	ldr	r2, [pc, #20]	; (8001f34 <HAL_HSEM_IRQHandler+0x30>)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f807 	bl	8001f38 <HAL_HSEM_FreeCallback>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	58001500 	.word	0x58001500

08001f38 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5a:	6013      	str	r3, [r2, #0]
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	58000400 	.word	0x58000400

08001f6c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	58000400 	.word	0x58000400

08001f88 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f9a:	d101      	bne.n	8001fa0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_RCC_HSE_Enable>:
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fbe:	6013      	str	r3, [r2, #0]
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <LL_RCC_HSE_Disable>:
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fdc:	6013      	str	r3, [r2, #0]
}
 8001fde:	bf00      	nop
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <LL_RCC_HSE_IsReady>:
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ffa:	d101      	bne.n	8002000 <LL_RCC_HSE_IsReady+0x18>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <LL_RCC_HSE_IsReady+0x1a>
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <LL_RCC_HSI_Enable>:
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800201a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201e:	6013      	str	r3, [r2, #0]
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <LL_RCC_HSI_Disable>:
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800202e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800203c:	6013      	str	r3, [r2, #0]
}
 800203e:	bf00      	nop
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LL_RCC_HSI_IsReady>:
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800204c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800205a:	d101      	bne.n	8002060 <LL_RCC_HSI_IsReady+0x18>
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <LL_RCC_HSI_IsReady+0x1a>
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_RCC_HSI_SetCalibTrimming>:
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	061b      	lsls	r3, r3, #24
 8002082:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002086:	4313      	orrs	r3, r2
 8002088:	604b      	str	r3, [r1, #4]
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <LL_RCC_HSI48_Enable>:
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800209a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800209e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80020ae:	bf00      	nop
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_RCC_HSI48_Disable>:
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80020bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020c8:	f023 0301 	bic.w	r3, r3, #1
 80020cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <LL_RCC_HSI48_IsReady>:
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80020de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d101      	bne.n	80020f2 <LL_RCC_HSI48_IsReady+0x18>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <LL_RCC_HSI48_IsReady+0x1a>
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <LL_RCC_LSE_Enable>:
{
 80020fe:	b480      	push	{r7}
 8002100:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002116:	bf00      	nop
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_RCC_LSE_Disable>:
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002130:	f023 0301 	bic.w	r3, r3, #1
 8002134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <LL_RCC_LSE_EnableBypass>:
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002152:	f043 0304 	orr.w	r3, r3, #4
 8002156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <LL_RCC_LSE_DisableBypass>:
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002170:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002174:	f023 0304 	bic.w	r3, r3, #4
 8002178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <LL_RCC_LSE_IsReady>:
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800218a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b02      	cmp	r3, #2
 8002198:	d101      	bne.n	800219e <LL_RCC_LSE_IsReady+0x18>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <LL_RCC_LSE_IsReady+0x1a>
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <LL_RCC_LSI1_Enable>:
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80021ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <LL_RCC_LSI1_Disable>:
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80021d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021dc:	f023 0301 	bic.w	r3, r3, #1
 80021e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <LL_RCC_LSI1_IsReady>:
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80021f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d101      	bne.n	8002206 <LL_RCC_LSI1_IsReady+0x18>
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <LL_RCC_LSI1_IsReady+0x1a>
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <LL_RCC_LSI2_Enable>:
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800221a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800221e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002222:	f043 0304 	orr.w	r3, r3, #4
 8002226:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800222a:	bf00      	nop
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <LL_RCC_LSI2_Disable>:
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002240:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002244:	f023 0304 	bic.w	r3, r3, #4
 8002248:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <LL_RCC_LSI2_IsReady>:
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800225a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b08      	cmp	r3, #8
 8002268:	d101      	bne.n	800226e <LL_RCC_LSI2_IsReady+0x18>
 800226a:	2301      	movs	r3, #1
 800226c:	e000      	b.n	8002270 <LL_RCC_LSI2_IsReady+0x1a>
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <LL_RCC_LSI2_SetTrimming>:
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002286:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800228a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	021b      	lsls	r3, r3, #8
 8002292:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <LL_RCC_MSI_Enable>:
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80022ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	6013      	str	r3, [r2, #0]
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <LL_RCC_MSI_Disable>:
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80022ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022d4:	f023 0301 	bic.w	r3, r3, #1
 80022d8:	6013      	str	r3, [r2, #0]
}
 80022da:	bf00      	nop
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <LL_RCC_MSI_IsReady>:
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80022e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d101      	bne.n	80022fa <LL_RCC_MSI_IsReady+0x16>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <LL_RCC_MSI_IsReady+0x18>
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <LL_RCC_MSI_SetRange>:
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800230e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002318:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4313      	orrs	r3, r2
 8002320:	600b      	str	r3, [r1, #0]
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <LL_RCC_MSI_GetRange>:
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800233e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2bb0      	cmp	r3, #176	; 0xb0
 8002344:	d901      	bls.n	800234a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002346:	23b0      	movs	r3, #176	; 0xb0
 8002348:	607b      	str	r3, [r7, #4]
  return msiRange;
 800234a:	687b      	ldr	r3, [r7, #4]
}
 800234c:	4618      	mov	r0, r3
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	021b      	lsls	r3, r3, #8
 800236e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002372:	4313      	orrs	r3, r2
 8002374:	604b      	str	r3, [r1, #4]
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <LL_RCC_SetSysClkSource>:
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800238a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f023 0203 	bic.w	r2, r3, #3
 8002394:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4313      	orrs	r3, r2
 800239c:	608b      	str	r3, [r1, #8]
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <LL_RCC_GetSysClkSource>:
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80023ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 030c 	and.w	r3, r3, #12
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <LL_RCC_SetAHBPrescaler>:
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80023ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4313      	orrs	r3, r2
 80023dc:	608b      	str	r3, [r1, #8]
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <LL_C2_RCC_SetAHBPrescaler>:
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80023f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80023fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <LL_RCC_SetAHB4Prescaler>:
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800241e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002422:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002426:	f023 020f 	bic.w	r2, r3, #15
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	091b      	lsrs	r3, r3, #4
 800242e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002432:	4313      	orrs	r3, r2
 8002434:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <LL_RCC_SetAPB1Prescaler>:
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800244c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002456:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4313      	orrs	r3, r2
 800245e:	608b      	str	r3, [r1, #8]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <LL_RCC_SetAPB2Prescaler>:
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800247e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4313      	orrs	r3, r2
 8002486:	608b      	str	r3, [r1, #8]
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <LL_RCC_GetAHBPrescaler>:
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_RCC_GetAHB4Prescaler>:
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80024b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <LL_RCC_GetAPB1Prescaler>:
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80024cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <LL_RCC_GetAPB2Prescaler>:
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80024e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <LL_RCC_PLL_Enable>:
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80024fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800250a:	6013      	str	r3, [r2, #0]
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <LL_RCC_PLL_Disable>:
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800251a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002524:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002528:	6013      	str	r3, [r2, #0]
}
 800252a:	bf00      	nop
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_RCC_PLL_IsReady>:
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002542:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002546:	d101      	bne.n	800254c <LL_RCC_PLL_IsReady+0x18>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <LL_RCC_PLL_IsReady+0x1a>
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_RCC_PLL_GetN>:
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800255c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002568:	4618      	mov	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <LL_RCC_PLL_GetR>:
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002580:	4618      	mov	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <LL_RCC_PLL_GetDivider>:
{
 800258a:	b480      	push	{r7}
 800258c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800258e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002598:	4618      	mov	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <LL_RCC_PLL_GetMainSource>:
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80025a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0303 	and.w	r3, r3, #3
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <LL_RCC_IsActiveFlag_HPRE>:
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80025be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025cc:	d101      	bne.n	80025d2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80025e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80025ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025f2:	d101      	bne.n	80025f8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800260c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002618:	d101      	bne.n	800261e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <LL_RCC_IsActiveFlag_PPRE1>:
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800262e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002638:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800263c:	d101      	bne.n	8002642 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800263e:	2301      	movs	r3, #1
 8002640:	e000      	b.n	8002644 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <LL_RCC_IsActiveFlag_PPRE2>:
{
 800264e:	b480      	push	{r7}
 8002650:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800265c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002660:	d101      	bne.n	8002666 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
	...

08002674 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002674:	b590      	push	{r4, r7, lr}
 8002676:	b08d      	sub	sp, #52	; 0x34
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e37e      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0320 	and.w	r3, r3, #32
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 8092 	beq.w	80027b8 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002694:	f7ff fe89 	bl	80023aa <LL_RCC_GetSysClkSource>
 8002698:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800269a:	f7ff ff82 	bl	80025a2 <LL_RCC_PLL_GetMainSource>
 800269e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80026a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <HAL_RCC_OscConfig+0x3e>
 80026a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a8:	2b0c      	cmp	r3, #12
 80026aa:	d14c      	bne.n	8002746 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80026ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d149      	bne.n	8002746 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026b2:	f7ff fe17 	bl	80022e4 <LL_RCC_MSI_IsReady>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_OscConfig+0x54>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e35d      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80026cc:	f7ff fe2f 	bl	800232e <LL_RCC_MSI_GetRange>
 80026d0:	4603      	mov	r3, r0
 80026d2:	429c      	cmp	r4, r3
 80026d4:	d914      	bls.n	8002700 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fd40 	bl	8003160 <RCC_SetFlashLatencyFromMSIRange>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e34c      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fe09 	bl	8002306 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fe2d 	bl	8002358 <LL_RCC_MSI_SetCalibTrimming>
 80026fe:	e013      	b.n	8002728 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff fdfe 	bl	8002306 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff fe22 	bl	8002358 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fd21 	bl	8003160 <RCC_SetFlashLatencyFromMSIRange>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e32d      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002728:	f000 fcda 	bl	80030e0 <HAL_RCC_GetHCLKFreq>
 800272c:	4602      	mov	r2, r0
 800272e:	4bb3      	ldr	r3, [pc, #716]	; (80029fc <HAL_RCC_OscConfig+0x388>)
 8002730:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002732:	4bb3      	ldr	r3, [pc, #716]	; (8002a00 <HAL_RCC_OscConfig+0x38c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f7fe fe7e 	bl	8001438 <HAL_InitTick>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d039      	beq.n	80027b6 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e31e      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d01e      	beq.n	800278c <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800274e:	f7ff fdab 	bl	80022a8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002752:	f7fe febf 	bl	80014d4 <HAL_GetTick>
 8002756:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800275a:	f7fe febb 	bl	80014d4 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e30b      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 800276c:	f7ff fdba 	bl	80022e4 <LL_RCC_MSI_IsReady>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f1      	beq.n	800275a <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fdc3 	bl	8002306 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fde7 	bl	8002358 <LL_RCC_MSI_SetCalibTrimming>
 800278a:	e015      	b.n	80027b8 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800278c:	f7ff fd9b 	bl	80022c6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002790:	f7fe fea0 	bl	80014d4 <HAL_GetTick>
 8002794:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002798:	f7fe fe9c 	bl	80014d4 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e2ec      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 80027aa:	f7ff fd9b 	bl	80022e4 <LL_RCC_MSI_IsReady>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f1      	bne.n	8002798 <HAL_RCC_OscConfig+0x124>
 80027b4:	e000      	b.n	80027b8 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d04e      	beq.n	8002862 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027c4:	f7ff fdf1 	bl	80023aa <LL_RCC_GetSysClkSource>
 80027c8:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027ca:	f7ff feea 	bl	80025a2 <LL_RCC_PLL_GetMainSource>
 80027ce:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80027d0:	6a3b      	ldr	r3, [r7, #32]
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d005      	beq.n	80027e2 <HAL_RCC_OscConfig+0x16e>
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	2b0c      	cmp	r3, #12
 80027da:	d10d      	bne.n	80027f8 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d10a      	bne.n	80027f8 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e2:	f7ff fc01 	bl	8001fe8 <LL_RCC_HSE_IsReady>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d039      	beq.n	8002860 <HAL_RCC_OscConfig+0x1ec>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d135      	bne.n	8002860 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e2c5      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002800:	d102      	bne.n	8002808 <HAL_RCC_OscConfig+0x194>
 8002802:	f7ff fbd3 	bl	8001fac <LL_RCC_HSE_Enable>
 8002806:	e001      	b.n	800280c <HAL_RCC_OscConfig+0x198>
 8002808:	f7ff fbdf 	bl	8001fca <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d012      	beq.n	800283a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7fe fe5e 	bl	80014d4 <HAL_GetTick>
 8002818:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800281c:	f7fe fe5a 	bl	80014d4 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b64      	cmp	r3, #100	; 0x64
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e2aa      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 800282e:	f7ff fbdb 	bl	8001fe8 <LL_RCC_HSE_IsReady>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0f1      	beq.n	800281c <HAL_RCC_OscConfig+0x1a8>
 8002838:	e013      	b.n	8002862 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283a:	f7fe fe4b 	bl	80014d4 <HAL_GetTick>
 800283e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002842:	f7fe fe47 	bl	80014d4 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b64      	cmp	r3, #100	; 0x64
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e297      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002854:	f7ff fbc8 	bl	8001fe8 <LL_RCC_HSE_IsReady>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f1      	bne.n	8002842 <HAL_RCC_OscConfig+0x1ce>
 800285e:	e000      	b.n	8002862 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d051      	beq.n	8002912 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800286e:	f7ff fd9c 	bl	80023aa <LL_RCC_GetSysClkSource>
 8002872:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002874:	f7ff fe95 	bl	80025a2 <LL_RCC_PLL_GetMainSource>
 8002878:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	2b04      	cmp	r3, #4
 800287e:	d005      	beq.n	800288c <HAL_RCC_OscConfig+0x218>
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	2b0c      	cmp	r3, #12
 8002884:	d113      	bne.n	80028ae <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d110      	bne.n	80028ae <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800288c:	f7ff fbdc 	bl	8002048 <LL_RCC_HSI_IsReady>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d005      	beq.n	80028a2 <HAL_RCC_OscConfig+0x22e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e270      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fbe0 	bl	800206c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028ac:	e031      	b.n	8002912 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d019      	beq.n	80028ea <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028b6:	f7ff fba9 	bl	800200c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ba:	f7fe fe0b 	bl	80014d4 <HAL_GetTick>
 80028be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c2:	f7fe fe07 	bl	80014d4 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e257      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80028d4:	f7ff fbb8 	bl	8002048 <LL_RCC_HSI_IsReady>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f1      	beq.n	80028c2 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff fbc2 	bl	800206c <LL_RCC_HSI_SetCalibTrimming>
 80028e8:	e013      	b.n	8002912 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ea:	f7ff fb9e 	bl	800202a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ee:	f7fe fdf1 	bl	80014d4 <HAL_GetTick>
 80028f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f6:	f7fe fded 	bl	80014d4 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e23d      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002908:	f7ff fb9e 	bl	8002048 <LL_RCC_HSI_IsReady>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f1      	bne.n	80028f6 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 80a3 	beq.w	8002a72 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d076      	beq.n	8002a22 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	2b00      	cmp	r3, #0
 800293e:	d046      	beq.n	80029ce <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002940:	f7ff fc55 	bl	80021ee <LL_RCC_LSI1_IsReady>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d113      	bne.n	8002972 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800294a:	f7ff fc2e 	bl	80021aa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800294e:	f7fe fdc1 	bl	80014d4 <HAL_GetTick>
 8002952:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002956:	f7fe fdbd 	bl	80014d4 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e20d      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002968:	f7ff fc41 	bl	80021ee <LL_RCC_LSI1_IsReady>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f1      	beq.n	8002956 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002972:	f7ff fc4e 	bl	8002212 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002976:	f7fe fdad 	bl	80014d4 <HAL_GetTick>
 800297a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800297e:	f7fe fda9 	bl	80014d4 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b03      	cmp	r3, #3
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e1f9      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002990:	f7ff fc61 	bl	8002256 <LL_RCC_LSI2_IsReady>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f1      	beq.n	800297e <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fc6b 	bl	800227a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80029a4:	f7ff fc12 	bl	80021cc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7fe fd94 	bl	80014d4 <HAL_GetTick>
 80029ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80029b0:	f7fe fd90 	bl	80014d4 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e1e0      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80029c2:	f7ff fc14 	bl	80021ee <LL_RCC_LSI1_IsReady>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1f1      	bne.n	80029b0 <HAL_RCC_OscConfig+0x33c>
 80029cc:	e051      	b.n	8002a72 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80029ce:	f7ff fbec 	bl	80021aa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d2:	f7fe fd7f 	bl	80014d4 <HAL_GetTick>
 80029d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80029da:	f7fe fd7b 	bl	80014d4 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e1cb      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80029ec:	f7ff fbff 	bl	80021ee <LL_RCC_LSI1_IsReady>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f1      	beq.n	80029da <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80029f6:	f7ff fc1d 	bl	8002234 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80029fa:	e00c      	b.n	8002a16 <HAL_RCC_OscConfig+0x3a2>
 80029fc:	20000004 	.word	0x20000004
 8002a00:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002a04:	f7fe fd66 	bl	80014d4 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e1b6      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002a16:	f7ff fc1e 	bl	8002256 <LL_RCC_LSI2_IsReady>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1f1      	bne.n	8002a04 <HAL_RCC_OscConfig+0x390>
 8002a20:	e027      	b.n	8002a72 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002a22:	f7ff fc07 	bl	8002234 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a26:	f7fe fd55 	bl	80014d4 <HAL_GetTick>
 8002a2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002a2e:	f7fe fd51 	bl	80014d4 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e1a1      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002a40:	f7ff fc09 	bl	8002256 <LL_RCC_LSI2_IsReady>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f1      	bne.n	8002a2e <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002a4a:	f7ff fbbf 	bl	80021cc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4e:	f7fe fd41 	bl	80014d4 <HAL_GetTick>
 8002a52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002a56:	f7fe fd3d 	bl	80014d4 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e18d      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002a68:	f7ff fbc1 	bl	80021ee <LL_RCC_LSI1_IsReady>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f1      	bne.n	8002a56 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d05b      	beq.n	8002b36 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a7e:	4bb5      	ldr	r3, [pc, #724]	; (8002d54 <HAL_RCC_OscConfig+0x6e0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d114      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002a8a:	f7ff fa5f 	bl	8001f4c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a8e:	f7fe fd21 	bl	80014d4 <HAL_GetTick>
 8002a92:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a96:	f7fe fd1d 	bl	80014d4 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e16d      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aa8:	4baa      	ldr	r3, [pc, #680]	; (8002d54 <HAL_RCC_OscConfig+0x6e0>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0f0      	beq.n	8002a96 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d102      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x44e>
 8002abc:	f7ff fb1f 	bl	80020fe <LL_RCC_LSE_Enable>
 8002ac0:	e00c      	b.n	8002adc <HAL_RCC_OscConfig+0x468>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2b05      	cmp	r3, #5
 8002ac8:	d104      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x460>
 8002aca:	f7ff fb3a 	bl	8002142 <LL_RCC_LSE_EnableBypass>
 8002ace:	f7ff fb16 	bl	80020fe <LL_RCC_LSE_Enable>
 8002ad2:	e003      	b.n	8002adc <HAL_RCC_OscConfig+0x468>
 8002ad4:	f7ff fb24 	bl	8002120 <LL_RCC_LSE_Disable>
 8002ad8:	f7ff fb44 	bl	8002164 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d014      	beq.n	8002b0e <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae4:	f7fe fcf6 	bl	80014d4 <HAL_GetTick>
 8002ae8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002aea:	e00a      	b.n	8002b02 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aec:	f7fe fcf2 	bl	80014d4 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e140      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002b02:	f7ff fb40 	bl	8002186 <LL_RCC_LSE_IsReady>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0ef      	beq.n	8002aec <HAL_RCC_OscConfig+0x478>
 8002b0c:	e013      	b.n	8002b36 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0e:	f7fe fce1 	bl	80014d4 <HAL_GetTick>
 8002b12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002b14:	e00a      	b.n	8002b2c <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b16:	f7fe fcdd 	bl	80014d4 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e12b      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002b2c:	f7ff fb2b 	bl	8002186 <LL_RCC_LSE_IsReady>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1ef      	bne.n	8002b16 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d02c      	beq.n	8002b9c <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d014      	beq.n	8002b74 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b4a:	f7ff faa4 	bl	8002096 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4e:	f7fe fcc1 	bl	80014d4 <HAL_GetTick>
 8002b52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b56:	f7fe fcbd 	bl	80014d4 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e10d      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002b68:	f7ff fab7 	bl	80020da <LL_RCC_HSI48_IsReady>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f1      	beq.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
 8002b72:	e013      	b.n	8002b9c <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b74:	f7ff faa0 	bl	80020b8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b78:	f7fe fcac 	bl	80014d4 <HAL_GetTick>
 8002b7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b80:	f7fe fca8 	bl	80014d4 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e0f8      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002b92:	f7ff faa2 	bl	80020da <LL_RCC_HSI48_IsReady>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1f1      	bne.n	8002b80 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 80ee 	beq.w	8002d82 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ba6:	f7ff fc00 	bl	80023aa <LL_RCC_GetSysClkSource>
 8002baa:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	f040 80af 	bne.w	8002d1c <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f003 0203 	and.w	r2, r3, #3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d123      	bne.n	8002c14 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d11c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	0a1b      	lsrs	r3, r3, #8
 8002bde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d114      	bne.n	8002c14 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d10d      	bne.n	8002c14 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d106      	bne.n	8002c14 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d05d      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	2b0c      	cmp	r3, #12
 8002c18:	d058      	beq.n	8002ccc <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0ab      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c2c:	f7ff fc73 	bl	8002516 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c30:	f7fe fc50 	bl	80014d4 <HAL_GetTick>
 8002c34:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c38:	f7fe fc4c 	bl	80014d4 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e09c      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1ef      	bne.n	8002c38 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	4b3e      	ldr	r3, [pc, #248]	; (8002d58 <HAL_RCC_OscConfig+0x6e4>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c6a:	4311      	orrs	r1, r2
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c70:	0212      	lsls	r2, r2, #8
 8002c72:	4311      	orrs	r1, r2
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c78:	4311      	orrs	r1, r2
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c7e:	4311      	orrs	r1, r2
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c84:	430a      	orrs	r2, r1
 8002c86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c8e:	f7ff fc33 	bl	80024f8 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca0:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ca2:	f7fe fc17 	bl	80014d4 <HAL_GetTick>
 8002ca6:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002caa:	f7fe fc13 	bl	80014d4 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e063      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0ef      	beq.n	8002caa <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cca:	e05a      	b.n	8002d82 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e059      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d151      	bne.n	8002d82 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cde:	f7ff fc0b 	bl	80024f8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cf2:	f7fe fbef 	bl	80014d4 <HAL_GetTick>
 8002cf6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cfa:	f7fe fbeb 	bl	80014d4 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e03b      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0ef      	beq.n	8002cfa <HAL_RCC_OscConfig+0x686>
 8002d1a:	e032      	b.n	8002d82 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	2b0c      	cmp	r3, #12
 8002d20:	d02d      	beq.n	8002d7e <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d22:	f7ff fbf8 	bl	8002516 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d30:	f023 0303 	bic.w	r3, r3, #3
 8002d34:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d40:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d48:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4a:	f7fe fbc3 	bl	80014d4 <HAL_GetTick>
 8002d4e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d50:	e00d      	b.n	8002d6e <HAL_RCC_OscConfig+0x6fa>
 8002d52:	bf00      	nop
 8002d54:	58000400 	.word	0x58000400
 8002d58:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d5c:	f7fe fbba 	bl	80014d4 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e00a      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1ef      	bne.n	8002d5c <HAL_RCC_OscConfig+0x6e8>
 8002d7c:	e001      	b.n	8002d82 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3734      	adds	r7, #52	; 0x34
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd90      	pop	{r4, r7, pc}

08002d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e12d      	b.n	8002ffc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002da0:	4b98      	ldr	r3, [pc, #608]	; (8003004 <HAL_RCC_ClockConfig+0x278>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d91b      	bls.n	8002de6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dae:	4b95      	ldr	r3, [pc, #596]	; (8003004 <HAL_RCC_ClockConfig+0x278>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 0207 	bic.w	r2, r3, #7
 8002db6:	4993      	ldr	r1, [pc, #588]	; (8003004 <HAL_RCC_ClockConfig+0x278>)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dbe:	f7fe fb89 	bl	80014d4 <HAL_GetTick>
 8002dc2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002dc6:	f7fe fb85 	bl	80014d4 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e111      	b.n	8002ffc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd8:	4b8a      	ldr	r3, [pc, #552]	; (8003004 <HAL_RCC_ClockConfig+0x278>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d1ef      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d016      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fae3 	bl	80023c2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002dfc:	f7fe fb6a 	bl	80014d4 <HAL_GetTick>
 8002e00:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e04:	f7fe fb66 	bl	80014d4 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e0f2      	b.n	8002ffc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002e16:	f7ff fbd0 	bl	80025ba <LL_RCC_IsActiveFlag_HPRE>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f1      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0320 	and.w	r3, r3, #32
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d016      	beq.n	8002e5a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff fada 	bl	80023ea <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e36:	f7fe fb4d 	bl	80014d4 <HAL_GetTick>
 8002e3a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e3e:	f7fe fb49 	bl	80014d4 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e0d5      	b.n	8002ffc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002e50:	f7ff fbc5 	bl	80025de <LL_RCC_IsActiveFlag_C2HPRE>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f1      	beq.n	8002e3e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d016      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff fad3 	bl	8002416 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e70:	f7fe fb30 	bl	80014d4 <HAL_GetTick>
 8002e74:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e78:	f7fe fb2c 	bl	80014d4 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e0b8      	b.n	8002ffc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002e8a:	f7ff fbbb 	bl	8002604 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f1      	beq.n	8002e78 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d016      	beq.n	8002ece <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff facd 	bl	8002444 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002eaa:	f7fe fb13 	bl	80014d4 <HAL_GetTick>
 8002eae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002eb2:	f7fe fb0f 	bl	80014d4 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e09b      	b.n	8002ffc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002ec4:	f7ff fbb1 	bl	800262a <LL_RCC_IsActiveFlag_PPRE1>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f1      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d017      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff fac3 	bl	800246c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ee6:	f7fe faf5 	bl	80014d4 <HAL_GetTick>
 8002eea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002eee:	f7fe faf1 	bl	80014d4 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e07d      	b.n	8002ffc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002f00:	f7ff fba5 	bl	800264e <LL_RCC_IsActiveFlag_PPRE2>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0f1      	beq.n	8002eee <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d043      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d106      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002f1e:	f7ff f863 	bl	8001fe8 <LL_RCC_HSE_IsReady>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d11e      	bne.n	8002f66 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e067      	b.n	8002ffc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d106      	bne.n	8002f42 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002f34:	f7ff fafe 	bl	8002534 <LL_RCC_PLL_IsReady>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d113      	bne.n	8002f66 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e05c      	b.n	8002ffc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002f4a:	f7ff f9cb 	bl	80022e4 <LL_RCC_MSI_IsReady>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d108      	bne.n	8002f66 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e051      	b.n	8002ffc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002f58:	f7ff f876 	bl	8002048 <LL_RCC_HSI_IsReady>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e04a      	b.n	8002ffc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff fa09 	bl	8002382 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f70:	f7fe fab0 	bl	80014d4 <HAL_GetTick>
 8002f74:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f76:	e00a      	b.n	8002f8e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f78:	f7fe faac 	bl	80014d4 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e036      	b.n	8002ffc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8e:	f7ff fa0c 	bl	80023aa <LL_RCC_GetSysClkSource>
 8002f92:	4602      	mov	r2, r0
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d1ec      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f9e:	4b19      	ldr	r3, [pc, #100]	; (8003004 <HAL_RCC_ClockConfig+0x278>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d21b      	bcs.n	8002fe4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fac:	4b15      	ldr	r3, [pc, #84]	; (8003004 <HAL_RCC_ClockConfig+0x278>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f023 0207 	bic.w	r2, r3, #7
 8002fb4:	4913      	ldr	r1, [pc, #76]	; (8003004 <HAL_RCC_ClockConfig+0x278>)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fbc:	f7fe fa8a 	bl	80014d4 <HAL_GetTick>
 8002fc0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002fc4:	f7fe fa86 	bl	80014d4 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e012      	b.n	8002ffc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd6:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <HAL_RCC_ClockConfig+0x278>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d1ef      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002fe4:	f000 f87c 	bl	80030e0 <HAL_RCC_GetHCLKFreq>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	4b07      	ldr	r3, [pc, #28]	; (8003008 <HAL_RCC_ClockConfig+0x27c>)
 8002fec:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002fee:	f7fe fa7d 	bl	80014ec <HAL_GetTickPrio>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fe fa1f 	bl	8001438 <HAL_InitTick>
 8002ffa:	4603      	mov	r3, r0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	58004000 	.word	0x58004000
 8003008:	20000004 	.word	0x20000004

0800300c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800300c:	b590      	push	{r4, r7, lr}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003012:	f7ff f9ca 	bl	80023aa <LL_RCC_GetSysClkSource>
 8003016:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10a      	bne.n	8003034 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800301e:	f7ff f986 	bl	800232e <LL_RCC_MSI_GetRange>
 8003022:	4603      	mov	r3, r0
 8003024:	091b      	lsrs	r3, r3, #4
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	4a2a      	ldr	r2, [pc, #168]	; (80030d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800302c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	e04a      	b.n	80030ca <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b04      	cmp	r3, #4
 8003038:	d102      	bne.n	8003040 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800303a:	4b27      	ldr	r3, [pc, #156]	; (80030d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	e044      	b.n	80030ca <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b08      	cmp	r3, #8
 8003044:	d10a      	bne.n	800305c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003046:	f7fe ff9f 	bl	8001f88 <LL_RCC_HSE_IsEnabledDiv2>
 800304a:	4603      	mov	r3, r0
 800304c:	2b01      	cmp	r3, #1
 800304e:	d102      	bne.n	8003056 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003050:	4b21      	ldr	r3, [pc, #132]	; (80030d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	e039      	b.n	80030ca <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003056:	4b21      	ldr	r3, [pc, #132]	; (80030dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	e036      	b.n	80030ca <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800305c:	f7ff faa1 	bl	80025a2 <LL_RCC_PLL_GetMainSource>
 8003060:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b02      	cmp	r3, #2
 8003066:	d002      	beq.n	800306e <HAL_RCC_GetSysClockFreq+0x62>
 8003068:	2b03      	cmp	r3, #3
 800306a:	d003      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0x68>
 800306c:	e00d      	b.n	800308a <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800306e:	4b1a      	ldr	r3, [pc, #104]	; (80030d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003070:	60bb      	str	r3, [r7, #8]
        break;
 8003072:	e015      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003074:	f7fe ff88 	bl	8001f88 <LL_RCC_HSE_IsEnabledDiv2>
 8003078:	4603      	mov	r3, r0
 800307a:	2b01      	cmp	r3, #1
 800307c:	d102      	bne.n	8003084 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800307e:	4b16      	ldr	r3, [pc, #88]	; (80030d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003080:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003082:	e00d      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8003084:	4b15      	ldr	r3, [pc, #84]	; (80030dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003086:	60bb      	str	r3, [r7, #8]
        break;
 8003088:	e00a      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800308a:	f7ff f950 	bl	800232e <LL_RCC_MSI_GetRange>
 800308e:	4603      	mov	r3, r0
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	4a0f      	ldr	r2, [pc, #60]	; (80030d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309c:	60bb      	str	r3, [r7, #8]
        break;
 800309e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80030a0:	f7ff fa5a 	bl	8002558 <LL_RCC_PLL_GetN>
 80030a4:	4602      	mov	r2, r0
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	fb03 f402 	mul.w	r4, r3, r2
 80030ac:	f7ff fa6d 	bl	800258a <LL_RCC_PLL_GetDivider>
 80030b0:	4603      	mov	r3, r0
 80030b2:	091b      	lsrs	r3, r3, #4
 80030b4:	3301      	adds	r3, #1
 80030b6:	fbb4 f4f3 	udiv	r4, r4, r3
 80030ba:	f7ff fa5a 	bl	8002572 <LL_RCC_PLL_GetR>
 80030be:	4603      	mov	r3, r0
 80030c0:	0f5b      	lsrs	r3, r3, #29
 80030c2:	3301      	adds	r3, #1
 80030c4:	fbb4 f3f3 	udiv	r3, r4, r3
 80030c8:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80030ca:	68fb      	ldr	r3, [r7, #12]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd90      	pop	{r4, r7, pc}
 80030d4:	08007c94 	.word	0x08007c94
 80030d8:	00f42400 	.word	0x00f42400
 80030dc:	01e84800 	.word	0x01e84800

080030e0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030e0:	b598      	push	{r3, r4, r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80030e4:	f7ff ff92 	bl	800300c <HAL_RCC_GetSysClockFreq>
 80030e8:	4604      	mov	r4, r0
 80030ea:	f7ff f9d3 	bl	8002494 <LL_RCC_GetAHBPrescaler>
 80030ee:	4603      	mov	r3, r0
 80030f0:	091b      	lsrs	r3, r3, #4
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	4a03      	ldr	r2, [pc, #12]	; (8003104 <HAL_RCC_GetHCLKFreq+0x24>)
 80030f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003100:	4618      	mov	r0, r3
 8003102:	bd98      	pop	{r3, r4, r7, pc}
 8003104:	08007c34 	.word	0x08007c34

08003108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003108:	b598      	push	{r3, r4, r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800310c:	f7ff ffe8 	bl	80030e0 <HAL_RCC_GetHCLKFreq>
 8003110:	4604      	mov	r4, r0
 8003112:	f7ff f9d9 	bl	80024c8 <LL_RCC_GetAPB1Prescaler>
 8003116:	4603      	mov	r3, r0
 8003118:	0a1b      	lsrs	r3, r3, #8
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	4a04      	ldr	r2, [pc, #16]	; (8003130 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003124:	f003 031f 	and.w	r3, r3, #31
 8003128:	fa24 f303 	lsr.w	r3, r4, r3
}
 800312c:	4618      	mov	r0, r3
 800312e:	bd98      	pop	{r3, r4, r7, pc}
 8003130:	08007c74 	.word	0x08007c74

08003134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003134:	b598      	push	{r3, r4, r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003138:	f7ff ffd2 	bl	80030e0 <HAL_RCC_GetHCLKFreq>
 800313c:	4604      	mov	r4, r0
 800313e:	f7ff f9cf 	bl	80024e0 <LL_RCC_GetAPB2Prescaler>
 8003142:	4603      	mov	r3, r0
 8003144:	0adb      	lsrs	r3, r3, #11
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	4a04      	ldr	r2, [pc, #16]	; (800315c <HAL_RCC_GetPCLK2Freq+0x28>)
 800314c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003150:	f003 031f 	and.w	r3, r3, #31
 8003154:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003158:	4618      	mov	r0, r3
 800315a:	bd98      	pop	{r3, r4, r7, pc}
 800315c:	08007c74 	.word	0x08007c74

08003160 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003160:	b590      	push	{r4, r7, lr}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2bb0      	cmp	r3, #176	; 0xb0
 800316c:	d903      	bls.n	8003176 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800316e:	4b15      	ldr	r3, [pc, #84]	; (80031c4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	e007      	b.n	8003186 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	4a11      	ldr	r2, [pc, #68]	; (80031c4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003184:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003186:	f7ff f991 	bl	80024ac <LL_RCC_GetAHB4Prescaler>
 800318a:	4603      	mov	r3, r0
 800318c:	091b      	lsrs	r3, r3, #4
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	4a0d      	ldr	r2, [pc, #52]	; (80031c8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	fbb2 f3f3 	udiv	r3, r2, r3
 800319e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	4a0a      	ldr	r2, [pc, #40]	; (80031cc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80031a4:	fba2 2303 	umull	r2, r3, r2, r3
 80031a8:	0c9c      	lsrs	r4, r3, #18
 80031aa:	f7fe fedf 	bl	8001f6c <HAL_PWREx_GetVoltageRange>
 80031ae:	4603      	mov	r3, r0
 80031b0:	4619      	mov	r1, r3
 80031b2:	4620      	mov	r0, r4
 80031b4:	f000 f80c 	bl	80031d0 <RCC_SetFlashLatency>
 80031b8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd90      	pop	{r4, r7, pc}
 80031c2:	bf00      	nop
 80031c4:	08007c94 	.word	0x08007c94
 80031c8:	08007c34 	.word	0x08007c34
 80031cc:	431bde83 	.word	0x431bde83

080031d0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80031d0:	b590      	push	{r4, r7, lr}
 80031d2:	b093      	sub	sp, #76	; 0x4c
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80031da:	4b39      	ldr	r3, [pc, #228]	; (80032c0 <RCC_SetFlashLatency+0xf0>)
 80031dc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80031e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80031e6:	4a37      	ldr	r2, [pc, #220]	; (80032c4 <RCC_SetFlashLatency+0xf4>)
 80031e8:	f107 031c 	add.w	r3, r7, #28
 80031ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80031ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80031f2:	4b35      	ldr	r3, [pc, #212]	; (80032c8 <RCC_SetFlashLatency+0xf8>)
 80031f4:	f107 040c 	add.w	r4, r7, #12
 80031f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80031fe:	2300      	movs	r3, #0
 8003200:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003208:	d11c      	bne.n	8003244 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800320a:	2300      	movs	r3, #0
 800320c:	643b      	str	r3, [r7, #64]	; 0x40
 800320e:	e015      	b.n	800323c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003218:	4413      	add	r3, r2
 800321a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	429a      	cmp	r2, r3
 8003222:	d808      	bhi.n	8003236 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800322c:	4413      	add	r3, r2
 800322e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003232:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003234:	e022      	b.n	800327c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003238:	3301      	adds	r3, #1
 800323a:	643b      	str	r3, [r7, #64]	; 0x40
 800323c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800323e:	2b03      	cmp	r3, #3
 8003240:	d9e6      	bls.n	8003210 <RCC_SetFlashLatency+0x40>
 8003242:	e01b      	b.n	800327c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003244:	2300      	movs	r3, #0
 8003246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003248:	e015      	b.n	8003276 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800324a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003252:	4413      	add	r3, r2
 8003254:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	429a      	cmp	r2, r3
 800325c:	d808      	bhi.n	8003270 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800325e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003266:	4413      	add	r3, r2
 8003268:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800326c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800326e:	e005      	b.n	800327c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003272:	3301      	adds	r3, #1
 8003274:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003278:	2b02      	cmp	r3, #2
 800327a:	d9e6      	bls.n	800324a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800327c:	4b13      	ldr	r3, [pc, #76]	; (80032cc <RCC_SetFlashLatency+0xfc>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f023 0207 	bic.w	r2, r3, #7
 8003284:	4911      	ldr	r1, [pc, #68]	; (80032cc <RCC_SetFlashLatency+0xfc>)
 8003286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003288:	4313      	orrs	r3, r2
 800328a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800328c:	f7fe f922 	bl	80014d4 <HAL_GetTick>
 8003290:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003292:	e008      	b.n	80032a6 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003294:	f7fe f91e 	bl	80014d4 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e007      	b.n	80032b6 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80032a6:	4b09      	ldr	r3, [pc, #36]	; (80032cc <RCC_SetFlashLatency+0xfc>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d1ef      	bne.n	8003294 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	374c      	adds	r7, #76	; 0x4c
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd90      	pop	{r4, r7, pc}
 80032be:	bf00      	nop
 80032c0:	0800796c 	.word	0x0800796c
 80032c4:	0800797c 	.word	0x0800797c
 80032c8:	08007988 	.word	0x08007988
 80032cc:	58004000 	.word	0x58004000

080032d0 <LL_RCC_LSE_IsEnabled>:
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80032d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d101      	bne.n	80032e8 <LL_RCC_LSE_IsEnabled+0x18>
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <LL_RCC_LSE_IsEnabled+0x1a>
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <LL_RCC_LSE_IsReady>:
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80032f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b02      	cmp	r3, #2
 8003306:	d101      	bne.n	800330c <LL_RCC_LSE_IsReady+0x18>
 8003308:	2301      	movs	r3, #1
 800330a:	e000      	b.n	800330e <LL_RCC_LSE_IsReady+0x1a>
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <LL_RCC_SetRFWKPClockSource>:
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003324:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003328:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800332c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4313      	orrs	r3, r2
 8003334:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <LL_RCC_SetSMPSClockSource>:
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800334c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	f023 0203 	bic.w	r2, r3, #3
 8003356:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4313      	orrs	r3, r2
 800335e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <LL_RCC_SetSMPSPrescaler>:
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800337e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4313      	orrs	r3, r2
 8003386:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <LL_RCC_SetUSARTClockSource>:
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800339c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a4:	f023 0203 	bic.w	r2, r3, #3
 80033a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <LL_RCC_SetLPUARTClockSource>:
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80033c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4313      	orrs	r3, r2
 80033dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <LL_RCC_SetI2CClockSource>:
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80033f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	091b      	lsrs	r3, r3, #4
 8003400:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003404:	43db      	mvns	r3, r3
 8003406:	401a      	ands	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003410:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <LL_RCC_SetLPTIMClockSource>:
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800342e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003432:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	0c1b      	lsrs	r3, r3, #16
 800343a:	041b      	lsls	r3, r3, #16
 800343c:	43db      	mvns	r3, r3
 800343e:	401a      	ands	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	041b      	lsls	r3, r3, #16
 8003444:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <LL_RCC_SetSAIClockSource>:
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800346e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <LL_RCC_SetRNGClockSource>:
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800348e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003496:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800349a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <LL_RCC_SetCLK48ClockSource>:
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80034ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <LL_RCC_SetUSBClockSource>:
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b082      	sub	sp, #8
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7ff ffe3 	bl	80034b2 <LL_RCC_SetCLK48ClockSource>
}
 80034ec:	bf00      	nop
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <LL_RCC_SetADCClockSource>:
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80034fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003504:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003508:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <LL_RCC_SetRTCClockSource>:
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800352c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003530:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003534:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <LL_RCC_GetRTCClockSource>:
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003558:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800355c:	4618      	mov	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <LL_RCC_ForceBackupDomainReset>:
{
 8003566:	b480      	push	{r7}
 8003568:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800356a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800356e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003572:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800357e:	bf00      	nop
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800358c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003594:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800359c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80035a0:	bf00      	nop
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <LL_RCC_PLLSAI1_Enable>:
{
 80035aa:	b480      	push	{r7}
 80035ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80035ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035bc:	6013      	str	r3, [r2, #0]
}
 80035be:	bf00      	nop
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <LL_RCC_PLLSAI1_Disable>:
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80035cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035da:	6013      	str	r3, [r2, #0]
}
 80035dc:	bf00      	nop
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <LL_RCC_PLLSAI1_IsReady>:
{
 80035e6:	b480      	push	{r7}
 80035e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80035ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035f8:	d101      	bne.n	80035fe <LL_RCC_PLLSAI1_IsReady+0x18>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b088      	sub	sp, #32
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003612:	2300      	movs	r3, #0
 8003614:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003616:	2300      	movs	r3, #0
 8003618:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003622:	2b00      	cmp	r3, #0
 8003624:	d033      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800362e:	d00c      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003630:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003634:	d802      	bhi.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003636:	2b00      	cmp	r3, #0
 8003638:	d010      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x52>
 800363a:	e017      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x62>
 800363c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003640:	d017      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003642:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003646:	d016      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8003648:	e010      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800364a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003658:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800365a:	e00d      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3304      	adds	r3, #4
 8003660:	4618      	mov	r0, r3
 8003662:	f000 f947 	bl	80038f4 <RCCEx_PLLSAI1_ConfigNP>
 8003666:	4603      	mov	r3, r0
 8003668:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800366a:	e005      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	77fb      	strb	r3, [r7, #31]
        break;
 8003670:	e002      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8003672:	bf00      	nop
 8003674:	e000      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8003676:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003678:	7ffb      	ldrb	r3, [r7, #31]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d105      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff fee9 	bl	800345a <LL_RCC_SetSAIClockSource>
 8003688:	e001      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368a:	7ffb      	ldrb	r3, [r7, #31]
 800368c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003696:	2b00      	cmp	r3, #0
 8003698:	d046      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800369a:	f7ff ff57 	bl	800354c <LL_RCC_GetRTCClockSource>
 800369e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d03c      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80036aa:	f7fe fc4f 	bl	8001f4c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d105      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff ff31 	bl	8003520 <LL_RCC_SetRTCClockSource>
 80036be:	e02e      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80036c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80036ca:	f7ff ff4c 	bl	8003566 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80036ce:	f7ff ff5b 	bl	8003588 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	4313      	orrs	r3, r2
 80036de:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80036e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80036ea:	f7ff fdf1 	bl	80032d0 <LL_RCC_LSE_IsEnabled>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d114      	bne.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036f4:	f7fd feee 	bl	80014d4 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80036fa:	e00b      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fc:	f7fd feea 	bl	80014d4 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	f241 3288 	movw	r2, #5000	; 0x1388
 800370a:	4293      	cmp	r3, r2
 800370c:	d902      	bls.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	77fb      	strb	r3, [r7, #31]
              break;
 8003712:	e004      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003714:	f7ff fdee 	bl	80032f4 <LL_RCC_LSE_IsReady>
 8003718:	4603      	mov	r3, r0
 800371a:	2b01      	cmp	r3, #1
 800371c:	d1ee      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800371e:	7ffb      	ldrb	r3, [r7, #31]
 8003720:	77bb      	strb	r3, [r7, #30]
 8003722:	e001      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003724:	7ffb      	ldrb	r3, [r7, #31]
 8003726:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d004      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fe2b 	bl	8003394 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d004      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff fe36 	bl	80033c0 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0310 	and.w	r3, r3, #16
 800375c:	2b00      	cmp	r3, #0
 800375e:	d004      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff fe5e 	bl	8003426 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0320 	and.w	r3, r3, #32
 8003772:	2b00      	cmp	r3, #0
 8003774:	d004      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff fe53 	bl	8003426 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d004      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff fe2b 	bl	80033ec <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d004      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff fe20 	bl	80033ec <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d022      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff fe8e 	bl	80034de <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037ca:	d107      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80037cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037da:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037e4:	d10b      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3304      	adds	r3, #4
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 f8dd 	bl	80039aa <RCCEx_PLLSAI1_ConfigNQ>
 80037f0:	4603      	mov	r3, r0
 80037f2:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80037f4:	7ffb      	ldrb	r3, [r7, #31]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 80037fa:	7ffb      	ldrb	r3, [r7, #31]
 80037fc:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003806:	2b00      	cmp	r3, #0
 8003808:	d02b      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003812:	d008      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800381c:	d003      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003822:	2b00      	cmp	r3, #0
 8003824:	d105      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff fe2b 	bl	8003486 <LL_RCC_SetRNGClockSource>
 8003830:	e00a      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	2000      	movs	r0, #0
 800383e:	f7ff fe22 	bl	8003486 <LL_RCC_SetRNGClockSource>
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f7ff fe35 	bl	80034b2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003850:	d107      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800385c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003860:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800386a:	2b00      	cmp	r3, #0
 800386c:	d022      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff fe3e 	bl	80034f4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003880:	d107      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800388c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003890:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003896:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800389a:	d10b      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3304      	adds	r3, #4
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 f8dd 	bl	8003a60 <RCCEx_PLLSAI1_ConfigNR>
 80038a6:	4603      	mov	r3, r0
 80038a8:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80038aa:	7ffb      	ldrb	r3, [r7, #31]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 80038b0:	7ffb      	ldrb	r3, [r7, #31]
 80038b2:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d004      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff fd27 	bl	8003318 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d009      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff fd46 	bl	800336c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff fd2d 	bl	8003344 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80038ea:	7fbb      	ldrb	r3, [r7, #30]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3720      	adds	r7, #32
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003900:	f7ff fe62 	bl	80035c8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003904:	f7fd fde6 	bl	80014d4 <HAL_GetTick>
 8003908:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800390a:	e009      	b.n	8003920 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800390c:	f7fd fde2 	bl	80014d4 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d902      	bls.n	8003920 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	73fb      	strb	r3, [r7, #15]
      break;
 800391e:	e004      	b.n	800392a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003920:	f7ff fe61 	bl	80035e6 <LL_RCC_PLLSAI1_IsReady>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f0      	bne.n	800390c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800392a:	7bfb      	ldrb	r3, [r7, #15]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d137      	bne.n	80039a0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	021b      	lsls	r3, r3, #8
 8003940:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003944:	4313      	orrs	r3, r2
 8003946:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800395a:	4313      	orrs	r3, r2
 800395c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800395e:	f7ff fe24 	bl	80035aa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003962:	f7fd fdb7 	bl	80014d4 <HAL_GetTick>
 8003966:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003968:	e009      	b.n	800397e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800396a:	f7fd fdb3 	bl	80014d4 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d902      	bls.n	800397e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	73fb      	strb	r3, [r7, #15]
        break;
 800397c:	e004      	b.n	8003988 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800397e:	f7ff fe32 	bl	80035e6 <LL_RCC_PLLSAI1_IsReady>
 8003982:	4603      	mov	r3, r0
 8003984:	2b01      	cmp	r3, #1
 8003986:	d1f0      	bne.n	800396a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d108      	bne.n	80039a0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800398e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003992:	691a      	ldr	r2, [r3, #16]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800399c:	4313      	orrs	r3, r2
 800399e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80039b6:	f7ff fe07 	bl	80035c8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80039ba:	f7fd fd8b 	bl	80014d4 <HAL_GetTick>
 80039be:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80039c0:	e009      	b.n	80039d6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039c2:	f7fd fd87 	bl	80014d4 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d902      	bls.n	80039d6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	73fb      	strb	r3, [r7, #15]
      break;
 80039d4:	e004      	b.n	80039e0 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80039d6:	f7ff fe06 	bl	80035e6 <LL_RCC_PLLSAI1_IsReady>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1f0      	bne.n	80039c2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80039e0:	7bfb      	ldrb	r3, [r7, #15]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d137      	bne.n	8003a56 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80039e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	021b      	lsls	r3, r3, #8
 80039f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039fa:	4313      	orrs	r3, r2
 80039fc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80039fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a10:	4313      	orrs	r3, r2
 8003a12:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003a14:	f7ff fdc9 	bl	80035aa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a18:	f7fd fd5c 	bl	80014d4 <HAL_GetTick>
 8003a1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a1e:	e009      	b.n	8003a34 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a20:	f7fd fd58 	bl	80014d4 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d902      	bls.n	8003a34 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	73fb      	strb	r3, [r7, #15]
        break;
 8003a32:	e004      	b.n	8003a3e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a34:	f7ff fdd7 	bl	80035e6 <LL_RCC_PLLSAI1_IsReady>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d1f0      	bne.n	8003a20 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d108      	bne.n	8003a56 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a52:	4313      	orrs	r3, r2
 8003a54:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003a6c:	f7ff fdac 	bl	80035c8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003a70:	f7fd fd30 	bl	80014d4 <HAL_GetTick>
 8003a74:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003a76:	e009      	b.n	8003a8c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a78:	f7fd fd2c 	bl	80014d4 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d902      	bls.n	8003a8c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	73fb      	strb	r3, [r7, #15]
      break;
 8003a8a:	e004      	b.n	8003a96 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003a8c:	f7ff fdab 	bl	80035e6 <LL_RCC_PLLSAI1_IsReady>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1f0      	bne.n	8003a78 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d137      	bne.n	8003b0c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003aca:	f7ff fd6e 	bl	80035aa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ace:	f7fd fd01 	bl	80014d4 <HAL_GetTick>
 8003ad2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003ad4:	e009      	b.n	8003aea <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ad6:	f7fd fcfd 	bl	80014d4 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d902      	bls.n	8003aea <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	73fb      	strb	r3, [r7, #15]
        break;
 8003ae8:	e004      	b.n	8003af4 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003aea:	f7ff fd7c 	bl	80035e6 <LL_RCC_PLLSAI1_IsReady>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d1f0      	bne.n	8003ad6 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d108      	bne.n	8003b0c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b082      	sub	sp, #8
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e090      	b.n	8003c4a <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d106      	bne.n	8003b42 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7fd fb61 	bl	8001204 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2202      	movs	r2, #2
 8003b46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	22ca      	movs	r2, #202	; 0xca
 8003b50:	625a      	str	r2, [r3, #36]	; 0x24
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2253      	movs	r2, #83	; 0x53
 8003b58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f89f 	bl	8003c9e <RTC_EnterInitMode>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d009      	beq.n	8003b7a <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	22ff      	movs	r2, #255	; 0xff
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2204      	movs	r2, #4
 8003b72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e067      	b.n	8003c4a <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6812      	ldr	r2, [r2, #0]
 8003b84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b8c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6899      	ldr	r1, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	68d2      	ldr	r2, [r2, #12]
 8003bb4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6919      	ldr	r1, [r3, #16]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	041a      	lsls	r2, r3, #16
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68da      	ldr	r2, [r3, #12]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bd8:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0203 	bic.w	r2, r2, #3
 8003be8:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	69da      	ldr	r2, [r3, #28]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 0320 	and.w	r3, r3, #32
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d113      	bne.n	8003c38 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f81e 	bl	8003c52 <HAL_RTC_WaitForSynchro>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00d      	beq.n	8003c38 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	22ff      	movs	r2, #255	; 0xff
 8003c22:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2204      	movs	r2, #4
 8003c28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e008      	b.n	8003c4a <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	22ff      	movs	r2, #255	; 0xff
 8003c3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8003c48:	2300      	movs	r3, #0
  }
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68da      	ldr	r2, [r3, #12]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c68:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003c6a:	f7fd fc33 	bl	80014d4 <HAL_GetTick>
 8003c6e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003c70:	e009      	b.n	8003c86 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003c72:	f7fd fc2f 	bl	80014d4 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c80:	d901      	bls.n	8003c86 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e007      	b.n	8003c96 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f003 0320 	and.w	r3, r3, #32
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0ee      	beq.n	8003c72 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b084      	sub	sp, #16
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d119      	bne.n	8003ce8 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cbc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003cbe:	f7fd fc09 	bl	80014d4 <HAL_GetTick>
 8003cc2:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003cc4:	e009      	b.n	8003cda <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003cc6:	f7fd fc05 	bl	80014d4 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cd4:	d901      	bls.n	8003cda <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e007      	b.n	8003cea <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0ee      	beq.n	8003cc6 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <LL_RCC_GetUSARTClockSource>:
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cfe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4013      	ands	r3, r2
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <LL_RCC_GetLPUARTClockSource>:
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d1e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4013      	ands	r3, r2
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e042      	b.n	8003dca <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fd f9f8 	bl	800114c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2224      	movs	r2, #36	; 0x24
 8003d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0201 	bic.w	r2, r2, #1
 8003d72:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f989 	bl	800408c <UART_SetConfig>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e022      	b.n	8003dca <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 fb8b 	bl	80044a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003da0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003db0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0201 	orr.w	r2, r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fc12 	bl	80045ec <UART_CheckIdleState>
 8003dc8:	4603      	mov	r3, r0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
	...

08003dd4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	4613      	mov	r3, r2
 8003de0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003de8:	2b20      	cmp	r3, #32
 8003dea:	d168      	bne.n	8003ebe <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <HAL_UART_Transmit_IT+0x24>
 8003df2:	88fb      	ldrh	r3, [r7, #6]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e061      	b.n	8003ec0 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d101      	bne.n	8003e0a <HAL_UART_Transmit_IT+0x36>
 8003e06:	2302      	movs	r3, #2
 8003e08:	e05a      	b.n	8003ec0 <HAL_UART_Transmit_IT+0xec>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	88fa      	ldrh	r2, [r7, #6]
 8003e1c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	88fa      	ldrh	r2, [r7, #6]
 8003e24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2221      	movs	r2, #33	; 0x21
 8003e3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e46:	d11c      	bne.n	8003e82 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e50:	d107      	bne.n	8003e62 <HAL_UART_Transmit_IT+0x8e>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d103      	bne.n	8003e62 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4a1b      	ldr	r2, [pc, #108]	; (8003ecc <HAL_UART_Transmit_IT+0xf8>)
 8003e5e:	671a      	str	r2, [r3, #112]	; 0x70
 8003e60:	e002      	b.n	8003e68 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4a1a      	ldr	r2, [pc, #104]	; (8003ed0 <HAL_UART_Transmit_IT+0xfc>)
 8003e66:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003e7e:	609a      	str	r2, [r3, #8]
 8003e80:	e01b      	b.n	8003eba <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e8a:	d107      	bne.n	8003e9c <HAL_UART_Transmit_IT+0xc8>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d103      	bne.n	8003e9c <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4a0f      	ldr	r2, [pc, #60]	; (8003ed4 <HAL_UART_Transmit_IT+0x100>)
 8003e98:	671a      	str	r2, [r3, #112]	; 0x70
 8003e9a:	e002      	b.n	8003ea2 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4a0e      	ldr	r2, [pc, #56]	; (8003ed8 <HAL_UART_Transmit_IT+0x104>)
 8003ea0:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003eb8:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	e000      	b.n	8003ec0 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8003ebe:	2302      	movs	r3, #2
  }
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3714      	adds	r7, #20
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	08004909 	.word	0x08004909
 8003ed0:	0800486f 	.word	0x0800486f
 8003ed4:	080047f1 	.word	0x080047f1
 8003ed8:	0800477d 	.word	0x0800477d

08003edc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ef0:	2b20      	cmp	r3, #32
 8003ef2:	f040 80bc 	bne.w	800406e <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <HAL_UART_Receive_IT+0x26>
 8003efc:	88fb      	ldrh	r3, [r7, #6]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e0b4      	b.n	8004070 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_UART_Receive_IT+0x38>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e0ad      	b.n	8004070 <HAL_UART_Receive_IT+0x194>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	88fa      	ldrh	r2, [r7, #6]
 8003f26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	88fa      	ldrh	r2, [r7, #6]
 8003f2e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f40:	d10e      	bne.n	8003f60 <HAL_UART_Receive_IT+0x84>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d105      	bne.n	8003f56 <HAL_UART_Receive_IT+0x7a>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003f50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f54:	e02d      	b.n	8003fb2 <HAL_UART_Receive_IT+0xd6>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	22ff      	movs	r2, #255	; 0xff
 8003f5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f5e:	e028      	b.n	8003fb2 <HAL_UART_Receive_IT+0xd6>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10d      	bne.n	8003f84 <HAL_UART_Receive_IT+0xa8>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d104      	bne.n	8003f7a <HAL_UART_Receive_IT+0x9e>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	22ff      	movs	r2, #255	; 0xff
 8003f74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f78:	e01b      	b.n	8003fb2 <HAL_UART_Receive_IT+0xd6>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	227f      	movs	r2, #127	; 0x7f
 8003f7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f82:	e016      	b.n	8003fb2 <HAL_UART_Receive_IT+0xd6>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f8c:	d10d      	bne.n	8003faa <HAL_UART_Receive_IT+0xce>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d104      	bne.n	8003fa0 <HAL_UART_Receive_IT+0xc4>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	227f      	movs	r2, #127	; 0x7f
 8003f9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f9e:	e008      	b.n	8003fb2 <HAL_UART_Receive_IT+0xd6>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	223f      	movs	r2, #63	; 0x3f
 8003fa4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003fa8:	e003      	b.n	8003fb2 <HAL_UART_Receive_IT+0xd6>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2222      	movs	r2, #34	; 0x22
 8003fbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f042 0201 	orr.w	r2, r2, #1
 8003fd0:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fda:	d12a      	bne.n	8004032 <HAL_UART_Receive_IT+0x156>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003fe2:	88fa      	ldrh	r2, [r7, #6]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d324      	bcc.n	8004032 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff0:	d107      	bne.n	8004002 <HAL_UART_Receive_IT+0x126>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d103      	bne.n	8004002 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4a1f      	ldr	r2, [pc, #124]	; (800407c <HAL_UART_Receive_IT+0x1a0>)
 8003ffe:	66da      	str	r2, [r3, #108]	; 0x6c
 8004000:	e002      	b.n	8004008 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4a1e      	ldr	r2, [pc, #120]	; (8004080 <HAL_UART_Receive_IT+0x1a4>)
 8004006:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800401e:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800402e:	609a      	str	r2, [r3, #8]
 8004030:	e01b      	b.n	800406a <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800403a:	d107      	bne.n	800404c <HAL_UART_Receive_IT+0x170>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d103      	bne.n	800404c <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4a0f      	ldr	r2, [pc, #60]	; (8004084 <HAL_UART_Receive_IT+0x1a8>)
 8004048:	66da      	str	r2, [r3, #108]	; 0x6c
 800404a:	e002      	b.n	8004052 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4a0e      	ldr	r2, [pc, #56]	; (8004088 <HAL_UART_Receive_IT+0x1ac>)
 8004050:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004068:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800406a:	2300      	movs	r3, #0
 800406c:	e000      	b.n	8004070 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800406e:	2302      	movs	r3, #2
  }
}
 8004070:	4618      	mov	r0, r3
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	08004c09 	.word	0x08004c09
 8004080:	08004b01 	.word	0x08004b01
 8004084:	08004a57 	.word	0x08004a57
 8004088:	080049ad 	.word	0x080049ad

0800408c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800408c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004090:	b088      	sub	sp, #32
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	431a      	orrs	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	4ba4      	ldr	r3, [pc, #656]	; (8004354 <UART_SetConfig+0x2c8>)
 80040c4:	4013      	ands	r3, r2
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6812      	ldr	r2, [r2, #0]
 80040ca:	69f9      	ldr	r1, [r7, #28]
 80040cc:	430b      	orrs	r3, r1
 80040ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a99      	ldr	r2, [pc, #612]	; (8004358 <UART_SetConfig+0x2cc>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d004      	beq.n	8004100 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	69fa      	ldr	r2, [r7, #28]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800410a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6812      	ldr	r2, [r2, #0]
 8004112:	69f9      	ldr	r1, [r7, #28]
 8004114:	430b      	orrs	r3, r1
 8004116:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	f023 010f 	bic.w	r1, r3, #15
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a8a      	ldr	r2, [pc, #552]	; (800435c <UART_SetConfig+0x2d0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d121      	bne.n	800417c <UART_SetConfig+0xf0>
 8004138:	2003      	movs	r0, #3
 800413a:	f7ff fdda 	bl	8003cf2 <LL_RCC_GetUSARTClockSource>
 800413e:	4603      	mov	r3, r0
 8004140:	2b03      	cmp	r3, #3
 8004142:	d817      	bhi.n	8004174 <UART_SetConfig+0xe8>
 8004144:	a201      	add	r2, pc, #4	; (adr r2, 800414c <UART_SetConfig+0xc0>)
 8004146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414a:	bf00      	nop
 800414c:	0800415d 	.word	0x0800415d
 8004150:	08004169 	.word	0x08004169
 8004154:	08004163 	.word	0x08004163
 8004158:	0800416f 	.word	0x0800416f
 800415c:	2301      	movs	r3, #1
 800415e:	76fb      	strb	r3, [r7, #27]
 8004160:	e038      	b.n	80041d4 <UART_SetConfig+0x148>
 8004162:	2302      	movs	r3, #2
 8004164:	76fb      	strb	r3, [r7, #27]
 8004166:	e035      	b.n	80041d4 <UART_SetConfig+0x148>
 8004168:	2304      	movs	r3, #4
 800416a:	76fb      	strb	r3, [r7, #27]
 800416c:	e032      	b.n	80041d4 <UART_SetConfig+0x148>
 800416e:	2308      	movs	r3, #8
 8004170:	76fb      	strb	r3, [r7, #27]
 8004172:	e02f      	b.n	80041d4 <UART_SetConfig+0x148>
 8004174:	2310      	movs	r3, #16
 8004176:	76fb      	strb	r3, [r7, #27]
 8004178:	bf00      	nop
 800417a:	e02b      	b.n	80041d4 <UART_SetConfig+0x148>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a75      	ldr	r2, [pc, #468]	; (8004358 <UART_SetConfig+0x2cc>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d124      	bne.n	80041d0 <UART_SetConfig+0x144>
 8004186:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800418a:	f7ff fdc2 	bl	8003d12 <LL_RCC_GetLPUARTClockSource>
 800418e:	4603      	mov	r3, r0
 8004190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004194:	d012      	beq.n	80041bc <UART_SetConfig+0x130>
 8004196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800419a:	d802      	bhi.n	80041a2 <UART_SetConfig+0x116>
 800419c:	2b00      	cmp	r3, #0
 800419e:	d007      	beq.n	80041b0 <UART_SetConfig+0x124>
 80041a0:	e012      	b.n	80041c8 <UART_SetConfig+0x13c>
 80041a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041a6:	d006      	beq.n	80041b6 <UART_SetConfig+0x12a>
 80041a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041ac:	d009      	beq.n	80041c2 <UART_SetConfig+0x136>
 80041ae:	e00b      	b.n	80041c8 <UART_SetConfig+0x13c>
 80041b0:	2300      	movs	r3, #0
 80041b2:	76fb      	strb	r3, [r7, #27]
 80041b4:	e00e      	b.n	80041d4 <UART_SetConfig+0x148>
 80041b6:	2302      	movs	r3, #2
 80041b8:	76fb      	strb	r3, [r7, #27]
 80041ba:	e00b      	b.n	80041d4 <UART_SetConfig+0x148>
 80041bc:	2304      	movs	r3, #4
 80041be:	76fb      	strb	r3, [r7, #27]
 80041c0:	e008      	b.n	80041d4 <UART_SetConfig+0x148>
 80041c2:	2308      	movs	r3, #8
 80041c4:	76fb      	strb	r3, [r7, #27]
 80041c6:	e005      	b.n	80041d4 <UART_SetConfig+0x148>
 80041c8:	2310      	movs	r3, #16
 80041ca:	76fb      	strb	r3, [r7, #27]
 80041cc:	bf00      	nop
 80041ce:	e001      	b.n	80041d4 <UART_SetConfig+0x148>
 80041d0:	2310      	movs	r3, #16
 80041d2:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a5f      	ldr	r2, [pc, #380]	; (8004358 <UART_SetConfig+0x2cc>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	f040 808e 	bne.w	80042fc <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041e0:	7efb      	ldrb	r3, [r7, #27]
 80041e2:	2b08      	cmp	r3, #8
 80041e4:	d823      	bhi.n	800422e <UART_SetConfig+0x1a2>
 80041e6:	a201      	add	r2, pc, #4	; (adr r2, 80041ec <UART_SetConfig+0x160>)
 80041e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ec:	08004211 	.word	0x08004211
 80041f0:	0800422f 	.word	0x0800422f
 80041f4:	08004219 	.word	0x08004219
 80041f8:	0800422f 	.word	0x0800422f
 80041fc:	0800421f 	.word	0x0800421f
 8004200:	0800422f 	.word	0x0800422f
 8004204:	0800422f 	.word	0x0800422f
 8004208:	0800422f 	.word	0x0800422f
 800420c:	08004227 	.word	0x08004227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004210:	f7fe ff7a 	bl	8003108 <HAL_RCC_GetPCLK1Freq>
 8004214:	6178      	str	r0, [r7, #20]
        break;
 8004216:	e00f      	b.n	8004238 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004218:	4b51      	ldr	r3, [pc, #324]	; (8004360 <UART_SetConfig+0x2d4>)
 800421a:	617b      	str	r3, [r7, #20]
        break;
 800421c:	e00c      	b.n	8004238 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800421e:	f7fe fef5 	bl	800300c <HAL_RCC_GetSysClockFreq>
 8004222:	6178      	str	r0, [r7, #20]
        break;
 8004224:	e008      	b.n	8004238 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800422a:	617b      	str	r3, [r7, #20]
        break;
 800422c:	e004      	b.n	8004238 <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 800422e:	2300      	movs	r3, #0
 8004230:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	76bb      	strb	r3, [r7, #26]
        break;
 8004236:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 811c 	beq.w	8004478 <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	4a47      	ldr	r2, [pc, #284]	; (8004364 <UART_SetConfig+0x2d8>)
 8004246:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800424a:	461a      	mov	r2, r3
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004252:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	4613      	mov	r3, r2
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	4413      	add	r3, r2
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	429a      	cmp	r2, r3
 8004262:	d305      	bcc.n	8004270 <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	429a      	cmp	r2, r3
 800426e:	d902      	bls.n	8004276 <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	76bb      	strb	r3, [r7, #26]
 8004274:	e100      	b.n	8004478 <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	4618      	mov	r0, r3
 800427a:	f04f 0100 	mov.w	r1, #0
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	4a38      	ldr	r2, [pc, #224]	; (8004364 <UART_SetConfig+0x2d8>)
 8004284:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004288:	b29b      	uxth	r3, r3
 800428a:	f04f 0400 	mov.w	r4, #0
 800428e:	461a      	mov	r2, r3
 8004290:	4623      	mov	r3, r4
 8004292:	f7fb ff85 	bl	80001a0 <__aeabi_uldivmod>
 8004296:	4603      	mov	r3, r0
 8004298:	460c      	mov	r4, r1
 800429a:	4619      	mov	r1, r3
 800429c:	4622      	mov	r2, r4
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	f04f 0400 	mov.w	r4, #0
 80042a6:	0214      	lsls	r4, r2, #8
 80042a8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80042ac:	020b      	lsls	r3, r1, #8
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6852      	ldr	r2, [r2, #4]
 80042b2:	0852      	lsrs	r2, r2, #1
 80042b4:	4611      	mov	r1, r2
 80042b6:	f04f 0200 	mov.w	r2, #0
 80042ba:	eb13 0b01 	adds.w	fp, r3, r1
 80042be:	eb44 0c02 	adc.w	ip, r4, r2
 80042c2:	4658      	mov	r0, fp
 80042c4:	4661      	mov	r1, ip
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f04f 0400 	mov.w	r4, #0
 80042ce:	461a      	mov	r2, r3
 80042d0:	4623      	mov	r3, r4
 80042d2:	f7fb ff65 	bl	80001a0 <__aeabi_uldivmod>
 80042d6:	4603      	mov	r3, r0
 80042d8:	460c      	mov	r4, r1
 80042da:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042e2:	d308      	bcc.n	80042f6 <UART_SetConfig+0x26a>
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ea:	d204      	bcs.n	80042f6 <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	60da      	str	r2, [r3, #12]
 80042f4:	e0c0      	b.n	8004478 <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	76bb      	strb	r3, [r7, #26]
 80042fa:	e0bd      	b.n	8004478 <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004304:	d169      	bne.n	80043da <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004306:	7efb      	ldrb	r3, [r7, #27]
 8004308:	3b01      	subs	r3, #1
 800430a:	2b07      	cmp	r3, #7
 800430c:	d82c      	bhi.n	8004368 <UART_SetConfig+0x2dc>
 800430e:	a201      	add	r2, pc, #4	; (adr r2, 8004314 <UART_SetConfig+0x288>)
 8004310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004314:	08004335 	.word	0x08004335
 8004318:	0800433d 	.word	0x0800433d
 800431c:	08004369 	.word	0x08004369
 8004320:	08004343 	.word	0x08004343
 8004324:	08004369 	.word	0x08004369
 8004328:	08004369 	.word	0x08004369
 800432c:	08004369 	.word	0x08004369
 8004330:	0800434b 	.word	0x0800434b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004334:	f7fe fefe 	bl	8003134 <HAL_RCC_GetPCLK2Freq>
 8004338:	6178      	str	r0, [r7, #20]
        break;
 800433a:	e01a      	b.n	8004372 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800433c:	4b08      	ldr	r3, [pc, #32]	; (8004360 <UART_SetConfig+0x2d4>)
 800433e:	617b      	str	r3, [r7, #20]
        break;
 8004340:	e017      	b.n	8004372 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004342:	f7fe fe63 	bl	800300c <HAL_RCC_GetSysClockFreq>
 8004346:	6178      	str	r0, [r7, #20]
        break;
 8004348:	e013      	b.n	8004372 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800434a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800434e:	617b      	str	r3, [r7, #20]
        break;
 8004350:	e00f      	b.n	8004372 <UART_SetConfig+0x2e6>
 8004352:	bf00      	nop
 8004354:	cfff69f3 	.word	0xcfff69f3
 8004358:	40008000 	.word	0x40008000
 800435c:	40013800 	.word	0x40013800
 8004360:	00f42400 	.word	0x00f42400
 8004364:	08007cd4 	.word	0x08007cd4
      default:
        pclk = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	76bb      	strb	r3, [r7, #26]
        break;
 8004370:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d07f      	beq.n	8004478 <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	4a48      	ldr	r2, [pc, #288]	; (80044a0 <UART_SetConfig+0x414>)
 800437e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004382:	461a      	mov	r2, r3
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	fbb3 f3f2 	udiv	r3, r3, r2
 800438a:	005a      	lsls	r2, r3, #1
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	085b      	lsrs	r3, r3, #1
 8004392:	441a      	add	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	fbb2 f3f3 	udiv	r3, r2, r3
 800439c:	b29b      	uxth	r3, r3
 800439e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	2b0f      	cmp	r3, #15
 80043a4:	d916      	bls.n	80043d4 <UART_SetConfig+0x348>
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ac:	d212      	bcs.n	80043d4 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	f023 030f 	bic.w	r3, r3, #15
 80043b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	085b      	lsrs	r3, r3, #1
 80043bc:	b29b      	uxth	r3, r3
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	89fb      	ldrh	r3, [r7, #14]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	89fa      	ldrh	r2, [r7, #14]
 80043d0:	60da      	str	r2, [r3, #12]
 80043d2:	e051      	b.n	8004478 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	76bb      	strb	r3, [r7, #26]
 80043d8:	e04e      	b.n	8004478 <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043da:	7efb      	ldrb	r3, [r7, #27]
 80043dc:	3b01      	subs	r3, #1
 80043de:	2b07      	cmp	r3, #7
 80043e0:	d821      	bhi.n	8004426 <UART_SetConfig+0x39a>
 80043e2:	a201      	add	r2, pc, #4	; (adr r2, 80043e8 <UART_SetConfig+0x35c>)
 80043e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e8:	08004409 	.word	0x08004409
 80043ec:	08004411 	.word	0x08004411
 80043f0:	08004427 	.word	0x08004427
 80043f4:	08004417 	.word	0x08004417
 80043f8:	08004427 	.word	0x08004427
 80043fc:	08004427 	.word	0x08004427
 8004400:	08004427 	.word	0x08004427
 8004404:	0800441f 	.word	0x0800441f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004408:	f7fe fe94 	bl	8003134 <HAL_RCC_GetPCLK2Freq>
 800440c:	6178      	str	r0, [r7, #20]
        break;
 800440e:	e00f      	b.n	8004430 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004410:	4b24      	ldr	r3, [pc, #144]	; (80044a4 <UART_SetConfig+0x418>)
 8004412:	617b      	str	r3, [r7, #20]
        break;
 8004414:	e00c      	b.n	8004430 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004416:	f7fe fdf9 	bl	800300c <HAL_RCC_GetSysClockFreq>
 800441a:	6178      	str	r0, [r7, #20]
        break;
 800441c:	e008      	b.n	8004430 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800441e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004422:	617b      	str	r3, [r7, #20]
        break;
 8004424:	e004      	b.n	8004430 <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 8004426:	2300      	movs	r3, #0
 8004428:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	76bb      	strb	r3, [r7, #26]
        break;
 800442e:	bf00      	nop
    }

    if (pclk != 0U)
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d020      	beq.n	8004478 <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	4a19      	ldr	r2, [pc, #100]	; (80044a0 <UART_SetConfig+0x414>)
 800443c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004440:	461a      	mov	r2, r3
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	fbb3 f2f2 	udiv	r2, r3, r2
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	085b      	lsrs	r3, r3, #1
 800444e:	441a      	add	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	fbb2 f3f3 	udiv	r3, r2, r3
 8004458:	b29b      	uxth	r3, r3
 800445a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	2b0f      	cmp	r3, #15
 8004460:	d908      	bls.n	8004474 <UART_SetConfig+0x3e8>
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004468:	d204      	bcs.n	8004474 <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	60da      	str	r2, [r3, #12]
 8004472:	e001      	b.n	8004478 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004494:	7ebb      	ldrb	r3, [r7, #26]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3720      	adds	r7, #32
 800449a:	46bd      	mov	sp, r7
 800449c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80044a0:	08007cd4 	.word	0x08007cd4
 80044a4:	00f42400 	.word	0x00f42400

080044a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00a      	beq.n	80044d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00a      	beq.n	80044f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00a      	beq.n	8004516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00a      	beq.n	800455a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455e:	f003 0320 	and.w	r3, r3, #32
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01a      	beq.n	80045be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045a6:	d10a      	bne.n	80045be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	605a      	str	r2, [r3, #4]
  }
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af02      	add	r7, sp, #8
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80045fc:	f7fc ff6a 	bl	80014d4 <HAL_GetTick>
 8004600:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0308 	and.w	r3, r3, #8
 800460c:	2b08      	cmp	r3, #8
 800460e:	d10e      	bne.n	800462e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004610:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f82c 	bl	800467c <UART_WaitOnFlagUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e022      	b.n	8004674 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b04      	cmp	r3, #4
 800463a:	d10e      	bne.n	800465a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800463c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f816 	bl	800467c <UART_WaitOnFlagUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e00c      	b.n	8004674 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2220      	movs	r2, #32
 800465e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	603b      	str	r3, [r7, #0]
 8004688:	4613      	mov	r3, r2
 800468a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800468c:	e062      	b.n	8004754 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004694:	d05e      	beq.n	8004754 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004696:	f7fc ff1d 	bl	80014d4 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d302      	bcc.n	80046ac <UART_WaitOnFlagUntilTimeout+0x30>
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d11d      	bne.n	80046e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046ba:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0201 	bic.w	r2, r2, #1
 80046ca:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2220      	movs	r2, #32
 80046d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2220      	movs	r2, #32
 80046d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e045      	b.n	8004774 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0304 	and.w	r3, r3, #4
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d02e      	beq.n	8004754 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004700:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004704:	d126      	bne.n	8004754 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800470e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800471e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689a      	ldr	r2, [r3, #8]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0201 	bic.w	r2, r2, #1
 800472e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2220      	movs	r2, #32
 8004734:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2220      	movs	r2, #32
 800473c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2220      	movs	r2, #32
 8004744:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e00f      	b.n	8004774 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	69da      	ldr	r2, [r3, #28]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	4013      	ands	r3, r2
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	429a      	cmp	r2, r3
 8004762:	bf0c      	ite	eq
 8004764:	2301      	moveq	r3, #1
 8004766:	2300      	movne	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	461a      	mov	r2, r3
 800476c:	79fb      	ldrb	r3, [r7, #7]
 800476e:	429a      	cmp	r2, r3
 8004770:	d08d      	beq.n	800468e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800478a:	2b21      	cmp	r3, #33	; 0x21
 800478c:	d12a      	bne.n	80047e4 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004794:	b29b      	uxth	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d110      	bne.n	80047bc <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047a8:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047b8:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80047ba:	e013      	b.n	80047e4 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c0:	781a      	ldrb	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80047d8:	b29b      	uxth	r3, r3
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29a      	uxth	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047fe:	2b21      	cmp	r3, #33	; 0x21
 8004800:	d12f      	bne.n	8004862 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004808:	b29b      	uxth	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d110      	bne.n	8004830 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800481c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800482c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800482e:	e018      	b.n	8004862 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004834:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004844:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800484a:	1c9a      	adds	r2, r3, #2
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004856:	b29b      	uxth	r3, r3
 8004858:	3b01      	subs	r3, #1
 800485a:	b29a      	uxth	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8004862:	bf00      	nop
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800486e:	b480      	push	{r7}
 8004870:	b085      	sub	sp, #20
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800487c:	2b21      	cmp	r3, #33	; 0x21
 800487e:	d13d      	bne.n	80048fc <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004886:	81fb      	strh	r3, [r7, #14]
 8004888:	e035      	b.n	80048f6 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004890:	b29b      	uxth	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d111      	bne.n	80048ba <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689a      	ldr	r2, [r3, #8]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80048a4:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048b4:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 80048b6:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 80048b8:	e020      	b.n	80048fc <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d013      	beq.n	80048f0 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048cc:	781a      	ldrb	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80048f0:	89fb      	ldrh	r3, [r7, #14]
 80048f2:	3b01      	subs	r3, #1
 80048f4:	81fb      	strh	r3, [r7, #14]
 80048f6:	89fb      	ldrh	r3, [r7, #14]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1c6      	bne.n	800488a <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 80048fc:	bf00      	nop
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004916:	2b21      	cmp	r3, #33	; 0x21
 8004918:	d142      	bne.n	80049a0 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004920:	81fb      	strh	r3, [r7, #14]
 8004922:	e03a      	b.n	800499a <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800492a:	b29b      	uxth	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d111      	bne.n	8004954 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800493e:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800494e:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8004950:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8004952:	e025      	b.n	80049a0 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495e:	2b00      	cmp	r3, #0
 8004960:	d018      	beq.n	8004994 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004966:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	461a      	mov	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004976:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800497c:	1c9a      	adds	r2, r3, #2
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004988:	b29b      	uxth	r3, r3
 800498a:	3b01      	subs	r3, #1
 800498c:	b29a      	uxth	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004994:	89fb      	ldrh	r3, [r7, #14]
 8004996:	3b01      	subs	r3, #1
 8004998:	81fb      	strh	r3, [r7, #14]
 800499a:	89fb      	ldrh	r3, [r7, #14]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1c1      	bne.n	8004924 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 80049a0:	bf00      	nop
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80049ba:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049c2:	2b22      	cmp	r3, #34	; 0x22
 80049c4:	d13b      	bne.n	8004a3e <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80049ce:	89bb      	ldrh	r3, [r7, #12]
 80049d0:	b2d9      	uxtb	r1, r3
 80049d2:	89fb      	ldrh	r3, [r7, #14]
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049da:	400a      	ands	r2, r1
 80049dc:	b2d2      	uxtb	r2, r2
 80049de:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d122      	bne.n	8004a4e <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a16:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 0201 	bic.w	r2, r2, #1
 8004a26:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7fb ffb4 	bl	80009a4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a3c:	e007      	b.n	8004a4e <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	699a      	ldr	r2, [r3, #24]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f042 0208 	orr.w	r2, r2, #8
 8004a4c:	619a      	str	r2, [r3, #24]
}
 8004a4e:	bf00      	nop
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b084      	sub	sp, #16
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004a64:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a6c:	2b22      	cmp	r3, #34	; 0x22
 8004a6e:	d13b      	bne.n	8004ae8 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004a7e:	89ba      	ldrh	r2, [r7, #12]
 8004a80:	89fb      	ldrh	r3, [r7, #14]
 8004a82:	4013      	ands	r3, r2
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8e:	1c9a      	adds	r2, r3, #2
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d122      	bne.n	8004af8 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ac0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0201 	bic.w	r2, r2, #1
 8004ad0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7fb ff5f 	bl	80009a4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ae6:	e007      	b.n	8004af8 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0208 	orr.w	r2, r2, #8
 8004af6:	619a      	str	r2, [r3, #24]
}
 8004af8:	bf00      	nop
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004b0e:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b16:	2b22      	cmp	r3, #34	; 0x22
 8004b18:	d168      	bne.n	8004bec <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004b20:	81fb      	strh	r3, [r7, #14]
 8004b22:	e03f      	b.n	8004ba4 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004b2c:	893b      	ldrh	r3, [r7, #8]
 8004b2e:	b2d9      	uxtb	r1, r3
 8004b30:	89bb      	ldrh	r3, [r7, #12]
 8004b32:	b2da      	uxtb	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b38:	400a      	ands	r2, r1
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	3b01      	subs	r3, #1
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d11b      	bne.n	8004b9e <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b74:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6812      	ldr	r2, [r2, #0]
 8004b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b84:	f023 0301 	bic.w	r3, r3, #1
 8004b88:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7fb ff03 	bl	80009a4 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8004b9e:	89fb      	ldrh	r3, [r7, #14]
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	81fb      	strh	r3, [r7, #14]
 8004ba4:	89fb      	ldrh	r3, [r7, #14]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1bc      	bne.n	8004b24 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004bb0:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004bb2:	897b      	ldrh	r3, [r7, #10]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d021      	beq.n	8004bfc <UART_RxISR_8BIT_FIFOEN+0xfc>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004bbe:	897a      	ldrh	r2, [r7, #10]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d21b      	bcs.n	8004bfc <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004bd2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a0b      	ldr	r2, [pc, #44]	; (8004c04 <UART_RxISR_8BIT_FIFOEN+0x104>)
 8004bd8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f042 0220 	orr.w	r2, r2, #32
 8004be8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004bea:	e007      	b.n	8004bfc <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699a      	ldr	r2, [r3, #24]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0208 	orr.w	r2, r2, #8
 8004bfa:	619a      	str	r2, [r3, #24]
}
 8004bfc:	bf00      	nop
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	080049ad 	.word	0x080049ad

08004c08 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004c16:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c1e:	2b22      	cmp	r3, #34	; 0x22
 8004c20:	d168      	bne.n	8004cf4 <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004c28:	82fb      	strh	r3, [r7, #22]
 8004c2a:	e03f      	b.n	8004cac <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c38:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8004c3a:	8a3a      	ldrh	r2, [r7, #16]
 8004c3c:	8abb      	ldrh	r3, [r7, #20]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4a:	1c9a      	adds	r2, r3, #2
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d11b      	bne.n	8004ca6 <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c7c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6812      	ldr	r2, [r2, #0]
 8004c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c8c:	f023 0301 	bic.w	r3, r3, #1
 8004c90:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7fb fe7f 	bl	80009a4 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8004ca6:	8afb      	ldrh	r3, [r7, #22]
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	82fb      	strh	r3, [r7, #22]
 8004cac:	8afb      	ldrh	r3, [r7, #22]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1bc      	bne.n	8004c2c <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004cb8:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004cba:	8a7b      	ldrh	r3, [r7, #18]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d021      	beq.n	8004d04 <UART_RxISR_16BIT_FIFOEN+0xfc>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004cc6:	8a7a      	ldrh	r2, [r7, #18]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d21b      	bcs.n	8004d04 <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689a      	ldr	r2, [r3, #8]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004cda:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a0b      	ldr	r2, [pc, #44]	; (8004d0c <UART_RxISR_16BIT_FIFOEN+0x104>)
 8004ce0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f042 0220 	orr.w	r2, r2, #32
 8004cf0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004cf2:	e007      	b.n	8004d04 <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699a      	ldr	r2, [r3, #24]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0208 	orr.w	r2, r2, #8
 8004d02:	619a      	str	r2, [r3, #24]
}
 8004d04:	bf00      	nop
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	08004a57 	.word	0x08004a57

08004d10 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_UARTEx_DisableFifoMode+0x16>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e027      	b.n	8004d76 <HAL_UARTEx_DisableFifoMode+0x66>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2224      	movs	r2, #36	; 0x24
 8004d32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0201 	bic.w	r2, r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d54:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b084      	sub	sp, #16
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d101      	bne.n	8004d9a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d96:	2302      	movs	r3, #2
 8004d98:	e02d      	b.n	8004df6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2224      	movs	r2, #36	; 0x24
 8004da6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0201 	bic.w	r2, r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f850 	bl	8004e7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2220      	movs	r2, #32
 8004de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b084      	sub	sp, #16
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d101      	bne.n	8004e16 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e12:	2302      	movs	r3, #2
 8004e14:	e02d      	b.n	8004e72 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2224      	movs	r2, #36	; 0x24
 8004e22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 0201 	bic.w	r2, r2, #1
 8004e3c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f812 	bl	8004e7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
	...

08004e7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b089      	sub	sp, #36	; 0x24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004e84:	4a2f      	ldr	r2, [pc, #188]	; (8004f44 <UARTEx_SetNbDataToProcess+0xc8>)
 8004e86:	f107 0314 	add.w	r3, r7, #20
 8004e8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e8e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004e92:	4a2d      	ldr	r2, [pc, #180]	; (8004f48 <UARTEx_SetNbDataToProcess+0xcc>)
 8004e94:	f107 030c 	add.w	r3, r7, #12
 8004e98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e9c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d108      	bne.n	8004eba <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004eb8:	e03d      	b.n	8004f36 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004eba:	2308      	movs	r3, #8
 8004ebc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004ebe:	2308      	movs	r3, #8
 8004ec0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	0e5b      	lsrs	r3, r3, #25
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	f003 0307 	and.w	r3, r3, #7
 8004ed0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	0f5b      	lsrs	r3, r3, #29
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004ee2:	7fbb      	ldrb	r3, [r7, #30]
 8004ee4:	7f3a      	ldrb	r2, [r7, #28]
 8004ee6:	f107 0120 	add.w	r1, r7, #32
 8004eea:	440a      	add	r2, r1
 8004eec:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004ef0:	fb02 f303 	mul.w	r3, r2, r3
 8004ef4:	7f3a      	ldrb	r2, [r7, #28]
 8004ef6:	f107 0120 	add.w	r1, r7, #32
 8004efa:	440a      	add	r2, r1
 8004efc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004f00:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004f0c:	7ffb      	ldrb	r3, [r7, #31]
 8004f0e:	7f7a      	ldrb	r2, [r7, #29]
 8004f10:	f107 0120 	add.w	r1, r7, #32
 8004f14:	440a      	add	r2, r1
 8004f16:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004f1a:	fb02 f303 	mul.w	r3, r2, r3
 8004f1e:	7f7a      	ldrb	r2, [r7, #29]
 8004f20:	f107 0120 	add.w	r1, r7, #32
 8004f24:	440a      	add	r2, r1
 8004f26:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004f2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004f36:	bf00      	nop
 8004f38:	3724      	adds	r7, #36	; 0x24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	08007998 	.word	0x08007998
 8004f48:	080079a0 	.word	0x080079a0

08004f4c <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8004f52:	1d3b      	adds	r3, r7, #4
 8004f54:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	f64f 4067 	movw	r0, #64615	; 0xfc67
 8004f60:	f000 f938 	bl	80051d4 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	330b      	adds	r3, #11
 8004f68:	78db      	ldrb	r3, [r3, #3]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b088      	sub	sp, #32
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	4603      	mov	r3, r0
 8004f7a:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8004f7c:	f107 030c 	add.w	r3, r7, #12
 8004f80:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 8004f82:	79fb      	ldrb	r3, [r7, #7]
 8004f84:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 8004f86:	f107 020c 	add.w	r2, r7, #12
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 8004f92:	f000 f91f 	bl	80051d4 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	330b      	adds	r3, #11
 8004f9a:	78db      	ldrb	r3, [r3, #3]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3720      	adds	r7, #32
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b08b      	sub	sp, #44	; 0x2c
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8004fac:	2300      	movs	r3, #0
 8004fae:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8004fcc:	4b4a      	ldr	r3, [pc, #296]	; (80050f8 <SHCI_GetWirelessFwInfo+0x154>)
 8004fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004fd4:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8004fde:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a44      	ldr	r2, [pc, #272]	; (80050fc <SHCI_GetWirelessFwInfo+0x158>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d10f      	bne.n	8005010 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	617b      	str	r3, [r7, #20]
 800500e:	e01a      	b.n	8005046 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */

    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005018:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800501c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	0e1b      	lsrs	r3, r3, #24
 800504a:	b2da      	uxtb	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	0c1b      	lsrs	r3, r3, #16
 8005054:	b2da      	uxtb	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	0a1b      	lsrs	r3, r3, #8
 800505e:	b2da      	uxtb	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	091b      	lsrs	r3, r3, #4
 8005068:	b2db      	uxtb	r3, r3
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	b2da      	uxtb	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	b2db      	uxtb	r3, r3
 8005078:	f003 030f 	and.w	r3, r3, #15
 800507c:	b2da      	uxtb	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	0e1b      	lsrs	r3, r3, #24
 8005086:	b2da      	uxtb	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	0c1b      	lsrs	r3, r3, #16
 8005090:	b2da      	uxtb	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	0a1b      	lsrs	r3, r3, #8
 800509a:	b2da      	uxtb	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80050a0:	6a3b      	ldr	r3, [r7, #32]
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	0e1b      	lsrs	r3, r3, #24
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	0c1b      	lsrs	r3, r3, #16
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	0a1b      	lsrs	r3, r3, #8
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	0e1b      	lsrs	r3, r3, #24
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	0c1b      	lsrs	r3, r3, #16
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	372c      	adds	r7, #44	; 0x2c
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	58004000 	.word	0x58004000
 80050fc:	a94656b9 	.word	0xa94656b9

08005100 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	4a08      	ldr	r2, [pc, #32]	; (8005130 <shci_init+0x30>)
 8005110:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8005112:	4a08      	ldr	r2, [pc, #32]	; (8005134 <shci_init+0x34>)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8005118:	4806      	ldr	r0, [pc, #24]	; (8005134 <shci_init+0x34>)
 800511a:	f000 f911 	bl	8005340 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4618      	mov	r0, r3
 8005124:	f000 f894 	bl	8005250 <TlInit>

  return;
 8005128:	bf00      	nop
}
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	20000218 	.word	0x20000218
 8005134:	200001f8 	.word	0x200001f8

08005138 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800513e:	4822      	ldr	r0, [pc, #136]	; (80051c8 <shci_user_evt_proc+0x90>)
 8005140:	f001 f956 	bl	80063f0 <LST_is_empty>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d12b      	bne.n	80051a2 <shci_user_evt_proc+0x6a>
 800514a:	4b20      	ldr	r3, [pc, #128]	; (80051cc <shci_user_evt_proc+0x94>)
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d027      	beq.n	80051a2 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8005152:	f107 030c 	add.w	r3, r7, #12
 8005156:	4619      	mov	r1, r3
 8005158:	481b      	ldr	r0, [pc, #108]	; (80051c8 <shci_user_evt_proc+0x90>)
 800515a:	f001 f9d0 	bl	80064fe <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800515e:	4b1c      	ldr	r3, [pc, #112]	; (80051d0 <shci_user_evt_proc+0x98>)
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00c      	beq.n	8005180 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800516a:	2301      	movs	r3, #1
 800516c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800516e:	4b18      	ldr	r3, [pc, #96]	; (80051d0 <shci_user_evt_proc+0x98>)
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	1d3a      	adds	r2, r7, #4
 8005174:	4610      	mov	r0, r2
 8005176:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8005178:	793a      	ldrb	r2, [r7, #4]
 800517a:	4b14      	ldr	r3, [pc, #80]	; (80051cc <shci_user_evt_proc+0x94>)
 800517c:	701a      	strb	r2, [r3, #0]
 800517e:	e002      	b.n	8005186 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005180:	4b12      	ldr	r3, [pc, #72]	; (80051cc <shci_user_evt_proc+0x94>)
 8005182:	2201      	movs	r2, #1
 8005184:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8005186:	4b11      	ldr	r3, [pc, #68]	; (80051cc <shci_user_evt_proc+0x94>)
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d004      	beq.n	8005198 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4618      	mov	r0, r3
 8005192:	f000 fa95 	bl	80056c0 <TL_MM_EvtDone>
 8005196:	e004      	b.n	80051a2 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4619      	mov	r1, r3
 800519c:	480a      	ldr	r0, [pc, #40]	; (80051c8 <shci_user_evt_proc+0x90>)
 800519e:	f001 f947 	bl	8006430 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80051a2:	4809      	ldr	r0, [pc, #36]	; (80051c8 <shci_user_evt_proc+0x90>)
 80051a4:	f001 f924 	bl	80063f0 <LST_is_empty>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d107      	bne.n	80051be <shci_user_evt_proc+0x86>
 80051ae:	4b07      	ldr	r3, [pc, #28]	; (80051cc <shci_user_evt_proc+0x94>)
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80051b6:	4804      	ldr	r0, [pc, #16]	; (80051c8 <shci_user_evt_proc+0x90>)
 80051b8:	f7fb fa72 	bl	80006a0 <shci_notify_asynch_evt>
  }


  return;
 80051bc:	bf00      	nop
 80051be:	bf00      	nop
}
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	200001b8 	.word	0x200001b8
 80051cc:	200001c8 	.word	0x200001c8
 80051d0:	200001f8 	.word	0x200001f8

080051d4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60ba      	str	r2, [r7, #8]
 80051dc:	607b      	str	r3, [r7, #4]
 80051de:	4603      	mov	r3, r0
 80051e0:	81fb      	strh	r3, [r7, #14]
 80051e2:	460b      	mov	r3, r1
 80051e4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80051e6:	2000      	movs	r0, #0
 80051e8:	f000 f864 	bl	80052b4 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80051ec:	4b16      	ldr	r3, [pc, #88]	; (8005248 <shci_send+0x74>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	89fa      	ldrh	r2, [r7, #14]
 80051f2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80051f6:	4b14      	ldr	r3, [pc, #80]	; (8005248 <shci_send+0x74>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	7b7a      	ldrb	r2, [r7, #13]
 80051fc:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80051fe:	4b12      	ldr	r3, [pc, #72]	; (8005248 <shci_send+0x74>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	330c      	adds	r3, #12
 8005204:	7b7a      	ldrb	r2, [r7, #13]
 8005206:	68b9      	ldr	r1, [r7, #8]
 8005208:	4618      	mov	r0, r3
 800520a:	f002 fb5d 	bl	80078c8 <memcpy>

  shciContext.io.Send(0,0);
 800520e:	4b0f      	ldr	r3, [pc, #60]	; (800524c <shci_send+0x78>)
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	2100      	movs	r1, #0
 8005214:	2000      	movs	r0, #0
 8005216:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8005218:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800521c:	f7fb fa57 	bl	80006ce <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f103 0008 	add.w	r0, r3, #8
 8005226:	4b08      	ldr	r3, [pc, #32]	; (8005248 <shci_send+0x74>)
 8005228:	6819      	ldr	r1, [r3, #0]
 800522a:	4b07      	ldr	r3, [pc, #28]	; (8005248 <shci_send+0x74>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	789b      	ldrb	r3, [r3, #2]
 8005230:	3303      	adds	r3, #3
 8005232:	461a      	mov	r2, r3
 8005234:	f002 fb48 	bl	80078c8 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005238:	2001      	movs	r0, #1
 800523a:	f000 f83b 	bl	80052b4 <Cmd_SetStatus>

  return;
 800523e:	bf00      	nop
}
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	200001c4 	.word	0x200001c4
 800524c:	200001f8 	.word	0x200001f8

08005250 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8005258:	4a10      	ldr	r2, [pc, #64]	; (800529c <TlInit+0x4c>)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800525e:	4810      	ldr	r0, [pc, #64]	; (80052a0 <TlInit+0x50>)
 8005260:	f001 f8b6 	bl	80063d0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005264:	2001      	movs	r0, #1
 8005266:	f000 f825 	bl	80052b4 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800526a:	4b0e      	ldr	r3, [pc, #56]	; (80052a4 <TlInit+0x54>)
 800526c:	2201      	movs	r2, #1
 800526e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8005270:	4b0d      	ldr	r3, [pc, #52]	; (80052a8 <TlInit+0x58>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00c      	beq.n	8005292 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800527c:	4b0b      	ldr	r3, [pc, #44]	; (80052ac <TlInit+0x5c>)
 800527e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8005280:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <TlInit+0x60>)
 8005282:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8005284:	4b08      	ldr	r3, [pc, #32]	; (80052a8 <TlInit+0x58>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f107 020c 	add.w	r2, r7, #12
 800528c:	4610      	mov	r0, r2
 800528e:	4798      	blx	r3
  }

  return;
 8005290:	bf00      	nop
 8005292:	bf00      	nop
}
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	200001c4 	.word	0x200001c4
 80052a0:	200001b8 	.word	0x200001b8
 80052a4:	200001c8 	.word	0x200001c8
 80052a8:	200001f8 	.word	0x200001f8
 80052ac:	08005305 	.word	0x08005305
 80052b0:	0800531d 	.word	0x0800531d

080052b4 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	4603      	mov	r3, r0
 80052bc:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80052be:	79fb      	ldrb	r3, [r7, #7]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10b      	bne.n	80052dc <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80052c4:	4b0d      	ldr	r3, [pc, #52]	; (80052fc <Cmd_SetStatus+0x48>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80052cc:	4b0b      	ldr	r3, [pc, #44]	; (80052fc <Cmd_SetStatus+0x48>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2000      	movs	r0, #0
 80052d2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80052d4:	4b0a      	ldr	r3, [pc, #40]	; (8005300 <Cmd_SetStatus+0x4c>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80052da:	e00b      	b.n	80052f4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80052dc:	4b08      	ldr	r3, [pc, #32]	; (8005300 <Cmd_SetStatus+0x4c>)
 80052de:	2201      	movs	r2, #1
 80052e0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80052e2:	4b06      	ldr	r3, [pc, #24]	; (80052fc <Cmd_SetStatus+0x48>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d004      	beq.n	80052f4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80052ea:	4b04      	ldr	r3, [pc, #16]	; (80052fc <Cmd_SetStatus+0x48>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2001      	movs	r0, #1
 80052f0:	4798      	blx	r3
  return;
 80052f2:	bf00      	nop
 80052f4:	bf00      	nop
}
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20000218 	.word	0x20000218
 8005300:	200001c0 	.word	0x200001c0

08005304 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800530c:	2000      	movs	r0, #0
 800530e:	f7fb f9d3 	bl	80006b8 <shci_cmd_resp_release>

  return;
 8005312:	bf00      	nop
}
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
	...

0800531c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8005324:	6879      	ldr	r1, [r7, #4]
 8005326:	4805      	ldr	r0, [pc, #20]	; (800533c <TlUserEvtReceived+0x20>)
 8005328:	f001 f8a6 	bl	8006478 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800532c:	4803      	ldr	r0, [pc, #12]	; (800533c <TlUserEvtReceived+0x20>)
 800532e:	f7fb f9b7 	bl	80006a0 <shci_notify_asynch_evt>

  return;
 8005332:	bf00      	nop
}
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	200001b8 	.word	0x200001b8

08005340 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a05      	ldr	r2, [pc, #20]	; (8005360 <shci_register_io_bus+0x20>)
 800534c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a04      	ldr	r2, [pc, #16]	; (8005364 <shci_register_io_bus+0x24>)
 8005352:	611a      	str	r2, [r3, #16]

  return;
 8005354:	bf00      	nop
}
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	0800545d 	.word	0x0800545d
 8005364:	080054b1 	.word	0x080054b1

08005368 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800536c:	f001 ff52 	bl	8007214 <HW_IPCC_Enable>

  return;
 8005370:	bf00      	nop
}
 8005372:	bd80      	pop	{r7, pc}

08005374 <TL_Init>:


void TL_Init( void )
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8005378:	4b10      	ldr	r3, [pc, #64]	; (80053bc <TL_Init+0x48>)
 800537a:	4a11      	ldr	r2, [pc, #68]	; (80053c0 <TL_Init+0x4c>)
 800537c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800537e:	4b0f      	ldr	r3, [pc, #60]	; (80053bc <TL_Init+0x48>)
 8005380:	4a10      	ldr	r2, [pc, #64]	; (80053c4 <TL_Init+0x50>)
 8005382:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8005384:	4b0d      	ldr	r3, [pc, #52]	; (80053bc <TL_Init+0x48>)
 8005386:	4a10      	ldr	r2, [pc, #64]	; (80053c8 <TL_Init+0x54>)
 8005388:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800538a:	4b0c      	ldr	r3, [pc, #48]	; (80053bc <TL_Init+0x48>)
 800538c:	4a0f      	ldr	r2, [pc, #60]	; (80053cc <TL_Init+0x58>)
 800538e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 8005390:	4b0a      	ldr	r3, [pc, #40]	; (80053bc <TL_Init+0x48>)
 8005392:	4a0f      	ldr	r2, [pc, #60]	; (80053d0 <TL_Init+0x5c>)
 8005394:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8005396:	4b09      	ldr	r3, [pc, #36]	; (80053bc <TL_Init+0x48>)
 8005398:	4a0e      	ldr	r2, [pc, #56]	; (80053d4 <TL_Init+0x60>)
 800539a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800539c:	4b07      	ldr	r3, [pc, #28]	; (80053bc <TL_Init+0x48>)
 800539e:	4a0e      	ldr	r2, [pc, #56]	; (80053d8 <TL_Init+0x64>)
 80053a0:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80053a2:	4b06      	ldr	r3, [pc, #24]	; (80053bc <TL_Init+0x48>)
 80053a4:	4a0d      	ldr	r2, [pc, #52]	; (80053dc <TL_Init+0x68>)
 80053a6:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80053a8:	4b04      	ldr	r3, [pc, #16]	; (80053bc <TL_Init+0x48>)
 80053aa:	4a0d      	ldr	r2, [pc, #52]	; (80053e0 <TL_Init+0x6c>)
 80053ac:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80053ae:	4b03      	ldr	r3, [pc, #12]	; (80053bc <TL_Init+0x48>)
 80053b0:	4a0c      	ldr	r2, [pc, #48]	; (80053e4 <TL_Init+0x70>)
 80053b2:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80053b4:	f001 ff42 	bl	800723c <HW_IPCC_Init>

  return;
 80053b8:	bf00      	nop
}
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	20030000 	.word	0x20030000
 80053c0:	20030028 	.word	0x20030028
 80053c4:	20030048 	.word	0x20030048
 80053c8:	20030058 	.word	0x20030058
 80053cc:	20030064 	.word	0x20030064
 80053d0:	2003006c 	.word	0x2003006c
 80053d4:	20030074 	.word	0x20030074
 80053d8:	2003007c 	.word	0x2003007c
 80053dc:	20030098 	.word	0x20030098
 80053e0:	2003009c 	.word	0x2003009c
 80053e4:	200300a8 	.word	0x200300a8

080053e8 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80053ee:	e01c      	b.n	800542a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80053f0:	1d3b      	adds	r3, r7, #4
 80053f2:	4619      	mov	r1, r3
 80053f4:	4812      	ldr	r0, [pc, #72]	; (8005440 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80053f6:	f001 f882 	bl	80064fe <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	7a5b      	ldrb	r3, [r3, #9]
 80053fe:	2b0f      	cmp	r3, #15
 8005400:	d003      	beq.n	800540a <HW_IPCC_BLE_RxEvtNot+0x22>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	7a5b      	ldrb	r3, [r3, #9]
 8005406:	2b0e      	cmp	r3, #14
 8005408:	d105      	bne.n	8005416 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4619      	mov	r1, r3
 800540e:	2002      	movs	r0, #2
 8005410:	f000 f9ba 	bl	8005788 <OutputDbgTrace>
 8005414:	e004      	b.n	8005420 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4619      	mov	r1, r3
 800541a:	2003      	movs	r0, #3
 800541c:	f000 f9b4 	bl	8005788 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8005420:	4b08      	ldr	r3, [pc, #32]	; (8005444 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	4610      	mov	r0, r2
 8005428:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800542a:	4805      	ldr	r0, [pc, #20]	; (8005440 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800542c:	f000 ffe0 	bl	80063f0 <LST_is_empty>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0dc      	beq.n	80053f0 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8005436:	bf00      	nop
}
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	200300c4 	.word	0x200300c4
 8005444:	20000224 	.word	0x20000224

08005448 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800544c:	4b02      	ldr	r3, [pc, #8]	; (8005458 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4798      	blx	r3

  return;
 8005452:	bf00      	nop
}
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	20000228 	.word	0x20000228

0800545c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8005468:	480d      	ldr	r0, [pc, #52]	; (80054a0 <TL_SYS_Init+0x44>)
 800546a:	f000 ffb1 	bl	80063d0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800546e:	4b0d      	ldr	r3, [pc, #52]	; (80054a4 <TL_SYS_Init+0x48>)
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4a08      	ldr	r2, [pc, #32]	; (80054a0 <TL_SYS_Init+0x44>)
 8005480:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8005482:	f001 ff09 	bl	8007298 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a07      	ldr	r2, [pc, #28]	; (80054a8 <TL_SYS_Init+0x4c>)
 800548c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	4a06      	ldr	r2, [pc, #24]	; (80054ac <TL_SYS_Init+0x50>)
 8005494:	6013      	str	r3, [r2, #0]

  return 0;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	200300cc 	.word	0x200300cc
 80054a4:	20030000 	.word	0x20030000
 80054a8:	2000022c 	.word	0x2000022c
 80054ac:	20000230 	.word	0x20000230

080054b0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	460b      	mov	r3, r1
 80054ba:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80054bc:	4b09      	ldr	r3, [pc, #36]	; (80054e4 <TL_SYS_SendCmd+0x34>)
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2210      	movs	r2, #16
 80054c4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80054c6:	4b07      	ldr	r3, [pc, #28]	; (80054e4 <TL_SYS_SendCmd+0x34>)
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4619      	mov	r1, r3
 80054ce:	2004      	movs	r0, #4
 80054d0:	f000 f95a 	bl	8005788 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80054d4:	f001 feea 	bl	80072ac <HW_IPCC_SYS_SendCmd>

  return 0;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	20030000 	.word	0x20030000

080054e8 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80054ec:	4b07      	ldr	r3, [pc, #28]	; (800550c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4619      	mov	r1, r3
 80054f4:	2005      	movs	r0, #5
 80054f6:	f000 f947 	bl	8005788 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80054fa:	4b05      	ldr	r3, [pc, #20]	; (8005510 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a03      	ldr	r2, [pc, #12]	; (800550c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8005500:	68d2      	ldr	r2, [r2, #12]
 8005502:	6812      	ldr	r2, [r2, #0]
 8005504:	4610      	mov	r0, r2
 8005506:	4798      	blx	r3

  return;
 8005508:	bf00      	nop
}
 800550a:	bd80      	pop	{r7, pc}
 800550c:	20030000 	.word	0x20030000
 8005510:	2000022c 	.word	0x2000022c

08005514 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800551a:	e00e      	b.n	800553a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800551c:	1d3b      	adds	r3, r7, #4
 800551e:	4619      	mov	r1, r3
 8005520:	480b      	ldr	r0, [pc, #44]	; (8005550 <HW_IPCC_SYS_EvtNot+0x3c>)
 8005522:	f000 ffec 	bl	80064fe <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4619      	mov	r1, r3
 800552a:	2006      	movs	r0, #6
 800552c:	f000 f92c 	bl	8005788 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8005530:	4b08      	ldr	r3, [pc, #32]	; (8005554 <HW_IPCC_SYS_EvtNot+0x40>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	4610      	mov	r0, r2
 8005538:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800553a:	4805      	ldr	r0, [pc, #20]	; (8005550 <HW_IPCC_SYS_EvtNot+0x3c>)
 800553c:	f000 ff58 	bl	80063f0 <LST_is_empty>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0ea      	beq.n	800551c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8005546:	bf00      	nop
}
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	200300cc 	.word	0x200300cc
 8005554:	20000230 	.word	0x20000230

08005558 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 8005560:	4b0a      	ldr	r3, [pc, #40]	; (800558c <TL_THREAD_Init+0x34>)
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689a      	ldr	r2, [r3, #8]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 800557e:	f001 febb 	bl	80072f8 <HW_IPCC_THREAD_Init>

  return;
 8005582:	bf00      	nop
}
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	20030000 	.word	0x20030000

08005590 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 8005594:	4b04      	ldr	r3, [pc, #16]	; (80055a8 <TL_OT_SendCmd+0x18>)
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	2208      	movs	r2, #8
 800559c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 800559e:	f001 feb9 	bl	8007314 <HW_IPCC_OT_SendCmd>

  return;
 80055a2:	bf00      	nop
}
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20030000 	.word	0x20030000

080055ac <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 80055b0:	4b04      	ldr	r3, [pc, #16]	; (80055c4 <TL_CLI_SendCmd+0x18>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	220a      	movs	r2, #10
 80055b8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 80055ba:	f001 feb9 	bl	8007330 <HW_IPCC_CLI_SendCmd>

  return;
 80055be:	bf00      	nop
}
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	20030000 	.word	0x20030000

080055c8 <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80055cc:	4b04      	ldr	r3, [pc, #16]	; (80055e0 <TL_THREAD_SendAck+0x18>)
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	220d      	movs	r2, #13
 80055d4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 80055d6:	f001 feb5 	bl	8007344 <HW_IPCC_THREAD_SendAck>

  return;
 80055da:	bf00      	nop
}
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20030000 	.word	0x20030000

080055e4 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80055e8:	4b04      	ldr	r3, [pc, #16]	; (80055fc <TL_THREAD_CliSendAck+0x18>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	220d      	movs	r2, #13
 80055f0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 80055f2:	f001 feb5 	bl	8007360 <HW_IPCC_THREAD_CliSendAck>

  return;
 80055f6:	bf00      	nop
}
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	20030000 	.word	0x20030000

08005600 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 8005604:	4b03      	ldr	r3, [pc, #12]	; (8005614 <HW_IPCC_OT_CmdEvtNot+0x14>)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	4618      	mov	r0, r3
 800560c:	f001 fb14 	bl	8006c38 <TL_OT_CmdEvtReceived>

  return;
 8005610:	bf00      	nop
}
 8005612:	bd80      	pop	{r7, pc}
 8005614:	20030000 	.word	0x20030000

08005618 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 800561c:	4b03      	ldr	r3, [pc, #12]	; (800562c <HW_IPCC_THREAD_EvtNot+0x14>)
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4618      	mov	r0, r3
 8005624:	f001 fb12 	bl	8006c4c <TL_THREAD_NotReceived>

  return;
 8005628:	bf00      	nop
}
 800562a:	bd80      	pop	{r7, pc}
 800562c:	20030000 	.word	0x20030000

08005630 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 8005634:	4b03      	ldr	r3, [pc, #12]	; (8005644 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	4618      	mov	r0, r3
 800563c:	f001 fbd6 	bl	8006dec <TL_THREAD_CliNotReceived>

  return;
 8005640:	bf00      	nop
}
 8005642:	bd80      	pop	{r7, pc}
 8005644:	20030000 	.word	0x20030000

08005648 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8005650:	4817      	ldr	r0, [pc, #92]	; (80056b0 <TL_MM_Init+0x68>)
 8005652:	f000 febd 	bl	80063d0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8005656:	4817      	ldr	r0, [pc, #92]	; (80056b4 <TL_MM_Init+0x6c>)
 8005658:	f000 feba 	bl	80063d0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800565c:	4b16      	ldr	r3, [pc, #88]	; (80056b8 <TL_MM_Init+0x70>)
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	4a16      	ldr	r2, [pc, #88]	; (80056bc <TL_MM_Init+0x74>)
 8005662:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8005664:	4b15      	ldr	r3, [pc, #84]	; (80056bc <TL_MM_Init+0x74>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6892      	ldr	r2, [r2, #8]
 800566c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800566e:	4b13      	ldr	r3, [pc, #76]	; (80056bc <TL_MM_Init+0x74>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	68d2      	ldr	r2, [r2, #12]
 8005676:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8005678:	4b10      	ldr	r3, [pc, #64]	; (80056bc <TL_MM_Init+0x74>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a0c      	ldr	r2, [pc, #48]	; (80056b0 <TL_MM_Init+0x68>)
 800567e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8005680:	4b0e      	ldr	r3, [pc, #56]	; (80056bc <TL_MM_Init+0x74>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6812      	ldr	r2, [r2, #0]
 8005688:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800568a:	4b0c      	ldr	r3, [pc, #48]	; (80056bc <TL_MM_Init+0x74>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	6852      	ldr	r2, [r2, #4]
 8005692:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8005694:	4b09      	ldr	r3, [pc, #36]	; (80056bc <TL_MM_Init+0x74>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6912      	ldr	r2, [r2, #16]
 800569c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800569e:	4b07      	ldr	r3, [pc, #28]	; (80056bc <TL_MM_Init+0x74>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6952      	ldr	r2, [r2, #20]
 80056a6:	619a      	str	r2, [r3, #24]

  return;
 80056a8:	bf00      	nop
}
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	200300b4 	.word	0x200300b4
 80056b4:	2000021c 	.word	0x2000021c
 80056b8:	20030000 	.word	0x20030000
 80056bc:	20000234 	.word	0x20000234

080056c0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80056c8:	6879      	ldr	r1, [r7, #4]
 80056ca:	4807      	ldr	r0, [pc, #28]	; (80056e8 <TL_MM_EvtDone+0x28>)
 80056cc:	f000 fed4 	bl	8006478 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80056d0:	6879      	ldr	r1, [r7, #4]
 80056d2:	2000      	movs	r0, #0
 80056d4:	f000 f858 	bl	8005788 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80056d8:	4804      	ldr	r0, [pc, #16]	; (80056ec <TL_MM_EvtDone+0x2c>)
 80056da:	f001 fe73 	bl	80073c4 <HW_IPCC_MM_SendFreeBuf>

  return;
 80056de:	bf00      	nop
}
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	2000021c 	.word	0x2000021c
 80056ec:	080056f1 	.word	0x080056f1

080056f0 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80056f6:	e00c      	b.n	8005712 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80056f8:	1d3b      	adds	r3, r7, #4
 80056fa:	4619      	mov	r1, r3
 80056fc:	480a      	ldr	r0, [pc, #40]	; (8005728 <SendFreeBuf+0x38>)
 80056fe:	f000 fefe 	bl	80064fe <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8005702:	4b0a      	ldr	r3, [pc, #40]	; (800572c <SendFreeBuf+0x3c>)
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	4611      	mov	r1, r2
 800570c:	4618      	mov	r0, r3
 800570e:	f000 feb3 	bl	8006478 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005712:	4805      	ldr	r0, [pc, #20]	; (8005728 <SendFreeBuf+0x38>)
 8005714:	f000 fe6c 	bl	80063f0 <LST_is_empty>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0ec      	beq.n	80056f8 <SendFreeBuf+0x8>
  }

  return;
 800571e:	bf00      	nop
}
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	2000021c 	.word	0x2000021c
 800572c:	20030000 	.word	0x20030000

08005730 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8005734:	4805      	ldr	r0, [pc, #20]	; (800574c <TL_TRACES_Init+0x1c>)
 8005736:	f000 fe4b 	bl	80063d0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800573a:	4b05      	ldr	r3, [pc, #20]	; (8005750 <TL_TRACES_Init+0x20>)
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	4a03      	ldr	r2, [pc, #12]	; (800574c <TL_TRACES_Init+0x1c>)
 8005740:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8005742:	f001 fe75 	bl	8007430 <HW_IPCC_TRACES_Init>

  return;
 8005746:	bf00      	nop
}
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	200300bc 	.word	0x200300bc
 8005750:	20030000 	.word	0x20030000

08005754 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800575a:	e008      	b.n	800576e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800575c:	1d3b      	adds	r3, r7, #4
 800575e:	4619      	mov	r1, r3
 8005760:	4808      	ldr	r0, [pc, #32]	; (8005784 <HW_IPCC_TRACES_EvtNot+0x30>)
 8005762:	f000 fecc 	bl	80064fe <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4618      	mov	r0, r3
 800576a:	f7fa ffbb 	bl	80006e4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800576e:	4805      	ldr	r0, [pc, #20]	; (8005784 <HW_IPCC_TRACES_EvtNot+0x30>)
 8005770:	f000 fe3e 	bl	80063f0 <LST_is_empty>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d0f0      	beq.n	800575c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800577a:	bf00      	nop
}
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	200300bc 	.word	0x200300bc

08005788 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	4603      	mov	r3, r0
 8005790:	6039      	str	r1, [r7, #0]
 8005792:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8005794:	79fb      	ldrb	r3, [r7, #7]
 8005796:	2b06      	cmp	r3, #6
 8005798:	d849      	bhi.n	800582e <OutputDbgTrace+0xa6>
 800579a:	a201      	add	r2, pc, #4	; (adr r2, 80057a0 <OutputDbgTrace+0x18>)
 800579c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a0:	080057bd 	.word	0x080057bd
 80057a4:	080057df 	.word	0x080057df
 80057a8:	080057e5 	.word	0x080057e5
 80057ac:	080057ff 	.word	0x080057ff
 80057b0:	0800580b 	.word	0x0800580b
 80057b4:	08005811 	.word	0x08005811
 80057b8:	08005823 	.word	0x08005823
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	7a5b      	ldrb	r3, [r3, #9]
 80057c4:	2b0f      	cmp	r3, #15
 80057c6:	d004      	beq.n	80057d2 <OutputDbgTrace+0x4a>
 80057c8:	2bff      	cmp	r3, #255	; 0xff
 80057ca:	d004      	beq.n	80057d6 <OutputDbgTrace+0x4e>
 80057cc:	2b0e      	cmp	r3, #14
 80057ce:	d004      	beq.n	80057da <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80057d0:	e004      	b.n	80057dc <OutputDbgTrace+0x54>
          break;
 80057d2:	bf00      	nop
 80057d4:	e02c      	b.n	8005830 <OutputDbgTrace+0xa8>
          break;
 80057d6:	bf00      	nop
 80057d8:	e02a      	b.n	8005830 <OutputDbgTrace+0xa8>
          break;
 80057da:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80057dc:	e028      	b.n	8005830 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80057e2:	e025      	b.n	8005830 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	7a5b      	ldrb	r3, [r3, #9]
 80057ec:	2b0e      	cmp	r3, #14
 80057ee:	d002      	beq.n	80057f6 <OutputDbgTrace+0x6e>
 80057f0:	2b0f      	cmp	r3, #15
 80057f2:	d002      	beq.n	80057fa <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80057f4:	e002      	b.n	80057fc <OutputDbgTrace+0x74>
          break;
 80057f6:	bf00      	nop
 80057f8:	e01a      	b.n	8005830 <OutputDbgTrace+0xa8>
          break;
 80057fa:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80057fc:	e018      	b.n	8005830 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	7a5b      	ldrb	r3, [r3, #9]
 8005806:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8005808:	e012      	b.n	8005830 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800580e:	e00f      	b.n	8005830 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	7a5b      	ldrb	r3, [r3, #9]
 8005818:	2b0e      	cmp	r3, #14
 800581a:	d000      	beq.n	800581e <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800581c:	e000      	b.n	8005820 <OutputDbgTrace+0x98>
          break;
 800581e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8005820:	e006      	b.n	8005830 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	7a5b      	ldrb	r3, [r3, #9]
 800582a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800582c:	e000      	b.n	8005830 <OutputDbgTrace+0xa8>

    default:
      break;
 800582e:	bf00      	nop
  }

  return;
 8005830:	bf00      	nop
}
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 8005842:	f001 fa13 	bl	8006c6c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8005846:	f001 f9af 	bl	8006ba8 <THREAD_Get_OTCmdPayloadBuffer>
 800584a:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f062 026b 	orn	r2, r2, #107	; 0x6b
 8005854:	701a      	strb	r2, [r3, #0]
 8005856:	2200      	movs	r2, #0
 8005858:	705a      	strb	r2, [r3, #1]
 800585a:	2200      	movs	r2, #0
 800585c:	709a      	strb	r2, [r3, #2]
 800585e:	2200      	movs	r2, #0
 8005860:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	711a      	strb	r2, [r3, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	715a      	strb	r2, [r3, #5]
 800586c:	2200      	movs	r2, #0
 800586e:	719a      	strb	r2, [r3, #6]
 8005870:	2200      	movs	r2, #0
 8005872:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8005874:	f001 f9bc 	bl	8006bf0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8005878:	f001 f9a2 	bl	8006bc0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800587c:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b084      	sub	sp, #16
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8005892:	f001 f9eb 	bl	8006c6c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8005896:	f001 f987 	bl	8006ba8 <THREAD_Get_OTCmdPayloadBuffer>
 800589a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f062 0269 	orn	r2, r2, #105	; 0x69
 80058a4:	701a      	strb	r2, [r3, #0]
 80058a6:	2200      	movs	r2, #0
 80058a8:	705a      	strb	r2, [r3, #1]
 80058aa:	2200      	movs	r2, #0
 80058ac:	709a      	strb	r2, [r3, #2]
 80058ae:	2200      	movs	r2, #0
 80058b0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	711a      	strb	r2, [r3, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	715a      	strb	r2, [r3, #5]
 80058bc:	2200      	movs	r2, #0
 80058be:	719a      	strb	r2, [r3, #6]
 80058c0:	2200      	movs	r2, #0
 80058c2:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 80058c4:	f001 f994 	bl	8006bf0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80058c8:	f001 f97a 	bl	8006bc0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80058cc:	60f8      	str	r0, [r7, #12]
}
 80058ce:	bf00      	nop
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
	...

080058d8 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 80058e4:	f001 f9c2 	bl	8006c6c <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 80058e8:	4a15      	ldr	r2, [pc, #84]	; (8005940 <otSetStateChangedCallback+0x68>)
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80058ee:	f001 f95b 	bl	8006ba8 <THREAD_Get_OTCmdPayloadBuffer>
 80058f2:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f062 0268 	orn	r2, r2, #104	; 0x68
 80058fc:	701a      	strb	r2, [r3, #0]
 80058fe:	2200      	movs	r2, #0
 8005900:	705a      	strb	r2, [r3, #1]
 8005902:	2200      	movs	r2, #0
 8005904:	709a      	strb	r2, [r3, #2]
 8005906:	2200      	movs	r2, #0
 8005908:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2200      	movs	r2, #0
 800590e:	f042 0201 	orr.w	r2, r2, #1
 8005912:	711a      	strb	r2, [r3, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	715a      	strb	r2, [r3, #5]
 8005918:	2200      	movs	r2, #0
 800591a:	719a      	strb	r2, [r3, #6]
 800591c:	2200      	movs	r2, #0
 800591e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8005926:	f001 f963 	bl	8006bf0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800592a:	f001 f949 	bl	8006bc0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800592e:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	b2db      	uxtb	r3, r3
}
 8005936:	4618      	mov	r0, r3
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	20000238 	.word	0x20000238

08005944 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800594c:	f001 f98e 	bl	8006c6c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8005950:	f001 f92a 	bl	8006ba8 <THREAD_Get_OTCmdPayloadBuffer>
 8005954:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f062 0264 	orn	r2, r2, #100	; 0x64
 800595e:	701a      	strb	r2, [r3, #0]
 8005960:	2200      	movs	r2, #0
 8005962:	705a      	strb	r2, [r3, #1]
 8005964:	2200      	movs	r2, #0
 8005966:	709a      	strb	r2, [r3, #2]
 8005968:	2200      	movs	r2, #0
 800596a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	711a      	strb	r2, [r3, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	715a      	strb	r2, [r3, #5]
 8005976:	2200      	movs	r2, #0
 8005978:	719a      	strb	r2, [r3, #6]
 800597a:	2200      	movs	r2, #0
 800597c:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800597e:	f001 f937 	bl	8006bf0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8005982:	f001 f91d 	bl	8006bc0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8005986:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	b2db      	uxtb	r3, r3
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b084      	sub	sp, #16
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	460b      	mov	r3, r1
 80059a0:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 80059a2:	f001 f963 	bl	8006c6c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80059a6:	f001 f8ff 	bl	8006ba8 <THREAD_Get_OTCmdPayloadBuffer>
 80059aa:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80059b4:	701a      	strb	r2, [r3, #0]
 80059b6:	2200      	movs	r2, #0
 80059b8:	705a      	strb	r2, [r3, #1]
 80059ba:	2200      	movs	r2, #0
 80059bc:	709a      	strb	r2, [r3, #2]
 80059be:	2200      	movs	r2, #0
 80059c0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f042 0201 	orr.w	r2, r2, #1
 80059ca:	711a      	strb	r2, [r3, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	715a      	strb	r2, [r3, #5]
 80059d0:	2200      	movs	r2, #0
 80059d2:	719a      	strb	r2, [r3, #6]
 80059d4:	2200      	movs	r2, #0
 80059d6:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 80059d8:	78fa      	ldrb	r2, [r7, #3]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80059de:	f001 f907 	bl	8006bf0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80059e2:	f001 f8ed 	bl	8006bc0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80059e6:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	b2db      	uxtb	r3, r3
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <otIp6AddressFromString>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b084      	sub	sp, #16
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8005a00:	f001 f934 	bl	8006c6c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8005a04:	f001 f8d0 	bl	8006ba8 <THREAD_Get_OTCmdPayloadBuffer>
 8005a08:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8005a12:	701a      	strb	r2, [r3, #0]
 8005a14:	2200      	movs	r2, #0
 8005a16:	705a      	strb	r2, [r3, #1]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	709a      	strb	r2, [r3, #2]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f042 0202 	orr.w	r2, r2, #2
 8005a28:	711a      	strb	r2, [r3, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	715a      	strb	r2, [r3, #5]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	719a      	strb	r2, [r3, #6]
 8005a32:	2200      	movs	r2, #0
 8005a34:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 8005a42:	f001 f8d5 	bl	8006bf0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8005a46:	f001 f8bb 	bl	8006bc0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8005a4a:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	b2db      	uxtb	r3, r3
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b084      	sub	sp, #16
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
 8005a62:	460b      	mov	r3, r1
 8005a64:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8005a66:	f001 f901 	bl	8006c6c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8005a6a:	f001 f89d 	bl	8006ba8 <THREAD_Get_OTCmdPayloadBuffer>
 8005a6e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f042 0208 	orr.w	r2, r2, #8
 8005a78:	701a      	strb	r2, [r3, #0]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	705a      	strb	r2, [r3, #1]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	709a      	strb	r2, [r3, #2]
 8005a82:	2200      	movs	r2, #0
 8005a84:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f042 0201 	orr.w	r2, r2, #1
 8005a8e:	711a      	strb	r2, [r3, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	715a      	strb	r2, [r3, #5]
 8005a94:	2200      	movs	r2, #0
 8005a96:	719a      	strb	r2, [r3, #6]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 8005a9c:	78fa      	ldrb	r2, [r7, #3]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8005aa2:	f001 f8a5 	bl	8006bf0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8005aa6:	f001 f88b 	bl	8006bc0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8005aaa:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	b2db      	uxtb	r3, r3
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b084      	sub	sp, #16
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 8005ac6:	f001 f8d1 	bl	8006c6c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8005aca:	f001 f86d 	bl	8006ba8 <THREAD_Get_OTCmdPayloadBuffer>
 8005ace:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f042 020f 	orr.w	r2, r2, #15
 8005ad8:	701a      	strb	r2, [r3, #0]
 8005ada:	2200      	movs	r2, #0
 8005adc:	705a      	strb	r2, [r3, #1]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	709a      	strb	r2, [r3, #2]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f042 0201 	orr.w	r2, r2, #1
 8005aee:	711a      	strb	r2, [r3, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	715a      	strb	r2, [r3, #5]
 8005af4:	2200      	movs	r2, #0
 8005af6:	719a      	strb	r2, [r3, #6]
 8005af8:	2200      	movs	r2, #0
 8005afa:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 8005afc:	887a      	ldrh	r2, [r7, #2]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8005b02:	f001 f875 	bl	8006bf0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8005b06:	f001 f85b 	bl	8006bc0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8005b0a:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	b2db      	uxtb	r3, r3
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b084      	sub	sp, #16
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8005b22:	f001 f8a3 	bl	8006c6c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8005b26:	f001 f83f 	bl	8006ba8 <THREAD_Get_OTCmdPayloadBuffer>
 8005b2a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f062 0246 	orn	r2, r2, #70	; 0x46
 8005b34:	701a      	strb	r2, [r3, #0]
 8005b36:	2200      	movs	r2, #0
 8005b38:	705a      	strb	r2, [r3, #1]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	709a      	strb	r2, [r3, #2]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f042 0201 	orr.w	r2, r2, #1
 8005b4a:	711a      	strb	r2, [r3, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	715a      	strb	r2, [r3, #5]
 8005b50:	2200      	movs	r2, #0
 8005b52:	719a      	strb	r2, [r3, #6]
 8005b54:	2200      	movs	r2, #0
 8005b56:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8005b5e:	f001 f847 	bl	8006bf0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8005b62:	f001 f82d 	bl	8006bc0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8005b66:	60f8      	str	r0, [r7, #12]
}
 8005b68:	bf00      	nop
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <otMessageGetLength>:

uint16_t otMessageGetLength(otMessage *aMessage)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8005b78:	f001 f878 	bl	8006c6c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8005b7c:	f001 f814 	bl	8006ba8 <THREAD_Get_OTCmdPayloadBuffer>
 8005b80:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_LENGTH;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f062 0245 	orn	r2, r2, #69	; 0x45
 8005b8a:	701a      	strb	r2, [r3, #0]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	705a      	strb	r2, [r3, #1]
 8005b90:	2200      	movs	r2, #0
 8005b92:	709a      	strb	r2, [r3, #2]
 8005b94:	2200      	movs	r2, #0
 8005b96:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f042 0201 	orr.w	r2, r2, #1
 8005ba0:	711a      	strb	r2, [r3, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	715a      	strb	r2, [r3, #5]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	719a      	strb	r2, [r3, #6]
 8005baa:	2200      	movs	r2, #0
 8005bac:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8005bb4:	f001 f81c 	bl	8006bf0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8005bb8:	f001 f802 	bl	8006bc0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8005bbc:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	b29b      	uxth	r3, r3
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8005bd4:	f001 f84a 	bl	8006c6c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8005bd8:	f000 ffe6 	bl	8006ba8 <THREAD_Get_OTCmdPayloadBuffer>
 8005bdc:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f062 0243 	orn	r2, r2, #67	; 0x43
 8005be6:	701a      	strb	r2, [r3, #0]
 8005be8:	2200      	movs	r2, #0
 8005bea:	705a      	strb	r2, [r3, #1]
 8005bec:	2200      	movs	r2, #0
 8005bee:	709a      	strb	r2, [r3, #2]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f042 0201 	orr.w	r2, r2, #1
 8005bfc:	711a      	strb	r2, [r3, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	715a      	strb	r2, [r3, #5]
 8005c02:	2200      	movs	r2, #0
 8005c04:	719a      	strb	r2, [r3, #6]
 8005c06:	2200      	movs	r2, #0
 8005c08:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8005c10:	f000 ffee 	bl	8006bf0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8005c14:	f000 ffd4 	bl	8006bc0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8005c18:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	b29b      	uxth	r3, r3
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	4613      	mov	r3, r2
 8005c34:	80fb      	strh	r3, [r7, #6]
    Pre_OtCmdProcessing();
 8005c36:	f001 f819 	bl	8006c6c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8005c3a:	f000 ffb5 	bl	8006ba8 <THREAD_Get_OTCmdPayloadBuffer>
 8005c3e:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f062 023e 	orn	r2, r2, #62	; 0x3e
 8005c48:	701a      	strb	r2, [r3, #0]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	705a      	strb	r2, [r3, #1]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	709a      	strb	r2, [r3, #2]
 8005c52:	2200      	movs	r2, #0
 8005c54:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f042 0203 	orr.w	r2, r2, #3
 8005c5e:	711a      	strb	r2, [r3, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	715a      	strb	r2, [r3, #5]
 8005c64:	2200      	movs	r2, #0
 8005c66:	719a      	strb	r2, [r3, #6]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 8005c78:	88fa      	ldrh	r2, [r7, #6]
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8005c7e:	f000 ffb7 	bl	8006bf0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8005c82:	f000 ff9d 	bl	8006bc0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8005c86:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	b2db      	uxtb	r3, r3
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b086      	sub	sp, #24
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	60f8      	str	r0, [r7, #12]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	817b      	strh	r3, [r7, #10]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	813b      	strh	r3, [r7, #8]
    Pre_OtCmdProcessing();
 8005caa:	f000 ffdf 	bl	8006c6c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8005cae:	f000 ff7b 	bl	8006ba8 <THREAD_Get_OTCmdPayloadBuffer>
 8005cb2:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f062 023d 	orn	r2, r2, #61	; 0x3d
 8005cbc:	701a      	strb	r2, [r3, #0]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	705a      	strb	r2, [r3, #1]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	709a      	strb	r2, [r3, #2]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=4;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f042 0204 	orr.w	r2, r2, #4
 8005cd2:	711a      	strb	r2, [r3, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	715a      	strb	r2, [r3, #5]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	719a      	strb	r2, [r3, #6]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 8005ce6:	897a      	ldrh	r2, [r7, #10]
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 8005cf2:	893a      	ldrh	r2, [r7, #8]
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 8005cf8:	f000 ff7a 	bl	8006bf0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8005cfc:	f000 ff60 	bl	8006bc0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8005d00:	6178      	str	r0, [r7, #20]
    return (int)p_ot_req->Data[0];
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	689b      	ldr	r3, [r3, #8]
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3718      	adds	r7, #24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
	...

08005d10 <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 8005d10:	b5b0      	push	{r4, r5, r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	71fb      	strb	r3, [r7, #7]


    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 8005d1a:	f000 ff5d 	bl	8006bd8 <THREAD_Get_NotificationPayloadBuffer>
 8005d1e:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3b01      	subs	r3, #1
 8005d26:	2b17      	cmp	r3, #23
 8005d28:	f200 81c3 	bhi.w	80060b2 <OpenThread_CallBack_Processing+0x3a2>
 8005d2c:	a201      	add	r2, pc, #4	; (adr r2, 8005d34 <OpenThread_CallBack_Processing+0x24>)
 8005d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d32:	bf00      	nop
 8005d34:	08005d95 	.word	0x08005d95
 8005d38:	08005db1 	.word	0x08005db1
 8005d3c:	08005e15 	.word	0x08005e15
 8005d40:	08005e5d 	.word	0x08005e5d
 8005d44:	08005e69 	.word	0x08005e69
 8005d48:	08005e87 	.word	0x08005e87
 8005d4c:	08005ea5 	.word	0x08005ea5
 8005d50:	08005ec3 	.word	0x08005ec3
 8005d54:	08005ee1 	.word	0x08005ee1
 8005d58:	08005eff 	.word	0x08005eff
 8005d5c:	08005f21 	.word	0x08005f21
 8005d60:	08005f3f 	.word	0x08005f3f
 8005d64:	080060b3 	.word	0x080060b3
 8005d68:	08005f65 	.word	0x08005f65
 8005d6c:	08005f99 	.word	0x08005f99
 8005d70:	08005fc1 	.word	0x08005fc1
 8005d74:	08005fdf 	.word	0x08005fdf
 8005d78:	0800604d 	.word	0x0800604d
 8005d7c:	08006075 	.word	0x08006075
 8005d80:	080060b3 	.word	0x080060b3
 8005d84:	08006093 	.word	0x08006093
 8005d88:	080060b3 	.word	0x080060b3
 8005d8c:	080060b3 	.word	0x080060b3
 8005d90:	08005ded 	.word	0x08005ded
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 8005d94:	4b9b      	ldr	r3, [pc, #620]	; (8006004 <OpenThread_CallBack_Processing+0x2f4>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 818d 	beq.w	80060b8 <OpenThread_CallBack_Processing+0x3a8>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 8005d9e:	4b99      	ldr	r3, [pc, #612]	; (8006004 <OpenThread_CallBack_Processing+0x2f4>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 8005daa:	4611      	mov	r1, r2
 8005dac:	4798      	blx	r3
        }
        break;
 8005dae:	e183      	b.n	80060b8 <OpenThread_CallBack_Processing+0x3a8>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        mySTCoapContext = (STCoapSpecificRequestContextType * ) p_notification->Data[0];
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	461a      	mov	r2, r3
 8005db6:	4b94      	ldr	r3, [pc, #592]	; (8006008 <OpenThread_CallBack_Processing+0x2f8>)
 8005db8:	601a      	str	r2, [r3, #0]
        coapRequestHandlerCb = mySTCoapContext->mHandler;
 8005dba:	4b93      	ldr	r3, [pc, #588]	; (8006008 <OpenThread_CallBack_Processing+0x2f8>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	4a92      	ldr	r2, [pc, #584]	; (800600c <OpenThread_CallBack_Processing+0x2fc>)
 8005dc2:	6013      	str	r3, [r2, #0]
        if (coapRequestHandlerCb != NULL)
 8005dc4:	4b91      	ldr	r3, [pc, #580]	; (800600c <OpenThread_CallBack_Processing+0x2fc>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 8177 	beq.w	80060bc <OpenThread_CallBack_Processing+0x3ac>
        {
            coapRequestHandlerCb(mySTCoapContext->mContext,
 8005dce:	4b8f      	ldr	r3, [pc, #572]	; (800600c <OpenThread_CallBack_Processing+0x2fc>)
 8005dd0:	681c      	ldr	r4, [r3, #0]
 8005dd2:	4b8d      	ldr	r3, [pc, #564]	; (8006008 <OpenThread_CallBack_Processing+0x2f8>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6818      	ldr	r0, [r3, #0]
                                (otCoapHeader *) p_notification->Data[1],
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 8005ddc:	4619      	mov	r1, r3
                                (otMessage *) p_notification->Data[2],
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	691b      	ldr	r3, [r3, #16]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 8005de2:	461a      	mov	r2, r3
                                (otMessageInfo *) p_notification->Data[3]);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	695b      	ldr	r3, [r3, #20]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 8005de8:	47a0      	blx	r4
        }
        break;
 8005dea:	e167      	b.n	80060bc <OpenThread_CallBack_Processing+0x3ac>
    case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
        if (defaultCoapRequestHandlerCb != NULL)
 8005dec:	4b88      	ldr	r3, [pc, #544]	; (8006010 <OpenThread_CallBack_Processing+0x300>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 8165 	beq.w	80060c0 <OpenThread_CallBack_Processing+0x3b0>
        {
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8005df6:	4b86      	ldr	r3, [pc, #536]	; (8006010 <OpenThread_CallBack_Processing+0x300>)
 8005df8:	681c      	ldr	r4, [r3, #0]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	4618      	mov	r0, r3
                    (otCoapHeader *) p_notification->Data[1],
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8005e04:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	691b      	ldr	r3, [r3, #16]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8005e0a:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3]);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	695b      	ldr	r3, [r3, #20]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 8005e10:	47a0      	blx	r4
        }
        break;
 8005e12:	e155      	b.n	80060c0 <OpenThread_CallBack_Processing+0x3b0>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER: 
        mySTCoapResponseContext = (STCoapSpecificResponseContextType * ) p_notification->Data[0];
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	461a      	mov	r2, r3
 8005e1a:	4b7e      	ldr	r3, [pc, #504]	; (8006014 <OpenThread_CallBack_Processing+0x304>)
 8005e1c:	601a      	str	r2, [r3, #0]
        coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 8005e1e:	4b7d      	ldr	r3, [pc, #500]	; (8006014 <OpenThread_CallBack_Processing+0x304>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	4a7c      	ldr	r2, [pc, #496]	; (8006018 <OpenThread_CallBack_Processing+0x308>)
 8005e26:	6013      	str	r3, [r2, #0]
        if (coapResponseHandlerCb != NULL)
 8005e28:	4b7b      	ldr	r3, [pc, #492]	; (8006018 <OpenThread_CallBack_Processing+0x308>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 8149 	beq.w	80060c4 <OpenThread_CallBack_Processing+0x3b4>
        {
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 8005e32:	4b79      	ldr	r3, [pc, #484]	; (8006018 <OpenThread_CallBack_Processing+0x308>)
 8005e34:	681c      	ldr	r4, [r3, #0]
 8005e36:	4b77      	ldr	r3, [pc, #476]	; (8006014 <OpenThread_CallBack_Processing+0x304>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6818      	ldr	r0, [r3, #0]
                    (otCoapHeader *) p_notification->Data[1],
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	68db      	ldr	r3, [r3, #12]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 8005e40:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 8005e46:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3],
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 8005e4c:	461d      	mov	r5, r3
                    (otError) p_notification->Data[4]);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	462b      	mov	r3, r5
 8005e58:	47a0      	blx	r4
        }
        break;
 8005e5a:	e133      	b.n	80060c4 <OpenThread_CallBack_Processing+0x3b4>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 8005e5c:	2001      	movs	r0, #1
 8005e5e:	f7ff f888 	bl	8004f72 <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 8005e62:	f7fb fcc4 	bl	80017ee <HAL_NVIC_SystemReset>
        break;
 8005e66:	e14c      	b.n	8006102 <OpenThread_CallBack_Processing+0x3f2>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 8005e68:	4b6c      	ldr	r3, [pc, #432]	; (800601c <OpenThread_CallBack_Processing+0x30c>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 812b 	beq.w	80060c8 <OpenThread_CallBack_Processing+0x3b8>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 8005e72:	4b6a      	ldr	r3, [pc, #424]	; (800601c <OpenThread_CallBack_Processing+0x30c>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	6892      	ldr	r2, [r2, #8]
 8005e7a:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 8005e80:	4611      	mov	r1, r2
 8005e82:	4798      	blx	r3
        }
        break;
 8005e84:	e120      	b.n	80060c8 <OpenThread_CallBack_Processing+0x3b8>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 8005e86:	4b66      	ldr	r3, [pc, #408]	; (8006020 <OpenThread_CallBack_Processing+0x310>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f000 811e 	beq.w	80060cc <OpenThread_CallBack_Processing+0x3bc>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 8005e90:	4b63      	ldr	r3, [pc, #396]	; (8006020 <OpenThread_CallBack_Processing+0x310>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	6892      	ldr	r2, [r2, #8]
 8005e98:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	4798      	blx	r3
        }
        break;
 8005ea2:	e113      	b.n	80060cc <OpenThread_CallBack_Processing+0x3bc>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 8005ea4:	4b5f      	ldr	r3, [pc, #380]	; (8006024 <OpenThread_CallBack_Processing+0x314>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 8111 	beq.w	80060d0 <OpenThread_CallBack_Processing+0x3c0>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 8005eae:	4b5d      	ldr	r3, [pc, #372]	; (8006024 <OpenThread_CallBack_Processing+0x314>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	6892      	ldr	r2, [r2, #8]
 8005eb6:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 8005ebc:	4611      	mov	r1, r2
 8005ebe:	4798      	blx	r3
        }
        break;
 8005ec0:	e106      	b.n	80060d0 <OpenThread_CallBack_Processing+0x3c0>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 8005ec2:	4b59      	ldr	r3, [pc, #356]	; (8006028 <OpenThread_CallBack_Processing+0x318>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f000 8104 	beq.w	80060d4 <OpenThread_CallBack_Processing+0x3c4>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 8005ecc:	4b56      	ldr	r3, [pc, #344]	; (8006028 <OpenThread_CallBack_Processing+0x318>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	6892      	ldr	r2, [r2, #8]
 8005ed4:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8005ed6:	683a      	ldr	r2, [r7, #0]
 8005ed8:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 8005eda:	4611      	mov	r1, r2
 8005edc:	4798      	blx	r3
        }
        break;
 8005ede:	e0f9      	b.n	80060d4 <OpenThread_CallBack_Processing+0x3c4>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 8005ee0:	4b52      	ldr	r3, [pc, #328]	; (800602c <OpenThread_CallBack_Processing+0x31c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 80f7 	beq.w	80060d8 <OpenThread_CallBack_Processing+0x3c8>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 8005eea:	4b50      	ldr	r3, [pc, #320]	; (800602c <OpenThread_CallBack_Processing+0x31c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	6892      	ldr	r2, [r2, #8]
 8005ef2:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 8005ef8:	4611      	mov	r1, r2
 8005efa:	4798      	blx	r3
        }
        break;
 8005efc:	e0ec      	b.n	80060d8 <OpenThread_CallBack_Processing+0x3c8>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 8005efe:	4b4c      	ldr	r3, [pc, #304]	; (8006030 <OpenThread_CallBack_Processing+0x320>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 80ea 	beq.w	80060dc <OpenThread_CallBack_Processing+0x3cc>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 8005f08:	4b49      	ldr	r3, [pc, #292]	; (8006030 <OpenThread_CallBack_Processing+0x320>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	6892      	ldr	r2, [r2, #8]
 8005f10:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 8005f16:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 8005f18:	683a      	ldr	r2, [r7, #0]
 8005f1a:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 8005f1c:	4798      	blx	r3
        }
        break;
 8005f1e:	e0dd      	b.n	80060dc <OpenThread_CallBack_Processing+0x3cc>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 8005f20:	4b44      	ldr	r3, [pc, #272]	; (8006034 <OpenThread_CallBack_Processing+0x324>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 80db 	beq.w	80060e0 <OpenThread_CallBack_Processing+0x3d0>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 8005f2a:	4b42      	ldr	r3, [pc, #264]	; (8006034 <OpenThread_CallBack_Processing+0x324>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	6892      	ldr	r2, [r2, #8]
 8005f32:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 8005f38:	4611      	mov	r1, r2
 8005f3a:	4798      	blx	r3
        }
        break;
 8005f3c:	e0d0      	b.n	80060e0 <OpenThread_CallBack_Processing+0x3d0>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 8005f3e:	4b3e      	ldr	r3, [pc, #248]	; (8006038 <OpenThread_CallBack_Processing+0x328>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f000 80ce 	beq.w	80060e4 <OpenThread_CallBack_Processing+0x3d4>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8005f48:	4b3b      	ldr	r3, [pc, #236]	; (8006038 <OpenThread_CallBack_Processing+0x328>)
 8005f4a:	681c      	ldr	r4, [r3, #0]
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8005f54:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8005f5a:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8005f60:	47a0      	blx	r4
        }
        break;
 8005f62:	e0bf      	b.n	80060e4 <OpenThread_CallBack_Processing+0x3d4>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 8005f64:	4b35      	ldr	r3, [pc, #212]	; (800603c <OpenThread_CallBack_Processing+0x32c>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 80bd 	beq.w	80060e8 <OpenThread_CallBack_Processing+0x3d8>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8005f6e:	4b33      	ldr	r3, [pc, #204]	; (800603c <OpenThread_CallBack_Processing+0x32c>)
 8005f70:	681c      	ldr	r4, [r3, #0]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8005f7c:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8005f82:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	4613      	mov	r3, r2
 8005f92:	462a      	mov	r2, r5
 8005f94:	47a0      	blx	r4
        }
        break;
 8005f96:	e0a7      	b.n	80060e8 <OpenThread_CallBack_Processing+0x3d8>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 8005f98:	4b29      	ldr	r3, [pc, #164]	; (8006040 <OpenThread_CallBack_Processing+0x330>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 80a5 	beq.w	80060ec <OpenThread_CallBack_Processing+0x3dc>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8005fa2:	4b27      	ldr	r3, [pc, #156]	; (8006040 <OpenThread_CallBack_Processing+0x330>)
 8005fa4:	681c      	ldr	r4, [r3, #0]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8005fb0:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8005fb6:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8005fbc:	47a0      	blx	r4
        }
        break;
 8005fbe:	e095      	b.n	80060ec <OpenThread_CallBack_Processing+0x3dc>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 8005fc0:	4b20      	ldr	r3, [pc, #128]	; (8006044 <OpenThread_CallBack_Processing+0x334>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 8093 	beq.w	80060f0 <OpenThread_CallBack_Processing+0x3e0>
        {
            otJoinerCb((otError) p_notification->Data[0],
 8005fca:	4b1e      	ldr	r3, [pc, #120]	; (8006044 <OpenThread_CallBack_Processing+0x334>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	6892      	ldr	r2, [r2, #8]
 8005fd2:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 8005fd8:	4611      	mov	r1, r2
 8005fda:	4798      	blx	r3
        }
        break;
 8005fdc:	e088      	b.n	80060f0 <OpenThread_CallBack_Processing+0x3e0>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 8005fde:	4b1a      	ldr	r3, [pc, #104]	; (8006048 <OpenThread_CallBack_Processing+0x338>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f000 8086 	beq.w	80060f4 <OpenThread_CallBack_Processing+0x3e4>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8005fe8:	4b17      	ldr	r3, [pc, #92]	; (8006048 <OpenThread_CallBack_Processing+0x338>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	6892      	ldr	r2, [r2, #8]
 8005ff0:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8005ff6:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8005ffc:	b2d2      	uxtb	r2, r2
 8005ffe:	4798      	blx	r3
        }
        break;
 8006000:	e078      	b.n	80060f4 <OpenThread_CallBack_Processing+0x3e4>
 8006002:	bf00      	nop
 8006004:	20000238 	.word	0x20000238
 8006008:	20000660 	.word	0x20000660
 800600c:	20000278 	.word	0x20000278
 8006010:	2000027c 	.word	0x2000027c
 8006014:	2000065c 	.word	0x2000065c
 8006018:	20000280 	.word	0x20000280
 800601c:	20000240 	.word	0x20000240
 8006020:	2000023c 	.word	0x2000023c
 8006024:	20000244 	.word	0x20000244
 8006028:	20000248 	.word	0x20000248
 800602c:	2000024c 	.word	0x2000024c
 8006030:	20000250 	.word	0x20000250
 8006034:	20000254 	.word	0x20000254
 8006038:	20000258 	.word	0x20000258
 800603c:	2000025c 	.word	0x2000025c
 8006040:	20000260 	.word	0x20000260
 8006044:	20000264 	.word	0x20000264
 8006048:	20000268 	.word	0x20000268
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 800604c:	4b30      	ldr	r3, [pc, #192]	; (8006110 <OpenThread_CallBack_Processing+0x400>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d051      	beq.n	80060f8 <OpenThread_CallBack_Processing+0x3e8>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8006054:	4b2e      	ldr	r3, [pc, #184]	; (8006110 <OpenThread_CallBack_Processing+0x400>)
 8006056:	681c      	ldr	r4, [r3, #0]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8006062:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8006068:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800606e:	b2db      	uxtb	r3, r3
 8006070:	47a0      	blx	r4
        }
        break;
 8006072:	e041      	b.n	80060f8 <OpenThread_CallBack_Processing+0x3e8>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 8006074:	4b27      	ldr	r3, [pc, #156]	; (8006114 <OpenThread_CallBack_Processing+0x404>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d03f      	beq.n	80060fc <OpenThread_CallBack_Processing+0x3ec>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800607c:	4b25      	ldr	r3, [pc, #148]	; (8006114 <OpenThread_CallBack_Processing+0x404>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	6892      	ldr	r2, [r2, #8]
 8006084:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800608a:	b252      	sxtb	r2, r2
 800608c:	4611      	mov	r1, r2
 800608e:	4798      	blx	r3
        }
        break;
 8006090:	e034      	b.n	80060fc <OpenThread_CallBack_Processing+0x3ec>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 8006092:	4b21      	ldr	r3, [pc, #132]	; (8006118 <OpenThread_CallBack_Processing+0x408>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d032      	beq.n	8006100 <OpenThread_CallBack_Processing+0x3f0>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 800609a:	4b1f      	ldr	r3, [pc, #124]	; (8006118 <OpenThread_CallBack_Processing+0x408>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	683a      	ldr	r2, [r7, #0]
 80060a0:	6892      	ldr	r2, [r2, #8]
 80060a2:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 80060a8:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 80060aa:	683a      	ldr	r2, [r7, #0]
 80060ac:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 80060ae:	4798      	blx	r3
        }
        break;
 80060b0:	e026      	b.n	8006100 <OpenThread_CallBack_Processing+0x3f0>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	71fb      	strb	r3, [r7, #7]
        break;
 80060b6:	e024      	b.n	8006102 <OpenThread_CallBack_Processing+0x3f2>
        break;
 80060b8:	bf00      	nop
 80060ba:	e022      	b.n	8006102 <OpenThread_CallBack_Processing+0x3f2>
        break;
 80060bc:	bf00      	nop
 80060be:	e020      	b.n	8006102 <OpenThread_CallBack_Processing+0x3f2>
        break;
 80060c0:	bf00      	nop
 80060c2:	e01e      	b.n	8006102 <OpenThread_CallBack_Processing+0x3f2>
        break;
 80060c4:	bf00      	nop
 80060c6:	e01c      	b.n	8006102 <OpenThread_CallBack_Processing+0x3f2>
        break;
 80060c8:	bf00      	nop
 80060ca:	e01a      	b.n	8006102 <OpenThread_CallBack_Processing+0x3f2>
        break;
 80060cc:	bf00      	nop
 80060ce:	e018      	b.n	8006102 <OpenThread_CallBack_Processing+0x3f2>
        break;
 80060d0:	bf00      	nop
 80060d2:	e016      	b.n	8006102 <OpenThread_CallBack_Processing+0x3f2>
        break;
 80060d4:	bf00      	nop
 80060d6:	e014      	b.n	8006102 <OpenThread_CallBack_Processing+0x3f2>
        break;
 80060d8:	bf00      	nop
 80060da:	e012      	b.n	8006102 <OpenThread_CallBack_Processing+0x3f2>
        break;
 80060dc:	bf00      	nop
 80060de:	e010      	b.n	8006102 <OpenThread_CallBack_Processing+0x3f2>
        break;
 80060e0:	bf00      	nop
 80060e2:	e00e      	b.n	8006102 <OpenThread_CallBack_Processing+0x3f2>
        break;
 80060e4:	bf00      	nop
 80060e6:	e00c      	b.n	8006102 <OpenThread_CallBack_Processing+0x3f2>
        break;
 80060e8:	bf00      	nop
 80060ea:	e00a      	b.n	8006102 <OpenThread_CallBack_Processing+0x3f2>
        break;
 80060ec:	bf00      	nop
 80060ee:	e008      	b.n	8006102 <OpenThread_CallBack_Processing+0x3f2>
        break;
 80060f0:	bf00      	nop
 80060f2:	e006      	b.n	8006102 <OpenThread_CallBack_Processing+0x3f2>
        break;
 80060f4:	bf00      	nop
 80060f6:	e004      	b.n	8006102 <OpenThread_CallBack_Processing+0x3f2>
        break;
 80060f8:	bf00      	nop
 80060fa:	e002      	b.n	8006102 <OpenThread_CallBack_Processing+0x3f2>
        break;
 80060fc:	bf00      	nop
 80060fe:	e000      	b.n	8006102 <OpenThread_CallBack_Processing+0x3f2>
        break;
 8006100:	bf00      	nop
    }

    TL_THREAD_SendAck();
 8006102:	f7ff fa61 	bl	80055c8 <TL_THREAD_SendAck>
    return status;
 8006106:	79fb      	ldrb	r3, [r7, #7]

}
 8006108:	4618      	mov	r0, r3
 800610a:	3708      	adds	r7, #8
 800610c:	46bd      	mov	sp, r7
 800610e:	bdb0      	pop	{r4, r5, r7, pc}
 8006110:	2000026c 	.word	0x2000026c
 8006114:	20000270 	.word	0x20000270
 8006118:	20000274 	.word	0x20000274

0800611c <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	460b      	mov	r3, r1
 8006126:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8006128:	f000 fda0 	bl	8006c6c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800612c:	f000 fd3c 	bl	8006ba8 <THREAD_Get_OTCmdPayloadBuffer>
 8006130:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 800613a:	701a      	strb	r2, [r3, #0]
 800613c:	2200      	movs	r2, #0
 800613e:	705a      	strb	r2, [r3, #1]
 8006140:	2200      	movs	r2, #0
 8006142:	709a      	strb	r2, [r3, #2]
 8006144:	2200      	movs	r2, #0
 8006146:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	f042 0201 	orr.w	r2, r2, #1
 8006150:	711a      	strb	r2, [r3, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	715a      	strb	r2, [r3, #5]
 8006156:	2200      	movs	r2, #0
 8006158:	719a      	strb	r2, [r3, #6]
 800615a:	2200      	movs	r2, #0
 800615c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800615e:	78fa      	ldrb	r2, [r7, #3]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8006164:	f000 fd44 	bl	8006bf0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8006168:	f000 fd2a 	bl	8006bc0 <THREAD_Get_OTCmdRspPayloadBuffer>
 800616c:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	b2db      	uxtb	r3, r3
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8006184:	f000 fd72 	bl	8006c6c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8006188:	f000 fd0e 	bl	8006ba8 <THREAD_Get_OTCmdPayloadBuffer>
 800618c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 8006196:	701a      	strb	r2, [r3, #0]
 8006198:	2200      	movs	r2, #0
 800619a:	705a      	strb	r2, [r3, #1]
 800619c:	2200      	movs	r2, #0
 800619e:	709a      	strb	r2, [r3, #2]
 80061a0:	2200      	movs	r2, #0
 80061a2:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	711a      	strb	r2, [r3, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	715a      	strb	r2, [r3, #5]
 80061ae:	2200      	movs	r2, #0
 80061b0:	719a      	strb	r2, [r3, #6]
 80061b2:	2200      	movs	r2, #0
 80061b4:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 80061b6:	f000 fd1b 	bl	8006bf0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80061ba:	f000 fd01 	bl	8006bc0 <THREAD_Get_OTCmdRspPayloadBuffer>
 80061be:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	b2db      	uxtb	r3, r3
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <otUdpNewMessage>:

extern otUdpReceive otUdpReceiveCb;


otMessage *otUdpNewMessage(otInstance *aInstance, bool aLinkSecurityEnabled)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	460b      	mov	r3, r1
 80061d8:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 80061da:	f000 fd47 	bl	8006c6c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80061de:	f000 fce3 	bl	8006ba8 <THREAD_Get_OTCmdPayloadBuffer>
 80061e2:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_UDP_NEW_MESSAGE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f042 0215 	orr.w	r2, r2, #21
 80061ec:	701a      	strb	r2, [r3, #0]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f042 0201 	orr.w	r2, r2, #1
 80061f4:	705a      	strb	r2, [r3, #1]
 80061f6:	2200      	movs	r2, #0
 80061f8:	709a      	strb	r2, [r3, #2]
 80061fa:	2200      	movs	r2, #0
 80061fc:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	f042 0201 	orr.w	r2, r2, #1
 8006206:	711a      	strb	r2, [r3, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	715a      	strb	r2, [r3, #5]
 800620c:	2200      	movs	r2, #0
 800620e:	719a      	strb	r2, [r3, #6]
 8006210:	2200      	movs	r2, #0
 8006212:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aLinkSecurityEnabled;
 8006214:	78fa      	ldrb	r2, [r7, #3]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800621a:	f000 fce9 	bl	8006bf0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800621e:	f000 fccf 	bl	8006bc0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8006222:	60f8      	str	r0, [r7, #12]
    return (otMessage*)p_ot_req->Data[0];
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	689b      	ldr	r3, [r3, #8]
}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <otUdpOpen>:

otError otUdpOpen(otInstance *aInstance, otUdpSocket *aSocket, otUdpReceive aCallback, void *aContext)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
 800623c:	603b      	str	r3, [r7, #0]
    Pre_OtCmdProcessing();
 800623e:	f000 fd15 	bl	8006c6c <Pre_OtCmdProcessing>
    otUdpReceiveCb = aCallback;
 8006242:	4a18      	ldr	r2, [pc, #96]	; (80062a4 <otUdpOpen+0x74>)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8006248:	f000 fcae 	bl	8006ba8 <THREAD_Get_OTCmdPayloadBuffer>
 800624c:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_UDP_OPEN;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2200      	movs	r2, #0
 8006252:	f042 0216 	orr.w	r2, r2, #22
 8006256:	701a      	strb	r2, [r3, #0]
 8006258:	2200      	movs	r2, #0
 800625a:	f042 0201 	orr.w	r2, r2, #1
 800625e:	705a      	strb	r2, [r3, #1]
 8006260:	2200      	movs	r2, #0
 8006262:	709a      	strb	r2, [r3, #2]
 8006264:	2200      	movs	r2, #0
 8006266:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	2200      	movs	r2, #0
 800626c:	f042 0202 	orr.w	r2, r2, #2
 8006270:	711a      	strb	r2, [r3, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	715a      	strb	r2, [r3, #5]
 8006276:	2200      	movs	r2, #0
 8006278:	719a      	strb	r2, [r3, #6]
 800627a:	2200      	movs	r2, #0
 800627c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aSocket;
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t)aContext;
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800628a:	f000 fcb1 	bl	8006bf0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800628e:	f000 fc97 	bl	8006bc0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8006292:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	b2db      	uxtb	r3, r3
}
 800629a:	4618      	mov	r0, r3
 800629c:	3718      	adds	r7, #24
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	20000274 	.word	0x20000274

080062a8 <otUdpBind>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otUdpBind(otUdpSocket *aSocket, otSockAddr *aSockName)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 80062b2:	f000 fcdb 	bl	8006c6c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80062b6:	f000 fc77 	bl	8006ba8 <THREAD_Get_OTCmdPayloadBuffer>
 80062ba:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_UDP_BIND;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	f042 0218 	orr.w	r2, r2, #24
 80062c4:	701a      	strb	r2, [r3, #0]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f042 0201 	orr.w	r2, r2, #1
 80062cc:	705a      	strb	r2, [r3, #1]
 80062ce:	2200      	movs	r2, #0
 80062d0:	709a      	strb	r2, [r3, #2]
 80062d2:	2200      	movs	r2, #0
 80062d4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	f042 0202 	orr.w	r2, r2, #2
 80062de:	711a      	strb	r2, [r3, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	715a      	strb	r2, [r3, #5]
 80062e4:	2200      	movs	r2, #0
 80062e6:	719a      	strb	r2, [r3, #6]
 80062e8:	2200      	movs	r2, #0
 80062ea:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aSocket;
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t)aSockName;
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 80062f8:	f000 fc7a 	bl	8006bf0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80062fc:	f000 fc60 	bl	8006bc0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8006300:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	b2db      	uxtb	r3, r3
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <otUdpSend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otUdpSend(otUdpSocket *aSocket, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 800631c:	f000 fca6 	bl	8006c6c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8006320:	f000 fc42 	bl	8006ba8 <THREAD_Get_OTCmdPayloadBuffer>
 8006324:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_UDP_SEND;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2200      	movs	r2, #0
 800632a:	f042 021a 	orr.w	r2, r2, #26
 800632e:	701a      	strb	r2, [r3, #0]
 8006330:	2200      	movs	r2, #0
 8006332:	f042 0201 	orr.w	r2, r2, #1
 8006336:	705a      	strb	r2, [r3, #1]
 8006338:	2200      	movs	r2, #0
 800633a:	709a      	strb	r2, [r3, #2]
 800633c:	2200      	movs	r2, #0
 800633e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	2200      	movs	r2, #0
 8006344:	f042 0203 	orr.w	r2, r2, #3
 8006348:	711a      	strb	r2, [r3, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	715a      	strb	r2, [r3, #5]
 800634e:	2200      	movs	r2, #0
 8006350:	719a      	strb	r2, [r3, #6]
 8006352:	2200      	movs	r2, #0
 8006354:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aSocket;
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t)aMessage;
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t)aMessageInfo;
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8006368:	f000 fc42 	bl	8006bf0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800636c:	f000 fc28 	bl	8006bc0 <THREAD_Get_OTCmdRspPayloadBuffer>
 8006370:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	b2db      	uxtb	r3, r3
}
 8006378:	4618      	mov	r0, r3
 800637a:	3718      	adds	r7, #24
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	4603      	mov	r3, r0
 8006388:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800638a:	4b0f      	ldr	r3, [pc, #60]	; (80063c8 <OTP_Read+0x48>)
 800638c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800638e:	e002      	b.n	8006396 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	3b08      	subs	r3, #8
 8006394:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	3307      	adds	r3, #7
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	79fa      	ldrb	r2, [r7, #7]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d003      	beq.n	80063aa <OTP_Read+0x2a>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4a09      	ldr	r2, [pc, #36]	; (80063cc <OTP_Read+0x4c>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d1f2      	bne.n	8006390 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	3307      	adds	r3, #7
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	79fa      	ldrb	r2, [r7, #7]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d001      	beq.n	80063ba <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80063b6:	2300      	movs	r3, #0
 80063b8:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80063ba:	68fb      	ldr	r3, [r7, #12]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	1fff73f8 	.word	0x1fff73f8
 80063cc:	1fff7000 	.word	0x1fff7000

080063d0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	605a      	str	r2, [r3, #4]
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063f8:	f3ef 8310 	mrs	r3, PRIMASK
 80063fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80063fe:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006400:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006402:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	429a      	cmp	r2, r3
 800640c:	d102      	bne.n	8006414 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800640e:	2301      	movs	r3, #1
 8006410:	75fb      	strb	r3, [r7, #23]
 8006412:	e001      	b.n	8006418 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 8006414:	2300      	movs	r3, #0
 8006416:	75fb      	strb	r3, [r7, #23]
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8006422:	7dfb      	ldrb	r3, [r7, #23]
}
 8006424:	4618      	mov	r0, r3
 8006426:	371c      	adds	r7, #28
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8006430:	b480      	push	{r7}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800643a:	f3ef 8310 	mrs	r3, PRIMASK
 800643e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006440:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006442:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006444:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	605a      	str	r2, [r3, #4]
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800646c:	bf00      	nop
 800646e:	371c      	adds	r7, #28
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006482:	f3ef 8310 	mrs	r3, PRIMASK
 8006486:	60fb      	str	r3, [r7, #12]
  return(result);
 8006488:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800648a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800648c:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685a      	ldr	r2, [r3, #4]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	601a      	str	r2, [r3, #0]
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80064b4:	bf00      	nop
 80064b6:	371c      	adds	r7, #28
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b087      	sub	sp, #28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064c8:	f3ef 8310 	mrs	r3, PRIMASK
 80064cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80064ce:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80064d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80064d2:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	6812      	ldr	r2, [r2, #0]
 80064dc:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	6852      	ldr	r2, [r2, #4]
 80064e6:	605a      	str	r2, [r3, #4]
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80064f2:	bf00      	nop
 80064f4:	371c      	adds	r7, #28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b086      	sub	sp, #24
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006508:	f3ef 8310 	mrs	r3, PRIMASK
 800650c:	60fb      	str	r3, [r7, #12]
  return(result);
 800650e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006510:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006512:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4618      	mov	r0, r3
 8006522:	f7ff ffcd 	bl	80064c0 <LST_remove_node>
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006530:	bf00      	nop
 8006532:	3718      	adds	r7, #24
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 800653e:	f000 f939 	bl	80067b4 <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8006542:	480f      	ldr	r0, [pc, #60]	; (8006580 <APP_THREAD_Init+0x48>)
 8006544:	f000 fb20 	bl	8006b88 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8006548:	2101      	movs	r1, #1
 800654a:	2002      	movs	r0, #2
 800654c:	f000 ff98 	bl	8007480 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 8006550:	f000 fc34 	bl	8006dbc <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 8006554:	f000 fc1a 	bl	8006d8c <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 8006558:	f7fe fcf8 	bl	8004f4c <SHCI_C2_THREAD_Init>
 800655c:	4603      	mov	r3, r0
 800655e:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ThreadInitStatus);

  /* Register task */
  /* Create the different tasks */
  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_MSG_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_THREAD_ProcessMsgM0ToM4);
 8006560:	4a08      	ldr	r2, [pc, #32]	; (8006584 <APP_THREAD_Init+0x4c>)
 8006562:	2100      	movs	r1, #0
 8006564:	2001      	movs	r0, #1
 8006566:	f001 f899 	bl	800769c <UTIL_SEQ_RegTask>

  /* USER CODE BEGIN INIT TASKS */
	UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_UDP_SEND, UTIL_SEQ_RFU, APP_THREAD_UdpSend);
 800656a:	4a07      	ldr	r2, [pc, #28]	; (8006588 <APP_THREAD_Init+0x50>)
 800656c:	2100      	movs	r1, #0
 800656e:	2008      	movs	r0, #8
 8006570:	f001 f894 	bl	800769c <UTIL_SEQ_RegTask>
  /* USER CODE END INIT TASKS */

  /* Initialize and configure the Thread device*/
  APP_THREAD_DeviceConfig();
 8006574:	f000 f86a 	bl	800664c <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */

  /* USER CODE END APP_THREAD_INIT_2 */
}
 8006578:	bf00      	nop
 800657a:	3708      	adds	r7, #8
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	20030834 	.word	0x20030834
 8006584:	08006e45 	.word	0x08006e45
 8006588:	08006871 	.word	0x08006871

0800658c <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b07      	cmp	r3, #7
 800659a:	d83b      	bhi.n	8006614 <APP_THREAD_Error+0x88>
 800659c:	a201      	add	r2, pc, #4	; (adr r2, 80065a4 <APP_THREAD_Error+0x18>)
 800659e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a2:	bf00      	nop
 80065a4:	080065c5 	.word	0x080065c5
 80065a8:	080065cf 	.word	0x080065cf
 80065ac:	080065d9 	.word	0x080065d9
 80065b0:	080065e3 	.word	0x080065e3
 80065b4:	080065ed 	.word	0x080065ed
 80065b8:	080065f7 	.word	0x080065f7
 80065bc:	08006601 	.word	0x08006601
 80065c0:	0800660b 	.word	0x0800660b
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 80065c4:	6839      	ldr	r1, [r7, #0]
 80065c6:	4818      	ldr	r0, [pc, #96]	; (8006628 <APP_THREAD_Error+0x9c>)
 80065c8:	f000 f8e8 	bl	800679c <APP_THREAD_TraceError>
    break;
 80065cc:	e027      	b.n	800661e <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 80065ce:	6839      	ldr	r1, [r7, #0]
 80065d0:	4816      	ldr	r0, [pc, #88]	; (800662c <APP_THREAD_Error+0xa0>)
 80065d2:	f000 f8e3 	bl	800679c <APP_THREAD_TraceError>
    break;
 80065d6:	e022      	b.n	800661e <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 80065d8:	6839      	ldr	r1, [r7, #0]
 80065da:	4815      	ldr	r0, [pc, #84]	; (8006630 <APP_THREAD_Error+0xa4>)
 80065dc:	f000 f8de 	bl	800679c <APP_THREAD_TraceError>
    break;
 80065e0:	e01d      	b.n	800661e <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 80065e2:	6839      	ldr	r1, [r7, #0]
 80065e4:	4813      	ldr	r0, [pc, #76]	; (8006634 <APP_THREAD_Error+0xa8>)
 80065e6:	f000 f8d9 	bl	800679c <APP_THREAD_TraceError>
    break;
 80065ea:	e018      	b.n	800661e <APP_THREAD_Error+0x92>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 80065ec:	6839      	ldr	r1, [r7, #0]
 80065ee:	4812      	ldr	r0, [pc, #72]	; (8006638 <APP_THREAD_Error+0xac>)
 80065f0:	f000 f8d4 	bl	800679c <APP_THREAD_TraceError>
    break;
 80065f4:	e013      	b.n	800661e <APP_THREAD_Error+0x92>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	4810      	ldr	r0, [pc, #64]	; (800663c <APP_THREAD_Error+0xb0>)
 80065fa:	f000 f8cf 	bl	800679c <APP_THREAD_TraceError>
    break;
 80065fe:	e00e      	b.n	800661e <APP_THREAD_Error+0x92>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 8006600:	6839      	ldr	r1, [r7, #0]
 8006602:	480f      	ldr	r0, [pc, #60]	; (8006640 <APP_THREAD_Error+0xb4>)
 8006604:	f000 f8ca 	bl	800679c <APP_THREAD_TraceError>
    break;
 8006608:	e009      	b.n	800661e <APP_THREAD_Error+0x92>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 800660a:	6839      	ldr	r1, [r7, #0]
 800660c:	480d      	ldr	r0, [pc, #52]	; (8006644 <APP_THREAD_Error+0xb8>)
 800660e:	f000 f8c5 	bl	800679c <APP_THREAD_TraceError>
    break;
 8006612:	e004      	b.n	800661e <APP_THREAD_Error+0x92>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 8006614:	2100      	movs	r1, #0
 8006616:	480c      	ldr	r0, [pc, #48]	; (8006648 <APP_THREAD_Error+0xbc>)
 8006618:	f000 f8c0 	bl	800679c <APP_THREAD_TraceError>
    break;
 800661c:	bf00      	nop
  }
}
 800661e:	bf00      	nop
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	080079a8 	.word	0x080079a8
 800662c:	080079cc 	.word	0x080079cc
 8006630:	080079f0 	.word	0x080079f0
 8006634:	08007a10 	.word	0x08007a10
 8006638:	08007a30 	.word	0x08007a30
 800663c:	08007a50 	.word	0x08007a50
 8006640:	08007a6c 	.word	0x08007a6c
 8006644:	08007a98 	.word	0x08007a98
 8006648:	08007abc 	.word	0x08007abc

0800664c <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 8006652:	2000      	movs	r0, #0
 8006654:	f7ff f976 	bl	8005944 <otInstanceErasePersistentInfo>
 8006658:	4603      	mov	r3, r0
 800665a:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800665c:	79fb      	ldrb	r3, [r7, #7]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d004      	beq.n	800666c <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 8006662:	79fb      	ldrb	r3, [r7, #7]
 8006664:	4619      	mov	r1, r3
 8006666:	2006      	movs	r0, #6
 8006668:	f7ff ff90 	bl	800658c <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 800666c:	2000      	movs	r0, #0
 800666e:	f7ff f90c 	bl	800588a <otInstanceFinalize>
  otInstanceInitSingle();
 8006672:	f7ff f8e3 	bl	800583c <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 8006676:	2200      	movs	r2, #0
 8006678:	492c      	ldr	r1, [pc, #176]	; (800672c <APP_THREAD_DeviceConfig+0xe0>)
 800667a:	2000      	movs	r0, #0
 800667c:	f7ff f92c 	bl	80058d8 <otSetStateChangedCallback>
 8006680:	4603      	mov	r3, r0
 8006682:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8006684:	79fb      	ldrb	r3, [r7, #7]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d004      	beq.n	8006694 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 800668a:	79fb      	ldrb	r3, [r7, #7]
 800668c:	4619      	mov	r1, r3
 800668e:	2001      	movs	r0, #1
 8006690:	f7ff ff7c 	bl	800658c <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 8006694:	210b      	movs	r1, #11
 8006696:	2000      	movs	r0, #0
 8006698:	f7ff f9df 	bl	8005a5a <otLinkSetChannel>
 800669c:	4603      	mov	r3, r0
 800669e:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80066a0:	79fb      	ldrb	r3, [r7, #7]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d004      	beq.n	80066b0 <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 80066a6:	79fb      	ldrb	r3, [r7, #7]
 80066a8:	4619      	mov	r1, r3
 80066aa:	2002      	movs	r0, #2
 80066ac:	f7ff ff6e 	bl	800658c <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 80066b0:	2100      	movs	r1, #0
 80066b2:	2000      	movs	r0, #0
 80066b4:	f7ff fa01 	bl	8005aba <otLinkSetPanId>
 80066b8:	4603      	mov	r3, r0
 80066ba:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80066bc:	79fb      	ldrb	r3, [r7, #7]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d004      	beq.n	80066cc <APP_THREAD_DeviceConfig+0x80>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 80066c2:	79fb      	ldrb	r3, [r7, #7]
 80066c4:	4619      	mov	r1, r3
 80066c6:	2003      	movs	r0, #3
 80066c8:	f7ff ff60 	bl	800658c <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 80066cc:	2101      	movs	r1, #1
 80066ce:	2000      	movs	r0, #0
 80066d0:	f7ff f961 	bl	8005996 <otIp6SetEnabled>
 80066d4:	4603      	mov	r3, r0
 80066d6:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80066d8:	79fb      	ldrb	r3, [r7, #7]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d004      	beq.n	80066e8 <APP_THREAD_DeviceConfig+0x9c>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 80066de:	79fb      	ldrb	r3, [r7, #7]
 80066e0:	4619      	mov	r1, r3
 80066e2:	2004      	movs	r0, #4
 80066e4:	f7ff ff52 	bl	800658c <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 80066e8:	2101      	movs	r1, #1
 80066ea:	2000      	movs	r0, #0
 80066ec:	f7ff fd16 	bl	800611c <otThreadSetEnabled>
 80066f0:	4603      	mov	r3, r0
 80066f2:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80066f4:	79fb      	ldrb	r3, [r7, #7]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d004      	beq.n	8006704 <APP_THREAD_DeviceConfig+0xb8>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 80066fa:	79fb      	ldrb	r3, [r7, #7]
 80066fc:	4619      	mov	r1, r3
 80066fe:	2005      	movs	r0, #5
 8006700:	f7ff ff44 	bl	800658c <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */
	  /* Initialiaze socket */
  memset(&mSocket, 0, sizeof(mSocket));
 8006704:	2234      	movs	r2, #52	; 0x34
 8006706:	2100      	movs	r1, #0
 8006708:	4809      	ldr	r0, [pc, #36]	; (8006730 <APP_THREAD_DeviceConfig+0xe4>)
 800670a:	f001 f8e8 	bl	80078de <memset>

  /* Open socket */
  otUdpOpen(NULL, &mSocket, HandleUdpReceive, NULL);
 800670e:	2300      	movs	r3, #0
 8006710:	4a08      	ldr	r2, [pc, #32]	; (8006734 <APP_THREAD_DeviceConfig+0xe8>)
 8006712:	4907      	ldr	r1, [pc, #28]	; (8006730 <APP_THREAD_DeviceConfig+0xe4>)
 8006714:	2000      	movs	r0, #0
 8006716:	f7ff fd8b 	bl	8006230 <otUdpOpen>
  UdpBind(udpPort);
 800671a:	4b07      	ldr	r3, [pc, #28]	; (8006738 <APP_THREAD_DeviceConfig+0xec>)
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	4618      	mov	r0, r3
 8006720:	f000 f944 	bl	80069ac <UdpBind>
  /* USER CODE END DEVICECONFIG */
}
 8006724:	bf00      	nop
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	0800673d 	.word	0x0800673d
 8006730:	20000664 	.word	0x20000664
 8006734:	08006a09 	.word	0x08006a09
 8006738:	20000110 	.word	0x20000110

0800673c <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f003 0304 	and.w	r3, r3, #4
 800674c:	2b00      	cmp	r3, #0
 800674e:	d01b      	beq.n	8006788 <APP_THREAD_StateNotif+0x4c>
  {
    switch (otThreadGetDeviceRole(NULL))
 8006750:	2000      	movs	r0, #0
 8006752:	f7ff fd13 	bl	800617c <otThreadGetDeviceRole>
 8006756:	4603      	mov	r3, r0
 8006758:	2b04      	cmp	r3, #4
 800675a:	d817      	bhi.n	800678c <APP_THREAD_StateNotif+0x50>
 800675c:	a201      	add	r2, pc, #4	; (adr r2, 8006764 <APP_THREAD_StateNotif+0x28>)
 800675e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006762:	bf00      	nop
 8006764:	0800678d 	.word	0x0800678d
 8006768:	08006779 	.word	0x08006779
 800676c:	08006781 	.word	0x08006781
 8006770:	0800678d 	.word	0x0800678d
 8006774:	0800678d 	.word	0x0800678d

      /* USER CODE END OT_DEVICE_ROLE_DISABLED */
      break;
    case OT_DEVICE_ROLE_DETACHED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DETACHED */
    	child_notif = 0U;
 8006778:	4b07      	ldr	r3, [pc, #28]	; (8006798 <APP_THREAD_StateNotif+0x5c>)
 800677a:	2200      	movs	r2, #0
 800677c:	601a      	str	r2, [r3, #0]
      /* USER CODE END OT_DEVICE_ROLE_DETACHED */
      break;
 800677e:	e006      	b.n	800678e <APP_THREAD_StateNotif+0x52>
//			if (child_notif == 0)
//      {
//        HAL_Delay(3000U);
//        UTIL_SEQ_SetTask(TASK_UDP_SEND, CFG_SCH_PRIO_1);
//      }
      child_notif = 1U;
 8006780:	4b05      	ldr	r3, [pc, #20]	; (8006798 <APP_THREAD_StateNotif+0x5c>)
 8006782:	2201      	movs	r2, #1
 8006784:	601a      	str	r2, [r3, #0]
      /* USER CODE END OT_DEVICE_ROLE_CHILD */
      break;
 8006786:	e002      	b.n	800678e <APP_THREAD_StateNotif+0x52>
      /* USER CODE BEGIN DEFAULT */

      /* USER CODE END DEFAULT */
      break;
    }
  }
 8006788:	bf00      	nop
 800678a:	e000      	b.n	800678e <APP_THREAD_StateNotif+0x52>
      break;
 800678c:	bf00      	nop
}
 800678e:	bf00      	nop
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	200001f4 	.word	0x200001f4

0800679c <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 80067a6:	bf00      	nop
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
	...

080067b4 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b088      	sub	sp, #32
 80067b8:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 80067ba:	1d3b      	adds	r3, r7, #4
 80067bc:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 80067be:	6978      	ldr	r0, [r7, #20]
 80067c0:	f7fe fbf0 	bl	8004fa4 <SHCI_GetWirelessFwInfo>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d004      	beq.n	80067d4 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 80067ca:	2101      	movs	r1, #1
 80067cc:	2007      	movs	r0, #7
 80067ce:	f7ff fedd 	bl	800658c <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 80067d2:	e03d      	b.n	8006850 <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 80067d4:	4a20      	ldr	r2, [pc, #128]	; (8006858 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 80067d6:	2101      	movs	r1, #1
 80067d8:	2000      	movs	r0, #0
 80067da:	f7fa fd6f 	bl	80012bc <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 80067de:	4a1f      	ldr	r2, [pc, #124]	; (800685c <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 80067e0:	2101      	movs	r1, #1
 80067e2:	2000      	movs	r0, #0
 80067e4:	f7fa fd6a 	bl	80012bc <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	4619      	mov	r1, r3
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	785b      	ldrb	r3, [r3, #1]
 80067f2:	461a      	mov	r2, r3
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	789b      	ldrb	r3, [r3, #2]
 80067f8:	9301      	str	r3, [sp, #4]
 80067fa:	9200      	str	r2, [sp, #0]
 80067fc:	460b      	mov	r3, r1
 80067fe:	4a18      	ldr	r2, [pc, #96]	; (8006860 <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 8006800:	2101      	movs	r1, #1
 8006802:	2000      	movs	r0, #0
 8006804:	f7fa fd5a 	bl	80012bc <logApplication>
    switch(p_wireless_info->StackType)
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	7a5b      	ldrb	r3, [r3, #9]
 800680c:	2b11      	cmp	r3, #17
 800680e:	d009      	beq.n	8006824 <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 8006810:	2b50      	cmp	r3, #80	; 0x50
 8006812:	d00d      	beq.n	8006830 <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 8006814:	2b10      	cmp	r3, #16
 8006816:	d111      	bne.n	800683c <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 8006818:	4a12      	ldr	r2, [pc, #72]	; (8006864 <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 800681a:	2101      	movs	r1, #1
 800681c:	2000      	movs	r0, #0
 800681e:	f7fa fd4d 	bl	80012bc <logApplication>
      break;
 8006822:	e010      	b.n	8006846 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 8006824:	4a10      	ldr	r2, [pc, #64]	; (8006868 <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 8006826:	2101      	movs	r1, #1
 8006828:	2000      	movs	r0, #0
 800682a:	f7fa fd47 	bl	80012bc <logApplication>
      break;
 800682e:	e00a      	b.n	8006846 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 8006830:	4a0e      	ldr	r2, [pc, #56]	; (800686c <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 8006832:	2101      	movs	r1, #1
 8006834:	2000      	movs	r0, #0
 8006836:	f7fa fd41 	bl	80012bc <logApplication>
      break;
 800683a:	e004      	b.n	8006846 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 800683c:	2101      	movs	r1, #1
 800683e:	2007      	movs	r0, #7
 8006840:	f7ff fea4 	bl	800658c <APP_THREAD_Error>
      break;
 8006844:	bf00      	nop
    APP_DBG("**********************************************************");
 8006846:	4a04      	ldr	r2, [pc, #16]	; (8006858 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8006848:	2101      	movs	r1, #1
 800684a:	2000      	movs	r0, #0
 800684c:	f7fa fd36 	bl	80012bc <logApplication>
}
 8006850:	bf00      	nop
 8006852:	3718      	adds	r7, #24
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	08007acc 	.word	0x08007acc
 800685c:	08007b08 	.word	0x08007b08
 8006860:	08007b24 	.word	0x08007b24
 8006864:	08007b3c 	.word	0x08007b3c
 8006868:	08007b54 	.word	0x08007b54
 800686c:	08007b6c 	.word	0x08007b6c

08006870 <APP_THREAD_UdpSend>:
 *
 * @param None
 * @retval None
 */
static void APP_THREAD_UdpSend(void)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	af00      	add	r7, sp, #0
  HAL_Delay(100U);
 8006874:	2064      	movs	r0, #100	; 0x64
 8006876:	f7fa fe45 	bl	8001504 <HAL_Delay>

  /* Send Udp request */
  UdpSend();
 800687a:	f000 f803 	bl	8006884 <UdpSend>
}
 800687e:	bf00      	nop
 8006880:	bd80      	pop	{r7, pc}
	...

08006884 <UdpSend>:

static otError UdpSend(void)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b08e      	sub	sp, #56	; 0x38
 8006888:	af00      	add	r7, sp, #0
    otError       error;
    otMessageInfo messageInfo;
    otMessage *   message = NULL;
 800688a:	2300      	movs	r3, #0
 800688c:	637b      	str	r3, [r7, #52]	; 0x34


    memset(&messageInfo, 0, sizeof(messageInfo));
 800688e:	1d3b      	adds	r3, r7, #4
 8006890:	222c      	movs	r2, #44	; 0x2c
 8006892:	2100      	movs	r1, #0
 8006894:	4618      	mov	r0, r3
 8006896:	f001 f822 	bl	80078de <memset>

    error = otIp6AddressFromString("ff02::1", &messageInfo.mPeerAddr);
 800689a:	1d3b      	adds	r3, r7, #4
 800689c:	3310      	adds	r3, #16
 800689e:	4619      	mov	r1, r3
 80068a0:	482d      	ldr	r0, [pc, #180]	; (8006958 <UdpSend+0xd4>)
 80068a2:	f7ff f8a8 	bl	80059f6 <otIp6AddressFromString>
 80068a6:	4603      	mov	r3, r0
 80068a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    SuccessOrExit(error);
 80068ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d136      	bne.n	8006922 <UdpSend+0x9e>

    messageInfo.mPeerPort    = udpPort;
 80068b4:	4b29      	ldr	r3, [pc, #164]	; (800695c <UdpSend+0xd8>)
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	84fb      	strh	r3, [r7, #38]	; 0x26
    messageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 80068ba:	2301      	movs	r3, #1
 80068bc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    message = otUdpNewMessage(NULL, true);
 80068c0:	2101      	movs	r1, #1
 80068c2:	2000      	movs	r0, #0
 80068c4:	f7ff fc83 	bl	80061ce <otUdpNewMessage>
 80068c8:	6378      	str	r0, [r7, #52]	; 0x34
    VerifyOrExit(message != NULL, error = OT_ERROR_NO_BUFS);
 80068ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d103      	bne.n	80068d8 <UdpSend+0x54>
 80068d0:	2303      	movs	r3, #3
 80068d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068d6:	e027      	b.n	8006928 <UdpSend+0xa4>

    error = otMessageAppend(message, udpBufffer, (uint16_t)strlen((const char*)udpBufffer));
 80068d8:	4821      	ldr	r0, [pc, #132]	; (8006960 <UdpSend+0xdc>)
 80068da:	f7f9 fc59 	bl	8000190 <strlen>
 80068de:	4603      	mov	r3, r0
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	461a      	mov	r2, r3
 80068e4:	491e      	ldr	r1, [pc, #120]	; (8006960 <UdpSend+0xdc>)
 80068e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80068e8:	f7ff f99e 	bl	8005c28 <otMessageAppend>
 80068ec:	4603      	mov	r3, r0
 80068ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    SuccessOrExit(error);
 80068f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d115      	bne.n	8006926 <UdpSend+0xa2>

    APP_DBG("Sending UDP message %s", udpBufffer);
 80068fa:	4b19      	ldr	r3, [pc, #100]	; (8006960 <UdpSend+0xdc>)
 80068fc:	4a19      	ldr	r2, [pc, #100]	; (8006964 <UdpSend+0xe0>)
 80068fe:	2101      	movs	r1, #1
 8006900:	2000      	movs	r0, #0
 8006902:	f7fa fcdb 	bl	80012bc <logApplication>
    error = otUdpSend(&mSocket, message, &messageInfo);
 8006906:	1d3b      	adds	r3, r7, #4
 8006908:	461a      	mov	r2, r3
 800690a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800690c:	4816      	ldr	r0, [pc, #88]	; (8006968 <UdpSend+0xe4>)
 800690e:	f7ff fcff 	bl	8006310 <otUdpSend>
 8006912:	4603      	mov	r3, r0
 8006914:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8006918:	2101      	movs	r1, #1
 800691a:	4814      	ldr	r0, [pc, #80]	; (800696c <UdpSend+0xe8>)
 800691c:	f7fb fad8 	bl	8001ed0 <HAL_GPIO_TogglePin>
 8006920:	e002      	b.n	8006928 <UdpSend+0xa4>
    SuccessOrExit(error);
 8006922:	bf00      	nop
 8006924:	e000      	b.n	8006928 <UdpSend+0xa4>
    SuccessOrExit(error);
 8006926:	bf00      	nop
exit:

    if (error != OT_ERROR_NONE && message != NULL)
 8006928:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00c      	beq.n	800694a <UdpSend+0xc6>
 8006930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006932:	2b00      	cmp	r3, #0
 8006934:	d009      	beq.n	800694a <UdpSend+0xc6>
    {
        APP_DBG("UdpSend failed with error : %s", error);
 8006936:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800693a:	4a0d      	ldr	r2, [pc, #52]	; (8006970 <UdpSend+0xec>)
 800693c:	2101      	movs	r1, #1
 800693e:	2000      	movs	r0, #0
 8006940:	f7fa fcbc 	bl	80012bc <logApplication>
        otMessageFree(message);
 8006944:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006946:	f7ff f8e8 	bl	8005b1a <otMessageFree>
    }

    return error;
 800694a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800694e:	4618      	mov	r0, r3
 8006950:	3738      	adds	r7, #56	; 0x38
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	08007b98 	.word	0x08007b98
 800695c:	20000110 	.word	0x20000110
 8006960:	20000010 	.word	0x20000010
 8006964:	08007ba0 	.word	0x08007ba0
 8006968:	20000664 	.word	0x20000664
 800696c:	48000400 	.word	0x48000400
 8006970:	08007bb8 	.word	0x08007bb8

08006974 <Swap16>:
static uint16_t Swap16(uint16_t v)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	4603      	mov	r3, r0
 800697c:	80fb      	strh	r3, [r7, #6]
    return (((v & 0x00ffU) << 8) & 0xff00) | (((v & 0xff00U) >> 8) & 0x00ff);
 800697e:	88fb      	ldrh	r3, [r7, #6]
 8006980:	ba5b      	rev16	r3, r3
 8006982:	b29b      	uxth	r3, r3
}
 8006984:	4618      	mov	r0, r3
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <HostSwap16>:

static uint16_t HostSwap16(uint16_t v)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	4603      	mov	r3, r0
 8006998:	80fb      	strh	r3, [r7, #6]
    return Swap16(v);
 800699a:	88fb      	ldrh	r3, [r7, #6]
 800699c:	4618      	mov	r0, r3
 800699e:	f7ff ffe9 	bl	8006974 <Swap16>
 80069a2:	4603      	mov	r3, r0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <UdpBind>:
static otError UdpBind(uint16_t aPort)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b088      	sub	sp, #32
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	4603      	mov	r3, r0
 80069b4:	80fb      	strh	r3, [r7, #6]
    otError    error;
    otSockAddr sockaddr;

    memset(&sockaddr, 0, sizeof(sockaddr));
 80069b6:	f107 0308 	add.w	r3, r7, #8
 80069ba:	2214      	movs	r2, #20
 80069bc:	2100      	movs	r1, #0
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 ff8d 	bl	80078de <memset>

    /* "::" specifies the IPv6 Unspecified Address */
    error = otIp6AddressFromString("::", &sockaddr.mAddress);
 80069c4:	f107 0308 	add.w	r3, r7, #8
 80069c8:	4619      	mov	r1, r3
 80069ca:	480d      	ldr	r0, [pc, #52]	; (8006a00 <UdpBind+0x54>)
 80069cc:	f7ff f813 	bl	80059f6 <otIp6AddressFromString>
 80069d0:	4603      	mov	r3, r0
 80069d2:	77fb      	strb	r3, [r7, #31]
    SuccessOrExit(error);
 80069d4:	7ffb      	ldrb	r3, [r7, #31]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10c      	bne.n	80069f4 <UdpBind+0x48>

    sockaddr.mPort    = aPort;
 80069da:	88fb      	ldrh	r3, [r7, #6]
 80069dc:	833b      	strh	r3, [r7, #24]
    sockaddr.mScopeId = OT_NETIF_INTERFACE_ID_THREAD;
 80069de:	2301      	movs	r3, #1
 80069e0:	76bb      	strb	r3, [r7, #26]

    error = otUdpBind(&mSocket, &sockaddr);
 80069e2:	f107 0308 	add.w	r3, r7, #8
 80069e6:	4619      	mov	r1, r3
 80069e8:	4806      	ldr	r0, [pc, #24]	; (8006a04 <UdpBind+0x58>)
 80069ea:	f7ff fc5d 	bl	80062a8 <otUdpBind>
 80069ee:	4603      	mov	r3, r0
 80069f0:	77fb      	strb	r3, [r7, #31]
 80069f2:	e000      	b.n	80069f6 <UdpBind+0x4a>
    SuccessOrExit(error);
 80069f4:	bf00      	nop

exit:
    return error;
 80069f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3720      	adds	r7, #32
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	08007bd8 	.word	0x08007bd8
 8006a04:	20000664 	.word	0x20000664

08006a08 <HandleUdpReceive>:

static void HandleUdpReceive(void *aContext, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 8006a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a0c:	b0d0      	sub	sp, #320	; 0x140
 8006a0e:	af08      	add	r7, sp, #32
 8006a10:	f107 0314 	add.w	r3, r7, #20
 8006a14:	6018      	str	r0, [r3, #0]
 8006a16:	f107 0310 	add.w	r3, r7, #16
 8006a1a:	6019      	str	r1, [r3, #0]
 8006a1c:	f107 030c 	add.w	r3, r7, #12
 8006a20:	601a      	str	r2, [r3, #0]
  int     length;
  uint8_t udpBuffferReceived[256];

  APP_DBG("Received %d bytes from ", otMessageGetLength(aMessage) - otMessageGetOffset(aMessage));
 8006a22:	f107 0310 	add.w	r3, r7, #16
 8006a26:	6818      	ldr	r0, [r3, #0]
 8006a28:	f7ff f8a2 	bl	8005b70 <otMessageGetLength>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	461c      	mov	r4, r3
 8006a30:	f107 0310 	add.w	r3, r7, #16
 8006a34:	6818      	ldr	r0, [r3, #0]
 8006a36:	f7ff f8c9 	bl	8005bcc <otMessageGetOffset>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	1ae3      	subs	r3, r4, r3
 8006a3e:	4a4c      	ldr	r2, [pc, #304]	; (8006b70 <HandleUdpReceive+0x168>)
 8006a40:	2101      	movs	r1, #1
 8006a42:	2000      	movs	r0, #0
 8006a44:	f7fa fc3a 	bl	80012bc <logApplication>
  APP_DBG(
 8006a48:	f107 030c 	add.w	r3, r7, #12
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	8a1b      	ldrh	r3, [r3, #16]
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7ff ff9d 	bl	8006990 <HostSwap16>
 8006a56:	4603      	mov	r3, r0
 8006a58:	4698      	mov	r8, r3
 8006a5a:	f107 030c 	add.w	r3, r7, #12
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	8a5b      	ldrh	r3, [r3, #18]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7ff ff94 	bl	8006990 <HostSwap16>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	461c      	mov	r4, r3
 8006a6c:	f107 030c 	add.w	r3, r7, #12
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	8a9b      	ldrh	r3, [r3, #20]
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7ff ff8b 	bl	8006990 <HostSwap16>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	461d      	mov	r5, r3
 8006a7e:	f107 030c 	add.w	r3, r7, #12
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	8adb      	ldrh	r3, [r3, #22]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7ff ff82 	bl	8006990 <HostSwap16>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	461e      	mov	r6, r3
 8006a90:	f107 030c 	add.w	r3, r7, #12
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	8b1b      	ldrh	r3, [r3, #24]
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7ff ff79 	bl	8006990 <HostSwap16>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	60bb      	str	r3, [r7, #8]
 8006aa2:	f107 030c 	add.w	r3, r7, #12
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	8b5b      	ldrh	r3, [r3, #26]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7ff ff70 	bl	8006990 <HostSwap16>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	607b      	str	r3, [r7, #4]
 8006ab4:	f107 030c 	add.w	r3, r7, #12
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	8b9b      	ldrh	r3, [r3, #28]
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7ff ff67 	bl	8006990 <HostSwap16>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	603b      	str	r3, [r7, #0]
 8006ac6:	f107 030c 	add.w	r3, r7, #12
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	8bdb      	ldrh	r3, [r3, #30]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7ff ff5e 	bl	8006990 <HostSwap16>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	f107 030c 	add.w	r3, r7, #12
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006ae0:	9307      	str	r3, [sp, #28]
 8006ae2:	9206      	str	r2, [sp, #24]
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	9205      	str	r2, [sp, #20]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	9204      	str	r2, [sp, #16]
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	9303      	str	r3, [sp, #12]
 8006af0:	9602      	str	r6, [sp, #8]
 8006af2:	9501      	str	r5, [sp, #4]
 8006af4:	9400      	str	r4, [sp, #0]
 8006af6:	4643      	mov	r3, r8
 8006af8:	4a1e      	ldr	r2, [pc, #120]	; (8006b74 <HandleUdpReceive+0x16c>)
 8006afa:	2101      	movs	r1, #1
 8006afc:	2000      	movs	r0, #0
 8006afe:	f7fa fbdd 	bl	80012bc <logApplication>
         HostSwap16(aMessageInfo->mPeerAddr.mFields.m16[1]), HostSwap16(aMessageInfo->mPeerAddr.mFields.m16[2]),
         HostSwap16(aMessageInfo->mPeerAddr.mFields.m16[3]), HostSwap16(aMessageInfo->mPeerAddr.mFields.m16[4]),
         HostSwap16(aMessageInfo->mPeerAddr.mFields.m16[5]), HostSwap16(aMessageInfo->mPeerAddr.mFields.m16[6]),
         HostSwap16(aMessageInfo->mPeerAddr.mFields.m16[7]), aMessageInfo->mPeerPort);

  length = otMessageRead(aMessage, otMessageGetOffset(aMessage), udpBuffferReceived, sizeof(udpBuffferReceived) - 1);
 8006b02:	f107 0310 	add.w	r3, r7, #16
 8006b06:	6818      	ldr	r0, [r3, #0]
 8006b08:	f7ff f860 	bl	8005bcc <otMessageGetOffset>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	4619      	mov	r1, r3
 8006b10:	f107 021c 	add.w	r2, r7, #28
 8006b14:	f107 0010 	add.w	r0, r7, #16
 8006b18:	23ff      	movs	r3, #255	; 0xff
 8006b1a:	6800      	ldr	r0, [r0, #0]
 8006b1c:	f7ff f8bb 	bl	8005c96 <otMessageRead>
 8006b20:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  udpBuffferReceived[length] = '\0';
 8006b24:	f107 021c 	add.w	r2, r7, #28
 8006b28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006b2c:	4413      	add	r3, r2
 8006b2e:	2200      	movs	r2, #0
 8006b30:	701a      	strb	r2, [r3, #0]

  APP_DBG("Received %s\r\n", udpBuffferReceived);
 8006b32:	f107 031c 	add.w	r3, r7, #28
 8006b36:	4a10      	ldr	r2, [pc, #64]	; (8006b78 <HandleUdpReceive+0x170>)
 8006b38:	2101      	movs	r1, #1
 8006b3a:	2000      	movs	r0, #0
 8006b3c:	f7fa fbbe 	bl	80012bc <logApplication>

  if(strcmp((char const*)udpBuffferReceived, (char const*)udpBufffer) == 0)
 8006b40:	f107 031c 	add.w	r3, r7, #28
 8006b44:	490d      	ldr	r1, [pc, #52]	; (8006b7c <HandleUdpReceive+0x174>)
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7f9 fb18 	bl	800017c <strcmp>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d108      	bne.n	8006b64 <HandleUdpReceive+0x15c>
  {
    APP_DBG("Comparison OK!");
 8006b52:	4a0b      	ldr	r2, [pc, #44]	; (8006b80 <HandleUdpReceive+0x178>)
 8006b54:	2101      	movs	r1, #1
 8006b56:	2000      	movs	r0, #0
 8006b58:	f7fa fbb0 	bl	80012bc <logApplication>
    HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_1);
 8006b5c:	2102      	movs	r1, #2
 8006b5e:	4809      	ldr	r0, [pc, #36]	; (8006b84 <HandleUdpReceive+0x17c>)
 8006b60:	f7fb f9b6 	bl	8001ed0 <HAL_GPIO_TogglePin>
  }
}
 8006b64:	bf00      	nop
 8006b66:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b70:	08007bdc 	.word	0x08007bdc
 8006b74:	08007bf4 	.word	0x08007bf4
 8006b78:	08007c10 	.word	0x08007c10
 8006b7c:	20000010 	.word	0x20000010
 8006b80:	08007c20 	.word	0x08007c20
 8006b84:	48000400 	.word	0x48000400

08006b88 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 8006b90:	4a04      	ldr	r2, [pc, #16]	; (8006ba4 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6013      	str	r3, [r2, #0]
}
 8006b96:	bf00      	nop
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	20000488 	.word	0x20000488

08006ba8 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 8006bac:	4b03      	ldr	r3, [pc, #12]	; (8006bbc <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	330c      	adds	r3, #12
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	20000488 	.word	0x20000488

08006bc0 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 8006bc4:	4b03      	ldr	r3, [pc, #12]	; (8006bd4 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	330b      	adds	r3, #11
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr
 8006bd4:	20000488 	.word	0x20000488

08006bd8 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8006bdc:	4b03      	ldr	r3, [pc, #12]	; (8006bec <THREAD_Get_NotificationPayloadBuffer+0x14>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	330b      	adds	r3, #11
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	2000048c 	.word	0x2000048c

08006bf0 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 8006bf6:	4b0f      	ldr	r3, [pc, #60]	; (8006c34 <Ot_Cmd_Transfer+0x44>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c00:	725a      	strb	r2, [r3, #9]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f042 0202 	orr.w	r2, r2, #2
 8006c08:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 8006c0a:	4b0a      	ldr	r3, [pc, #40]	; (8006c34 <Ot_Cmd_Transfer+0x44>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	330c      	adds	r3, #12
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	3302      	adds	r3, #2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 8006c18:	4b06      	ldr	r3, [pc, #24]	; (8006c34 <Ot_Cmd_Transfer+0x44>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	b2d2      	uxtb	r2, r2
 8006c20:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 8006c22:	f7fe fcb5 	bl	8005590 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 8006c26:	f000 f828 	bl	8006c7a <Wait_Getting_Ack_From_M0>
}
 8006c2a:	bf00      	nop
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	20000488 	.word	0x20000488

08006c38 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8006c40:	f000 f822 	bl	8006c88 <Receive_Ack_From_M0>
}
 8006c44:	bf00      	nop
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 8006c54:	4a04      	ldr	r2, [pc, #16]	; (8006c68 <TL_THREAD_NotReceived+0x1c>)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 8006c5a:	f000 f81d 	bl	8006c98 <Receive_Notification_From_M0>
}
 8006c5e:	bf00      	nop
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	2000048c 	.word	0x2000048c

08006c6c <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 8006c70:	2004      	movs	r0, #4
 8006c72:	f000 fd7b 	bl	800776c <UTIL_SEQ_WaitEvt>
}
 8006c76:	bf00      	nop
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_ACK_FROM_M0_EVT);
 8006c7e:	2002      	movs	r0, #2
 8006c80:	f000 fd74 	bl	800776c <UTIL_SEQ_WaitEvt>
}
 8006c84:	bf00      	nop
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 8006c8c:	2002      	movs	r0, #2
 8006c8e:	f000 fd4f 	bl	8007730 <UTIL_SEQ_SetEvt>
}
 8006c92:	bf00      	nop
 8006c94:	bd80      	pop	{r7, pc}
	...

08006c98 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 8006c9c:	4b05      	ldr	r3, [pc, #20]	; (8006cb4 <Receive_Notification_From_M0+0x1c>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	4a04      	ldr	r2, [pc, #16]	; (8006cb4 <Receive_Notification_From_M0+0x1c>)
 8006ca4:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(TASK_MSG_FROM_M0_TO_M4,CFG_SCH_PRIO_0);
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	2001      	movs	r0, #1
 8006caa:	f000 fd17 	bl	80076dc <UTIL_SEQ_SetTask>
}
 8006cae:	bf00      	nop
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	20000490 	.word	0x20000490

08006cb8 <RxCpltCallback>:

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
static void RxCpltCallback(void)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8006cbc:	4b11      	ldr	r3, [pc, #68]	; (8006d04 <RxCpltCallback+0x4c>)
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	2bff      	cmp	r3, #255	; 0xff
 8006cc4:	d816      	bhi.n	8006cf4 <RxCpltCallback+0x3c>
  {
    CommandString[indexReceiveChar++] = aRxBuffer[0];
 8006cc6:	4b0f      	ldr	r3, [pc, #60]	; (8006d04 <RxCpltCallback+0x4c>)
 8006cc8:	881b      	ldrh	r3, [r3, #0]
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	1c5a      	adds	r2, r3, #1
 8006cce:	b291      	uxth	r1, r2
 8006cd0:	4a0c      	ldr	r2, [pc, #48]	; (8006d04 <RxCpltCallback+0x4c>)
 8006cd2:	8011      	strh	r1, [r2, #0]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	4b0c      	ldr	r3, [pc, #48]	; (8006d08 <RxCpltCallback+0x50>)
 8006cd8:	7819      	ldrb	r1, [r3, #0]
 8006cda:	4b0c      	ldr	r3, [pc, #48]	; (8006d0c <RxCpltCallback+0x54>)
 8006cdc:	5499      	strb	r1, [r3, r2]
    if (aRxBuffer[0] == '\r')
 8006cde:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <RxCpltCallback+0x50>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	2b0d      	cmp	r3, #13
 8006ce4:	d106      	bne.n	8006cf4 <RxCpltCallback+0x3c>
    {
      CptReceiveCmdFromUser = 1U;
 8006ce6:	4b0a      	ldr	r3, [pc, #40]	; (8006d10 <RxCpltCallback+0x58>)
 8006ce8:	2201      	movs	r2, #1
 8006cea:	801a      	strh	r2, [r3, #0]

      /* UART task scheduling*/
      UTIL_SEQ_SetTask(1U << CFG_TASK_SEND_CLI_TO_M0, CFG_SCH_PRIO_0);
 8006cec:	2100      	movs	r1, #0
 8006cee:	2002      	movs	r0, #2
 8006cf0:	f000 fcf4 	bl	80076dc <UTIL_SEQ_SetTask>
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1U, RxCpltCallback);
 8006cf4:	4b07      	ldr	r3, [pc, #28]	; (8006d14 <RxCpltCallback+0x5c>)
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	4903      	ldr	r1, [pc, #12]	; (8006d08 <RxCpltCallback+0x50>)
 8006cfa:	2002      	movs	r0, #2
 8006cfc:	f7f9 fe0a 	bl	8000914 <HW_UART_Receive_IT>
}
 8006d00:	bf00      	nop
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	20000484 	.word	0x20000484
 8006d08:	20000284 	.word	0x20000284
 8006d0c:	20000384 	.word	0x20000384
 8006d10:	20000486 	.word	0x20000486
 8006d14:	08006cb9 	.word	0x08006cb9

08006d18 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 8006d1c:	22ff      	movs	r2, #255	; 0xff
 8006d1e:	2100      	movs	r1, #0
 8006d20:	4812      	ldr	r0, [pc, #72]	; (8006d6c <Send_CLI_To_M0+0x54>)
 8006d22:	f000 fddc 	bl	80078de <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 8006d26:	4b12      	ldr	r3, [pc, #72]	; (8006d70 <Send_CLI_To_M0+0x58>)
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	4911      	ldr	r1, [pc, #68]	; (8006d74 <Send_CLI_To_M0+0x5c>)
 8006d30:	480e      	ldr	r0, [pc, #56]	; (8006d6c <Send_CLI_To_M0+0x54>)
 8006d32:	f000 fdc9 	bl	80078c8 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 8006d36:	4b0e      	ldr	r3, [pc, #56]	; (8006d70 <Send_CLI_To_M0+0x58>)
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	b2da      	uxtb	r2, r3
 8006d3e:	4b0e      	ldr	r3, [pc, #56]	; (8006d78 <Send_CLI_To_M0+0x60>)
 8006d40:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 8006d42:	4b0d      	ldr	r3, [pc, #52]	; (8006d78 <Send_CLI_To_M0+0x60>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	725a      	strb	r2, [r3, #9]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 8006d4c:	4b0b      	ldr	r3, [pc, #44]	; (8006d7c <Send_CLI_To_M0+0x64>)
 8006d4e:	2200      	movs	r2, #0
 8006d50:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 8006d52:	4b07      	ldr	r3, [pc, #28]	; (8006d70 <Send_CLI_To_M0+0x58>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 8006d58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	4805      	ldr	r0, [pc, #20]	; (8006d74 <Send_CLI_To_M0+0x5c>)
 8006d60:	f000 fdbd 	bl	80078de <memset>

  TL_CLI_SendCmd();
 8006d64:	f7fe fc22 	bl	80055ac <TL_CLI_SendCmd>
}
 8006d68:	bf00      	nop
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	20030a58 	.word	0x20030a58
 8006d70:	20000484 	.word	0x20000484
 8006d74:	20000384 	.word	0x20000384
 8006d78:	20030a4c 	.word	0x20030a4c
 8006d7c:	20000486 	.word	0x20000486

08006d80 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 8006d84:	f7fe fc2e 	bl	80055e4 <TL_THREAD_CliSendAck>
}
 8006d88:	bf00      	nop
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  UTIL_SEQ_RegTask( 1<<CFG_TASK_SEND_CLI_TO_M0, UTIL_SEQ_RFU,Send_CLI_To_M0);
 8006d90:	4a07      	ldr	r2, [pc, #28]	; (8006db0 <APP_THREAD_Init_UART_CLI+0x24>)
 8006d92:	2100      	movs	r1, #0
 8006d94:	2002      	movs	r0, #2
 8006d96:	f000 fc81 	bl	800769c <UTIL_SEQ_RegTask>
#endif /* (CFG_FULL_LOW_POWER == 0) */

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
  MX_LPUART1_UART_Init();
 8006d9a:	f7fa f82d 	bl	8000df8 <MX_LPUART1_UART_Init>
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
 8006d9e:	4b05      	ldr	r3, [pc, #20]	; (8006db4 <APP_THREAD_Init_UART_CLI+0x28>)
 8006da0:	2201      	movs	r2, #1
 8006da2:	4905      	ldr	r1, [pc, #20]	; (8006db8 <APP_THREAD_Init_UART_CLI+0x2c>)
 8006da4:	2002      	movs	r0, #2
 8006da6:	f7f9 fdb5 	bl	8000914 <HW_UART_Receive_IT>
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 8006daa:	bf00      	nop
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	08006d19 	.word	0x08006d19
 8006db4:	08006cb9 	.word	0x08006cb9
 8006db8:	20000284 	.word	0x20000284

08006dbc <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 8006dc0:	4b06      	ldr	r3, [pc, #24]	; (8006ddc <APP_THREAD_TL_THREAD_INIT+0x20>)
 8006dc2:	4a07      	ldr	r2, [pc, #28]	; (8006de0 <APP_THREAD_TL_THREAD_INIT+0x24>)
 8006dc4:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 8006dc6:	4b05      	ldr	r3, [pc, #20]	; (8006ddc <APP_THREAD_TL_THREAD_INIT+0x20>)
 8006dc8:	4a06      	ldr	r2, [pc, #24]	; (8006de4 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8006dca:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 8006dcc:	4b03      	ldr	r3, [pc, #12]	; (8006ddc <APP_THREAD_TL_THREAD_INIT+0x20>)
 8006dce:	4a06      	ldr	r2, [pc, #24]	; (8006de8 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 8006dd0:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 8006dd2:	4802      	ldr	r0, [pc, #8]	; (8006ddc <APP_THREAD_TL_THREAD_INIT+0x20>)
 8006dd4:	f7fe fbc0 	bl	8005558 <TL_THREAD_Init>
}
 8006dd8:	bf00      	nop
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	200300d4 	.word	0x200300d4
 8006de0:	20030834 	.word	0x20030834
 8006de4:	20030940 	.word	0x20030940
 8006de8:	20030a4c 	.word	0x20030a4c

08006dec <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	7adb      	ldrb	r3, [r3, #11]
 8006dfc:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	330c      	adds	r3, #12
 8006e02:	490b      	ldr	r1, [pc, #44]	; (8006e30 <TL_THREAD_CliNotReceived+0x44>)
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7f9 f9b9 	bl	800017c <strcmp>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d009      	beq.n	8006e24 <TL_THREAD_CliNotReceived+0x38>
  {
    /* Write to CLI UART */
#if (CFG_USB_INTERFACE_ENABLE != 0)
    VCP_SendData( l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#else
    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f103 010c 	add.w	r1, r3, #12
 8006e16:	7afb      	ldrb	r3, [r7, #11]
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	4b06      	ldr	r3, [pc, #24]	; (8006e34 <TL_THREAD_CliNotReceived+0x48>)
 8006e1c:	2002      	movs	r0, #2
 8006e1e:	f7f9 fd9d 	bl	800095c <HW_UART_Transmit_IT>
  }
  else
  {
    Send_CLI_Ack_For_OT();
  }
}
 8006e22:	e001      	b.n	8006e28 <TL_THREAD_CliNotReceived+0x3c>
    Send_CLI_Ack_For_OT();
 8006e24:	f7ff ffac 	bl	8006d80 <Send_CLI_Ack_For_OT>
}
 8006e28:	bf00      	nop
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	08007c30 	.word	0x08007c30
 8006e34:	08006e39 	.word	0x08006e39

08006e38 <HostTxCb>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void HostTxCb(void)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	af00      	add	r7, sp, #0
  Send_CLI_Ack_For_OT();
 8006e3c:	f7ff ffa0 	bl	8006d80 <Send_CLI_Ack_For_OT>
}
 8006e40:	bf00      	nop
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 8006e48:	4b09      	ldr	r3, [pc, #36]	; (8006e70 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00d      	beq.n	8006e6c <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 8006e50:	4b07      	ldr	r3, [pc, #28]	; (8006e70 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d904      	bls.n	8006e62 <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 8006e58:	2100      	movs	r1, #0
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	f7ff fb96 	bl	800658c <APP_THREAD_Error>
 8006e60:	e001      	b.n	8006e66 <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 8006e62:	f7fe ff55 	bl	8005d10 <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 8006e66:	4b02      	ldr	r3, [pc, #8]	; (8006e70 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8006e68:	2200      	movs	r2, #0
 8006e6a:	601a      	str	r2, [r3, #0]
  }
}
 8006e6c:	bf00      	nop
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	20000490 	.word	0x20000490

08006e74 <LL_PWR_EnableBootC2>:
{
 8006e74:	b480      	push	{r7}
 8006e76:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8006e78:	4b05      	ldr	r3, [pc, #20]	; (8006e90 <LL_PWR_EnableBootC2+0x1c>)
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	4a04      	ldr	r2, [pc, #16]	; (8006e90 <LL_PWR_EnableBootC2+0x1c>)
 8006e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e82:	60d3      	str	r3, [r2, #12]
}
 8006e84:	bf00      	nop
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	58000400 	.word	0x58000400

08006e94 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8006e9c:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8006e9e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8006ea2:	4905      	ldr	r1, [pc, #20]	; (8006eb8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr
 8006eb8:	58000800 	.word	0x58000800

08006ebc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8006ec4:	4b05      	ldr	r3, [pc, #20]	; (8006edc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006ec6:	6a1a      	ldr	r2, [r3, #32]
 8006ec8:	4904      	ldr	r1, [pc, #16]	; (8006edc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	620b      	str	r3, [r1, #32]
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	58000800 	.word	0x58000800

08006ee0 <LL_AHB3_GRP1_EnableClock>:
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006eee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006efc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4013      	ands	r3, r2
 8006f02:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006f04:	68fb      	ldr	r3, [r7, #12]
}
 8006f06:	bf00      	nop
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b085      	sub	sp, #20
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8006f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f1e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8006f22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8006f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f32:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4013      	ands	r3, r2
 8006f3a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
}
 8006f3e:	bf00      	nop
 8006f40:	3714      	adds	r7, #20
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr

08006f4a <LL_C1_IPCC_EnableIT_TXF>:
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	b083      	sub	sp, #12
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	601a      	str	r2, [r3, #0]
}
 8006f5e:	bf00      	nop
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <LL_C1_IPCC_EnableIT_RXO>:
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b083      	sub	sp, #12
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f043 0201 	orr.w	r2, r3, #1
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	601a      	str	r2, [r3, #0]
}
 8006f7e:	bf00      	nop
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <LL_C1_IPCC_EnableTransmitChannel>:
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b083      	sub	sp, #12
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
 8006f92:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	041b      	lsls	r3, r3, #16
 8006f9c:	43db      	mvns	r3, r3
 8006f9e:	401a      	ands	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	605a      	str	r2, [r3, #4]
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	041b      	lsls	r3, r3, #16
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	605a      	str	r2, [r3, #4]
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	43db      	mvns	r3, r3
 8006fe6:	401a      	ands	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	605a      	str	r2, [r3, #4]
}
 8006fec:	bf00      	nop
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <LL_C1_IPCC_DisableReceiveChannel>:
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	431a      	orrs	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	605a      	str	r2, [r3, #4]
}
 800700e:	bf00      	nop
 8007010:	370c      	adds	r7, #12
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr

0800701a <LL_C1_IPCC_ClearFlag_CHx>:
{
 800701a:	b480      	push	{r7}
 800701c:	b083      	sub	sp, #12
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
 8007022:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	683a      	ldr	r2, [r7, #0]
 8007028:	609a      	str	r2, [r3, #8]
}
 800702a:	bf00      	nop
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <LL_C1_IPCC_SetFlag_CHx>:
{
 8007036:	b480      	push	{r7}
 8007038:	b083      	sub	sp, #12
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	041a      	lsls	r2, r3, #16
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	609a      	str	r2, [r3, #8]
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68da      	ldr	r2, [r3, #12]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	4013      	ands	r3, r2
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	429a      	cmp	r2, r3
 800706a:	d101      	bne.n	8007070 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800706c:	2301      	movs	r3, #1
 800706e:	e000      	b.n	8007072 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	370c      	adds	r7, #12
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800707e:	b480      	push	{r7}
 8007080:	b083      	sub	sp, #12
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
 8007086:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	69da      	ldr	r2, [r3, #28]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	4013      	ands	r3, r2
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	429a      	cmp	r2, r3
 8007094:	d101      	bne.n	800709a <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8007096:	2301      	movs	r3, #1
 8007098:	e000      	b.n	800709c <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80070ac:	2102      	movs	r1, #2
 80070ae:	482a      	ldr	r0, [pc, #168]	; (8007158 <HW_IPCC_Rx_Handler+0xb0>)
 80070b0:	f7ff ffe5 	bl	800707e <LL_C2_IPCC_IsActiveFlag_CHx>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d009      	beq.n	80070ce <HW_IPCC_Rx_Handler+0x26>
 80070ba:	4b27      	ldr	r3, [pc, #156]	; (8007158 <HW_IPCC_Rx_Handler+0xb0>)
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	43db      	mvns	r3, r3
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 80070c8:	f000 f90a 	bl	80072e0 <HW_IPCC_SYS_EvtHandler>
 80070cc:	e041      	b.n	8007152 <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 80070ce:	2104      	movs	r1, #4
 80070d0:	4821      	ldr	r0, [pc, #132]	; (8007158 <HW_IPCC_Rx_Handler+0xb0>)
 80070d2:	f7ff ffd4 	bl	800707e <LL_C2_IPCC_IsActiveFlag_CHx>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d009      	beq.n	80070f0 <HW_IPCC_Rx_Handler+0x48>
 80070dc:	4b1e      	ldr	r3, [pc, #120]	; (8007158 <HW_IPCC_Rx_Handler+0xb0>)
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	43db      	mvns	r3, r3
 80070e2:	f003 0304 	and.w	r3, r3, #4
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d002      	beq.n	80070f0 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 80070ea:	f000 f953 	bl	8007394 <HW_IPCC_THREAD_NotEvtHandler>
 80070ee:	e030      	b.n	8007152 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 80070f0:	2110      	movs	r1, #16
 80070f2:	4819      	ldr	r0, [pc, #100]	; (8007158 <HW_IPCC_Rx_Handler+0xb0>)
 80070f4:	f7ff ffc3 	bl	800707e <LL_C2_IPCC_IsActiveFlag_CHx>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d009      	beq.n	8007112 <HW_IPCC_Rx_Handler+0x6a>
 80070fe:	4b16      	ldr	r3, [pc, #88]	; (8007158 <HW_IPCC_Rx_Handler+0xb0>)
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	43db      	mvns	r3, r3
 8007104:	f003 0310 	and.w	r3, r3, #16
 8007108:	2b00      	cmp	r3, #0
 800710a:	d002      	beq.n	8007112 <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 800710c:	f000 f94e 	bl	80073ac <HW_IPCC_THREAD_CliNotEvtHandler>
 8007110:	e01f      	b.n	8007152 <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8007112:	2101      	movs	r1, #1
 8007114:	4810      	ldr	r0, [pc, #64]	; (8007158 <HW_IPCC_Rx_Handler+0xb0>)
 8007116:	f7ff ffb2 	bl	800707e <LL_C2_IPCC_IsActiveFlag_CHx>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d008      	beq.n	8007132 <HW_IPCC_Rx_Handler+0x8a>
 8007120:	4b0d      	ldr	r3, [pc, #52]	; (8007158 <HW_IPCC_Rx_Handler+0xb0>)
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	2b00      	cmp	r3, #0
 800712a:	d102      	bne.n	8007132 <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 800712c:	f000 f89c 	bl	8007268 <HW_IPCC_BLE_EvtHandler>
 8007130:	e00f      	b.n	8007152 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8007132:	2108      	movs	r1, #8
 8007134:	4808      	ldr	r0, [pc, #32]	; (8007158 <HW_IPCC_Rx_Handler+0xb0>)
 8007136:	f7ff ffa2 	bl	800707e <LL_C2_IPCC_IsActiveFlag_CHx>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d009      	beq.n	8007154 <HW_IPCC_Rx_Handler+0xac>
 8007140:	4b05      	ldr	r3, [pc, #20]	; (8007158 <HW_IPCC_Rx_Handler+0xb0>)
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	43db      	mvns	r3, r3
 8007146:	f003 0308 	and.w	r3, r3, #8
 800714a:	2b00      	cmp	r3, #0
 800714c:	d002      	beq.n	8007154 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 800714e:	f000 f979 	bl	8007444 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8007152:	bf00      	nop
 8007154:	bf00      	nop
}
 8007156:	bd80      	pop	{r7, pc}
 8007158:	58000c00 	.word	0x58000c00

0800715c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8007160:	2102      	movs	r1, #2
 8007162:	482b      	ldr	r0, [pc, #172]	; (8007210 <HW_IPCC_Tx_Handler+0xb4>)
 8007164:	f7ff ff76 	bl	8007054 <LL_C1_IPCC_IsActiveFlag_CHx>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d109      	bne.n	8007182 <HW_IPCC_Tx_Handler+0x26>
 800716e:	4b28      	ldr	r3, [pc, #160]	; (8007210 <HW_IPCC_Tx_Handler+0xb4>)
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	43db      	mvns	r3, r3
 8007174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d002      	beq.n	8007182 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800717c:	f000 f8a4 	bl	80072c8 <HW_IPCC_SYS_CmdEvtHandler>
 8007180:	e042      	b.n	8007208 <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8007182:	2104      	movs	r1, #4
 8007184:	4822      	ldr	r0, [pc, #136]	; (8007210 <HW_IPCC_Tx_Handler+0xb4>)
 8007186:	f7ff ff65 	bl	8007054 <LL_C1_IPCC_IsActiveFlag_CHx>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d109      	bne.n	80071a4 <HW_IPCC_Tx_Handler+0x48>
 8007190:	4b1f      	ldr	r3, [pc, #124]	; (8007210 <HW_IPCC_Tx_Handler+0xb4>)
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	43db      	mvns	r3, r3
 8007196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d002      	beq.n	80071a4 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 800719e:	f000 f8ed 	bl	800737c <HW_IPCC_OT_CmdEvtHandler>
 80071a2:	e031      	b.n	8007208 <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80071a4:	2102      	movs	r1, #2
 80071a6:	481a      	ldr	r0, [pc, #104]	; (8007210 <HW_IPCC_Tx_Handler+0xb4>)
 80071a8:	f7ff ff54 	bl	8007054 <LL_C1_IPCC_IsActiveFlag_CHx>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d109      	bne.n	80071c6 <HW_IPCC_Tx_Handler+0x6a>
 80071b2:	4b17      	ldr	r3, [pc, #92]	; (8007210 <HW_IPCC_Tx_Handler+0xb4>)
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	43db      	mvns	r3, r3
 80071b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d002      	beq.n	80071c6 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80071c0:	f000 f882 	bl	80072c8 <HW_IPCC_SYS_CmdEvtHandler>
 80071c4:	e020      	b.n	8007208 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80071c6:	2108      	movs	r1, #8
 80071c8:	4811      	ldr	r0, [pc, #68]	; (8007210 <HW_IPCC_Tx_Handler+0xb4>)
 80071ca:	f7ff ff43 	bl	8007054 <LL_C1_IPCC_IsActiveFlag_CHx>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d109      	bne.n	80071e8 <HW_IPCC_Tx_Handler+0x8c>
 80071d4:	4b0e      	ldr	r3, [pc, #56]	; (8007210 <HW_IPCC_Tx_Handler+0xb4>)
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	43db      	mvns	r3, r3
 80071da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d002      	beq.n	80071e8 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 80071e2:	f000 f911 	bl	8007408 <HW_IPCC_MM_FreeBufHandler>
 80071e6:	e00f      	b.n	8007208 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80071e8:	2120      	movs	r1, #32
 80071ea:	4809      	ldr	r0, [pc, #36]	; (8007210 <HW_IPCC_Tx_Handler+0xb4>)
 80071ec:	f7ff ff32 	bl	8007054 <LL_C1_IPCC_IsActiveFlag_CHx>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d109      	bne.n	800720a <HW_IPCC_Tx_Handler+0xae>
 80071f6:	4b06      	ldr	r3, [pc, #24]	; (8007210 <HW_IPCC_Tx_Handler+0xb4>)
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	43db      	mvns	r3, r3
 80071fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d002      	beq.n	800720a <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8007204:	f000 f83c 	bl	8007280 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8007208:	bf00      	nop
 800720a:	bf00      	nop
}
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	58000c00 	.word	0x58000c00

08007214 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8007218:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800721c:	f7ff fe79 	bl	8006f12 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8007220:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007224:	f7ff fe36 	bl	8006e94 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8007228:	f44f 7000 	mov.w	r0, #512	; 0x200
 800722c:	f7ff fe46 	bl	8006ebc <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8007230:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8007232:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8007234:	f7ff fe1e 	bl	8006e74 <LL_PWR_EnableBootC2>

  return;
 8007238:	bf00      	nop
}
 800723a:	bd80      	pop	{r7, pc}

0800723c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8007240:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007244:	f7ff fe4c 	bl	8006ee0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8007248:	4806      	ldr	r0, [pc, #24]	; (8007264 <HW_IPCC_Init+0x28>)
 800724a:	f7ff fe8e 	bl	8006f6a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800724e:	4805      	ldr	r0, [pc, #20]	; (8007264 <HW_IPCC_Init+0x28>)
 8007250:	f7ff fe7b 	bl	8006f4a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8007254:	202c      	movs	r0, #44	; 0x2c
 8007256:	f7fa fabc 	bl	80017d2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800725a:	202d      	movs	r0, #45	; 0x2d
 800725c:	f7fa fab9 	bl	80017d2 <HAL_NVIC_EnableIRQ>

  return;
 8007260:	bf00      	nop
}
 8007262:	bd80      	pop	{r7, pc}
 8007264:	58000c00 	.word	0x58000c00

08007268 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800726c:	f7fe f8bc 	bl	80053e8 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8007270:	2101      	movs	r1, #1
 8007272:	4802      	ldr	r0, [pc, #8]	; (800727c <HW_IPCC_BLE_EvtHandler+0x14>)
 8007274:	f7ff fed1 	bl	800701a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007278:	bf00      	nop
}
 800727a:	bd80      	pop	{r7, pc}
 800727c:	58000c00 	.word	0x58000c00

08007280 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8007284:	2120      	movs	r1, #32
 8007286:	4803      	ldr	r0, [pc, #12]	; (8007294 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8007288:	f7ff fe92 	bl	8006fb0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800728c:	f7fe f8dc 	bl	8005448 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8007290:	bf00      	nop
}
 8007292:	bd80      	pop	{r7, pc}
 8007294:	58000c00 	.word	0x58000c00

08007298 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800729c:	2102      	movs	r1, #2
 800729e:	4802      	ldr	r0, [pc, #8]	; (80072a8 <HW_IPCC_SYS_Init+0x10>)
 80072a0:	f7ff fe98 	bl	8006fd4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80072a4:	bf00      	nop
}
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	58000c00 	.word	0x58000c00

080072ac <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80072b0:	2102      	movs	r1, #2
 80072b2:	4804      	ldr	r0, [pc, #16]	; (80072c4 <HW_IPCC_SYS_SendCmd+0x18>)
 80072b4:	f7ff febf 	bl	8007036 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80072b8:	2102      	movs	r1, #2
 80072ba:	4802      	ldr	r0, [pc, #8]	; (80072c4 <HW_IPCC_SYS_SendCmd+0x18>)
 80072bc:	f7ff fe65 	bl	8006f8a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80072c0:	bf00      	nop
}
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	58000c00 	.word	0x58000c00

080072c8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80072cc:	2102      	movs	r1, #2
 80072ce:	4803      	ldr	r0, [pc, #12]	; (80072dc <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80072d0:	f7ff fe6e 	bl	8006fb0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80072d4:	f7fe f908 	bl	80054e8 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80072d8:	bf00      	nop
}
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	58000c00 	.word	0x58000c00

080072e0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80072e4:	f7fe f916 	bl	8005514 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80072e8:	2102      	movs	r1, #2
 80072ea:	4802      	ldr	r0, [pc, #8]	; (80072f4 <HW_IPCC_SYS_EvtHandler+0x14>)
 80072ec:	f7ff fe95 	bl	800701a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80072f0:	bf00      	nop
}
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	58000c00 	.word	0x58000c00

080072f8 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80072fc:	2104      	movs	r1, #4
 80072fe:	4804      	ldr	r0, [pc, #16]	; (8007310 <HW_IPCC_THREAD_Init+0x18>)
 8007300:	f7ff fe68 	bl	8006fd4 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8007304:	2110      	movs	r1, #16
 8007306:	4802      	ldr	r0, [pc, #8]	; (8007310 <HW_IPCC_THREAD_Init+0x18>)
 8007308:	f7ff fe64 	bl	8006fd4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800730c:	bf00      	nop
}
 800730e:	bd80      	pop	{r7, pc}
 8007310:	58000c00 	.word	0x58000c00

08007314 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8007318:	2104      	movs	r1, #4
 800731a:	4804      	ldr	r0, [pc, #16]	; (800732c <HW_IPCC_OT_SendCmd+0x18>)
 800731c:	f7ff fe8b 	bl	8007036 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8007320:	2104      	movs	r1, #4
 8007322:	4802      	ldr	r0, [pc, #8]	; (800732c <HW_IPCC_OT_SendCmd+0x18>)
 8007324:	f7ff fe31 	bl	8006f8a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8007328:	bf00      	nop
}
 800732a:	bd80      	pop	{r7, pc}
 800732c:	58000c00 	.word	0x58000c00

08007330 <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 8007334:	2110      	movs	r1, #16
 8007336:	4802      	ldr	r0, [pc, #8]	; (8007340 <HW_IPCC_CLI_SendCmd+0x10>)
 8007338:	f7ff fe7d 	bl	8007036 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800733c:	bf00      	nop
}
 800733e:	bd80      	pop	{r7, pc}
 8007340:	58000c00 	.word	0x58000c00

08007344 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 8007344:	b580      	push	{r7, lr}
 8007346:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8007348:	2104      	movs	r1, #4
 800734a:	4804      	ldr	r0, [pc, #16]	; (800735c <HW_IPCC_THREAD_SendAck+0x18>)
 800734c:	f7ff fe65 	bl	800701a <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8007350:	2104      	movs	r1, #4
 8007352:	4802      	ldr	r0, [pc, #8]	; (800735c <HW_IPCC_THREAD_SendAck+0x18>)
 8007354:	f7ff fe3e 	bl	8006fd4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8007358:	bf00      	nop
}
 800735a:	bd80      	pop	{r7, pc}
 800735c:	58000c00 	.word	0x58000c00

08007360 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8007364:	2110      	movs	r1, #16
 8007366:	4804      	ldr	r0, [pc, #16]	; (8007378 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8007368:	f7ff fe57 	bl	800701a <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 800736c:	2110      	movs	r1, #16
 800736e:	4802      	ldr	r0, [pc, #8]	; (8007378 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8007370:	f7ff fe30 	bl	8006fd4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8007374:	bf00      	nop
}
 8007376:	bd80      	pop	{r7, pc}
 8007378:	58000c00 	.word	0x58000c00

0800737c <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 800737c:	b580      	push	{r7, lr}
 800737e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8007380:	2104      	movs	r1, #4
 8007382:	4803      	ldr	r0, [pc, #12]	; (8007390 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8007384:	f7ff fe14 	bl	8006fb0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8007388:	f7fe f93a 	bl	8005600 <HW_IPCC_OT_CmdEvtNot>

  return;
 800738c:	bf00      	nop
}
 800738e:	bd80      	pop	{r7, pc}
 8007390:	58000c00 	.word	0x58000c00

08007394 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8007394:	b580      	push	{r7, lr}
 8007396:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8007398:	2104      	movs	r1, #4
 800739a:	4803      	ldr	r0, [pc, #12]	; (80073a8 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 800739c:	f7ff fe2c 	bl	8006ff8 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 80073a0:	f7fe f93a 	bl	8005618 <HW_IPCC_THREAD_EvtNot>

  return;
 80073a4:	bf00      	nop
}
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	58000c00 	.word	0x58000c00

080073ac <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80073b0:	2110      	movs	r1, #16
 80073b2:	4803      	ldr	r0, [pc, #12]	; (80073c0 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 80073b4:	f7ff fe20 	bl	8006ff8 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 80073b8:	f7fe f93a 	bl	8005630 <HW_IPCC_THREAD_CliEvtNot>

  return;
 80073bc:	bf00      	nop
}
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	58000c00 	.word	0x58000c00

080073c4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80073cc:	2108      	movs	r1, #8
 80073ce:	480c      	ldr	r0, [pc, #48]	; (8007400 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80073d0:	f7ff fe40 	bl	8007054 <LL_C1_IPCC_IsActiveFlag_CHx>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d007      	beq.n	80073ea <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80073da:	4a0a      	ldr	r2, [pc, #40]	; (8007404 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80073e0:	2108      	movs	r1, #8
 80073e2:	4807      	ldr	r0, [pc, #28]	; (8007400 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80073e4:	f7ff fdd1 	bl	8006f8a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80073e8:	e006      	b.n	80073f8 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80073ee:	2108      	movs	r1, #8
 80073f0:	4803      	ldr	r0, [pc, #12]	; (8007400 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80073f2:	f7ff fe20 	bl	8007036 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80073f6:	bf00      	nop
}
 80073f8:	3708      	adds	r7, #8
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	58000c00 	.word	0x58000c00
 8007404:	20000494 	.word	0x20000494

08007408 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800740c:	2108      	movs	r1, #8
 800740e:	4806      	ldr	r0, [pc, #24]	; (8007428 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8007410:	f7ff fdce 	bl	8006fb0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8007414:	4b05      	ldr	r3, [pc, #20]	; (800742c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800741a:	2108      	movs	r1, #8
 800741c:	4802      	ldr	r0, [pc, #8]	; (8007428 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800741e:	f7ff fe0a 	bl	8007036 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8007422:	bf00      	nop
}
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	58000c00 	.word	0x58000c00
 800742c:	20000494 	.word	0x20000494

08007430 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8007434:	2108      	movs	r1, #8
 8007436:	4802      	ldr	r0, [pc, #8]	; (8007440 <HW_IPCC_TRACES_Init+0x10>)
 8007438:	f7ff fdcc 	bl	8006fd4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800743c:	bf00      	nop
}
 800743e:	bd80      	pop	{r7, pc}
 8007440:	58000c00 	.word	0x58000c00

08007444 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8007448:	f7fe f984 	bl	8005754 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800744c:	2108      	movs	r1, #8
 800744e:	4802      	ldr	r0, [pc, #8]	; (8007458 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8007450:	f7ff fde3 	bl	800701a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007454:	bf00      	nop
}
 8007456:	bd80      	pop	{r7, pc}
 8007458:	58000c00 	.word	0x58000c00

0800745c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800745c:	b480      	push	{r7}
 800745e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8007460:	4b05      	ldr	r3, [pc, #20]	; (8007478 <UTIL_LPM_Init+0x1c>)
 8007462:	2200      	movs	r2, #0
 8007464:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8007466:	4b05      	ldr	r3, [pc, #20]	; (800747c <UTIL_LPM_Init+0x20>)
 8007468:	2200      	movs	r2, #0
 800746a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800746c:	bf00      	nop
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	20000498 	.word	0x20000498
 800747c:	2000049c 	.word	0x2000049c

08007480 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8007480:	b480      	push	{r7}
 8007482:	b087      	sub	sp, #28
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	460b      	mov	r3, r1
 800748a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800748c:	f3ef 8310 	mrs	r3, PRIMASK
 8007490:	613b      	str	r3, [r7, #16]
  return(result);
 8007492:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8007494:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007496:	b672      	cpsid	i
  
  switch(state)
 8007498:	78fb      	ldrb	r3, [r7, #3]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d009      	beq.n	80074b2 <UTIL_LPM_SetOffMode+0x32>
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d000      	beq.n	80074a4 <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 80074a2:	e00e      	b.n	80074c2 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 80074a4:	4b0c      	ldr	r3, [pc, #48]	; (80074d8 <UTIL_LPM_SetOffMode+0x58>)
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	4a0a      	ldr	r2, [pc, #40]	; (80074d8 <UTIL_LPM_SetOffMode+0x58>)
 80074ae:	6013      	str	r3, [r2, #0]
      break;
 80074b0:	e007      	b.n	80074c2 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	43da      	mvns	r2, r3
 80074b6:	4b08      	ldr	r3, [pc, #32]	; (80074d8 <UTIL_LPM_SetOffMode+0x58>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4013      	ands	r3, r2
 80074bc:	4a06      	ldr	r2, [pc, #24]	; (80074d8 <UTIL_LPM_SetOffMode+0x58>)
 80074be:	6013      	str	r3, [r2, #0]
      break;
 80074c0:	bf00      	nop
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80074cc:	bf00      	nop
 80074ce:	371c      	adds	r7, #28
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	2000049c 	.word	0x2000049c

080074dc <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b08c      	sub	sp, #48	; 0x30
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80074e4:	4b65      	ldr	r3, [pc, #404]	; (800767c <UTIL_SEQ_Run+0x1a0>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 80074ea:	4b64      	ldr	r3, [pc, #400]	; (800767c <UTIL_SEQ_Run+0x1a0>)
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4013      	ands	r3, r2
 80074f2:	4a62      	ldr	r2, [pc, #392]	; (800767c <UTIL_SEQ_Run+0x1a0>)
 80074f4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80074f6:	e081      	b.n	80075fc <UTIL_SEQ_Run+0x120>
  {
    counter = 0U;
 80074f8:	2300      	movs	r3, #0
 80074fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80074fc:	e002      	b.n	8007504 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 80074fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007500:	3301      	adds	r3, #1
 8007502:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8007504:	4a5e      	ldr	r2, [pc, #376]	; (8007680 <UTIL_SEQ_Run+0x1a4>)
 8007506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007508:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800750c:	4b5d      	ldr	r3, [pc, #372]	; (8007684 <UTIL_SEQ_Run+0x1a8>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	401a      	ands	r2, r3
 8007512:	4b5a      	ldr	r3, [pc, #360]	; (800767c <UTIL_SEQ_Run+0x1a0>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4013      	ands	r3, r2
 8007518:	2b00      	cmp	r3, #0
 800751a:	d0f0      	beq.n	80074fe <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800751c:	4a58      	ldr	r2, [pc, #352]	; (8007680 <UTIL_SEQ_Run+0x1a4>)
 800751e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007520:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007524:	4b57      	ldr	r3, [pc, #348]	; (8007684 <UTIL_SEQ_Run+0x1a8>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	401a      	ands	r2, r3
 800752a:	4b54      	ldr	r3, [pc, #336]	; (800767c <UTIL_SEQ_Run+0x1a0>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4013      	ands	r3, r2
 8007530:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8007532:	4a53      	ldr	r2, [pc, #332]	; (8007680 <UTIL_SEQ_Run+0x1a4>)
 8007534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007536:	00db      	lsls	r3, r3, #3
 8007538:	4413      	add	r3, r2
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753e:	4013      	ands	r3, r2
 8007540:	2b00      	cmp	r3, #0
 8007542:	d106      	bne.n	8007552 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8007544:	4a4e      	ldr	r2, [pc, #312]	; (8007680 <UTIL_SEQ_Run+0x1a4>)
 8007546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007548:	00db      	lsls	r3, r3, #3
 800754a:	4413      	add	r3, r2
 800754c:	f04f 32ff 	mov.w	r2, #4294967295
 8007550:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8007552:	4a4b      	ldr	r2, [pc, #300]	; (8007680 <UTIL_SEQ_Run+0x1a4>)
 8007554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007556:	00db      	lsls	r3, r3, #3
 8007558:	4413      	add	r3, r2
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755e:	4013      	ands	r3, r2
 8007560:	4618      	mov	r0, r3
 8007562:	f000 f953 	bl	800780c <SEQ_BitPosition>
 8007566:	4603      	mov	r3, r0
 8007568:	461a      	mov	r2, r3
 800756a:	4b47      	ldr	r3, [pc, #284]	; (8007688 <UTIL_SEQ_Run+0x1ac>)
 800756c:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800756e:	4a44      	ldr	r2, [pc, #272]	; (8007680 <UTIL_SEQ_Run+0x1a4>)
 8007570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007572:	00db      	lsls	r3, r3, #3
 8007574:	4413      	add	r3, r2
 8007576:	685a      	ldr	r2, [r3, #4]
 8007578:	4b43      	ldr	r3, [pc, #268]	; (8007688 <UTIL_SEQ_Run+0x1ac>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2101      	movs	r1, #1
 800757e:	fa01 f303 	lsl.w	r3, r1, r3
 8007582:	43db      	mvns	r3, r3
 8007584:	401a      	ands	r2, r3
 8007586:	493e      	ldr	r1, [pc, #248]	; (8007680 <UTIL_SEQ_Run+0x1a4>)
 8007588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	440b      	add	r3, r1
 800758e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007590:	f3ef 8310 	mrs	r3, PRIMASK
 8007594:	61bb      	str	r3, [r7, #24]
  return(result);
 8007596:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007598:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800759a:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800759c:	4b3a      	ldr	r3, [pc, #232]	; (8007688 <UTIL_SEQ_Run+0x1ac>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2201      	movs	r2, #1
 80075a2:	fa02 f303 	lsl.w	r3, r2, r3
 80075a6:	43da      	mvns	r2, r3
 80075a8:	4b38      	ldr	r3, [pc, #224]	; (800768c <UTIL_SEQ_Run+0x1b0>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4013      	ands	r3, r2
 80075ae:	4a37      	ldr	r2, [pc, #220]	; (800768c <UTIL_SEQ_Run+0x1b0>)
 80075b0:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80075b2:	2302      	movs	r3, #2
 80075b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075b6:	e013      	b.n	80075e0 <UTIL_SEQ_Run+0x104>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80075b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ba:	3b01      	subs	r3, #1
 80075bc:	4a30      	ldr	r2, [pc, #192]	; (8007680 <UTIL_SEQ_Run+0x1a4>)
 80075be:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80075c2:	4b31      	ldr	r3, [pc, #196]	; (8007688 <UTIL_SEQ_Run+0x1ac>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2201      	movs	r2, #1
 80075c8:	fa02 f303 	lsl.w	r3, r2, r3
 80075cc:	43da      	mvns	r2, r3
 80075ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d0:	3b01      	subs	r3, #1
 80075d2:	400a      	ands	r2, r1
 80075d4:	492a      	ldr	r1, [pc, #168]	; (8007680 <UTIL_SEQ_Run+0x1a4>)
 80075d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80075da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075dc:	3b01      	subs	r3, #1
 80075de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1e8      	bne.n	80075b8 <UTIL_SEQ_Run+0xdc>
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80075f0:	4b25      	ldr	r3, [pc, #148]	; (8007688 <UTIL_SEQ_Run+0x1ac>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a26      	ldr	r2, [pc, #152]	; (8007690 <UTIL_SEQ_Run+0x1b4>)
 80075f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075fa:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80075fc:	4b23      	ldr	r3, [pc, #140]	; (800768c <UTIL_SEQ_Run+0x1b0>)
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	4b20      	ldr	r3, [pc, #128]	; (8007684 <UTIL_SEQ_Run+0x1a8>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	401a      	ands	r2, r3
 8007606:	4b1d      	ldr	r3, [pc, #116]	; (800767c <UTIL_SEQ_Run+0x1a0>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4013      	ands	r3, r2
 800760c:	2b00      	cmp	r3, #0
 800760e:	d007      	beq.n	8007620 <UTIL_SEQ_Run+0x144>
 8007610:	4b20      	ldr	r3, [pc, #128]	; (8007694 <UTIL_SEQ_Run+0x1b8>)
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	4b20      	ldr	r3, [pc, #128]	; (8007698 <UTIL_SEQ_Run+0x1bc>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4013      	ands	r3, r2
 800761a:	2b00      	cmp	r3, #0
 800761c:	f43f af6c 	beq.w	80074f8 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8007620:	4b19      	ldr	r3, [pc, #100]	; (8007688 <UTIL_SEQ_Run+0x1ac>)
 8007622:	f04f 32ff 	mov.w	r2, #4294967295
 8007626:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8007628:	f000 f8e2 	bl	80077f0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800762c:	f3ef 8310 	mrs	r3, PRIMASK
 8007630:	613b      	str	r3, [r7, #16]
  return(result);
 8007632:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8007634:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8007636:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8007638:	4b14      	ldr	r3, [pc, #80]	; (800768c <UTIL_SEQ_Run+0x1b0>)
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	4b11      	ldr	r3, [pc, #68]	; (8007684 <UTIL_SEQ_Run+0x1a8>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	401a      	ands	r2, r3
 8007642:	4b0e      	ldr	r3, [pc, #56]	; (800767c <UTIL_SEQ_Run+0x1a0>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4013      	ands	r3, r2
 8007648:	2b00      	cmp	r3, #0
 800764a:	d108      	bne.n	800765e <UTIL_SEQ_Run+0x182>
 800764c:	4b11      	ldr	r3, [pc, #68]	; (8007694 <UTIL_SEQ_Run+0x1b8>)
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	4b11      	ldr	r3, [pc, #68]	; (8007698 <UTIL_SEQ_Run+0x1bc>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4013      	ands	r3, r2
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <UTIL_SEQ_Run+0x182>
  {
	UTIL_SEQ_Idle( );
 800765a:	f7f8 fffb 	bl	8000654 <UTIL_SEQ_Idle>
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 8007668:	f000 f8c9 	bl	80077fe <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800766c:	4a03      	ldr	r2, [pc, #12]	; (800767c <UTIL_SEQ_Run+0x1a0>)
 800766e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007670:	6013      	str	r3, [r2, #0]

  return;
 8007672:	bf00      	nop
}
 8007674:	3730      	adds	r7, #48	; 0x30
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	20000118 	.word	0x20000118
 8007680:	20000530 	.word	0x20000530
 8007684:	20000114 	.word	0x20000114
 8007688:	200004ac 	.word	0x200004ac
 800768c:	200004a0 	.word	0x200004a0
 8007690:	200004b0 	.word	0x200004b0
 8007694:	200004a4 	.word	0x200004a4
 8007698:	200004a8 	.word	0x200004a8

0800769c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b088      	sub	sp, #32
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076a8:	f3ef 8310 	mrs	r3, PRIMASK
 80076ac:	617b      	str	r3, [r7, #20]
  return(result);
 80076ae:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80076b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80076b2:	b672      	cpsid	i

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 f8a9 	bl	800780c <SEQ_BitPosition>
 80076ba:	4603      	mov	r3, r0
 80076bc:	4619      	mov	r1, r3
 80076be:	4a06      	ldr	r2, [pc, #24]	; (80076d8 <UTIL_SEQ_RegTask+0x3c>)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80076d0:	bf00      	nop
}
 80076d2:	3720      	adds	r7, #32
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	200004b0 	.word	0x200004b0

080076dc <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80076dc:	b480      	push	{r7}
 80076de:	b087      	sub	sp, #28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076e6:	f3ef 8310 	mrs	r3, PRIMASK
 80076ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80076ec:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80076ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80076f0:	b672      	cpsid	i

  TaskSet |= TaskId_bm;
 80076f2:	4b0d      	ldr	r3, [pc, #52]	; (8007728 <UTIL_SEQ_SetTask+0x4c>)
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	4a0b      	ldr	r2, [pc, #44]	; (8007728 <UTIL_SEQ_SetTask+0x4c>)
 80076fc:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80076fe:	4a0b      	ldr	r2, [pc, #44]	; (800772c <UTIL_SEQ_SetTask+0x50>)
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	431a      	orrs	r2, r3
 800770a:	4908      	ldr	r1, [pc, #32]	; (800772c <UTIL_SEQ_SetTask+0x50>)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800771c:	bf00      	nop
}
 800771e:	371c      	adds	r7, #28
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	200004a0 	.word	0x200004a0
 800772c:	20000530 	.word	0x20000530

08007730 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8007730:	b480      	push	{r7}
 8007732:	b087      	sub	sp, #28
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007738:	f3ef 8310 	mrs	r3, PRIMASK
 800773c:	60fb      	str	r3, [r7, #12]
  return(result);
 800773e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007740:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007742:	b672      	cpsid	i

  EvtSet |= EvtId_bm;
 8007744:	4b08      	ldr	r3, [pc, #32]	; (8007768 <UTIL_SEQ_SetEvt+0x38>)
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4313      	orrs	r3, r2
 800774c:	4a06      	ldr	r2, [pc, #24]	; (8007768 <UTIL_SEQ_SetEvt+0x38>)
 800774e:	6013      	str	r3, [r2, #0]
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800775a:	bf00      	nop
}
 800775c:	371c      	adds	r7, #28
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	200004a4 	.word	0x200004a4

0800776c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b086      	sub	sp, #24
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8007774:	4b1b      	ldr	r3, [pc, #108]	; (80077e4 <UTIL_SEQ_WaitEvt+0x78>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800777a:	4b1a      	ldr	r3, [pc, #104]	; (80077e4 <UTIL_SEQ_WaitEvt+0x78>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007782:	d102      	bne.n	800778a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 8007784:	2300      	movs	r3, #0
 8007786:	617b      	str	r3, [r7, #20]
 8007788:	e005      	b.n	8007796 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 800778a:	4b16      	ldr	r3, [pc, #88]	; (80077e4 <UTIL_SEQ_WaitEvt+0x78>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2201      	movs	r2, #1
 8007790:	fa02 f303 	lsl.w	r3, r2, r3
 8007794:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8007796:	4b14      	ldr	r3, [pc, #80]	; (80077e8 <UTIL_SEQ_WaitEvt+0x7c>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 800779c:	4a12      	ldr	r2, [pc, #72]	; (80077e8 <UTIL_SEQ_WaitEvt+0x7c>)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 80077a2:	e005      	b.n	80077b0 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 80077a4:	4b10      	ldr	r3, [pc, #64]	; (80077e8 <UTIL_SEQ_WaitEvt+0x7c>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4619      	mov	r1, r3
 80077aa:	6978      	ldr	r0, [r7, #20]
 80077ac:	f7f8 ff59 	bl	8000662 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 80077b0:	4b0e      	ldr	r3, [pc, #56]	; (80077ec <UTIL_SEQ_WaitEvt+0x80>)
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	4b0c      	ldr	r3, [pc, #48]	; (80077e8 <UTIL_SEQ_WaitEvt+0x7c>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4013      	ands	r3, r2
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d0f2      	beq.n	80077a4 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80077be:	4a09      	ldr	r2, [pc, #36]	; (80077e4 <UTIL_SEQ_WaitEvt+0x78>)
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 80077c4:	4b08      	ldr	r3, [pc, #32]	; (80077e8 <UTIL_SEQ_WaitEvt+0x7c>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	43da      	mvns	r2, r3
 80077ca:	4b08      	ldr	r3, [pc, #32]	; (80077ec <UTIL_SEQ_WaitEvt+0x80>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4013      	ands	r3, r2
 80077d0:	4a06      	ldr	r2, [pc, #24]	; (80077ec <UTIL_SEQ_WaitEvt+0x80>)
 80077d2:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 80077d4:	4a04      	ldr	r2, [pc, #16]	; (80077e8 <UTIL_SEQ_WaitEvt+0x7c>)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6013      	str	r3, [r2, #0]

  return;
 80077da:	bf00      	nop
}
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	200004ac 	.word	0x200004ac
 80077e8:	200004a8 	.word	0x200004a8
 80077ec:	200004a4 	.word	0x200004a4

080077f0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80077f0:	b480      	push	{r7}
 80077f2:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80077f4:	bf00      	nop
}
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80077fe:	b480      	push	{r7}
 8007800:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8007802:	bf00      	nop
}
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 8007814:	2300      	movs	r3, #0
 8007816:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	0c1b      	lsrs	r3, r3, #16
 800781c:	041b      	lsls	r3, r3, #16
 800781e:	2b00      	cmp	r3, #0
 8007820:	d104      	bne.n	800782c <SEQ_BitPosition+0x20>
 8007822:	2310      	movs	r3, #16
 8007824:	73fb      	strb	r3, [r7, #15]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	041b      	lsls	r3, r3, #16
 800782a:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d105      	bne.n	8007842 <SEQ_BitPosition+0x36>
 8007836:	7bfb      	ldrb	r3, [r7, #15]
 8007838:	3308      	adds	r3, #8
 800783a:	73fb      	strb	r3, [r7, #15]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	021b      	lsls	r3, r3, #8
 8007840:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d105      	bne.n	8007858 <SEQ_BitPosition+0x4c>
 800784c:	7bfb      	ldrb	r3, [r7, #15]
 800784e:	3304      	adds	r3, #4
 8007850:	73fb      	strb	r3, [r7, #15]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	011b      	lsls	r3, r3, #4
 8007856:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	0f1b      	lsrs	r3, r3, #28
 800785c:	4a07      	ldr	r2, [pc, #28]	; (800787c <SEQ_BitPosition+0x70>)
 800785e:	5cd2      	ldrb	r2, [r2, r3]
 8007860:	7bfb      	ldrb	r3, [r7, #15]
 8007862:	4413      	add	r3, r2
 8007864:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8007866:	7bfb      	ldrb	r3, [r7, #15]
 8007868:	f1c3 031f 	rsb	r3, r3, #31
 800786c:	b2db      	uxtb	r3, r3
}
 800786e:	4618      	mov	r0, r3
 8007870:	3714      	adds	r7, #20
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	08007cec 	.word	0x08007cec

08007880 <__libc_init_array>:
 8007880:	b570      	push	{r4, r5, r6, lr}
 8007882:	4e0d      	ldr	r6, [pc, #52]	; (80078b8 <__libc_init_array+0x38>)
 8007884:	4c0d      	ldr	r4, [pc, #52]	; (80078bc <__libc_init_array+0x3c>)
 8007886:	1ba4      	subs	r4, r4, r6
 8007888:	10a4      	asrs	r4, r4, #2
 800788a:	2500      	movs	r5, #0
 800788c:	42a5      	cmp	r5, r4
 800788e:	d109      	bne.n	80078a4 <__libc_init_array+0x24>
 8007890:	4e0b      	ldr	r6, [pc, #44]	; (80078c0 <__libc_init_array+0x40>)
 8007892:	4c0c      	ldr	r4, [pc, #48]	; (80078c4 <__libc_init_array+0x44>)
 8007894:	f000 f82c 	bl	80078f0 <_init>
 8007898:	1ba4      	subs	r4, r4, r6
 800789a:	10a4      	asrs	r4, r4, #2
 800789c:	2500      	movs	r5, #0
 800789e:	42a5      	cmp	r5, r4
 80078a0:	d105      	bne.n	80078ae <__libc_init_array+0x2e>
 80078a2:	bd70      	pop	{r4, r5, r6, pc}
 80078a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078a8:	4798      	blx	r3
 80078aa:	3501      	adds	r5, #1
 80078ac:	e7ee      	b.n	800788c <__libc_init_array+0xc>
 80078ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078b2:	4798      	blx	r3
 80078b4:	3501      	adds	r5, #1
 80078b6:	e7f2      	b.n	800789e <__libc_init_array+0x1e>
 80078b8:	08007d04 	.word	0x08007d04
 80078bc:	08007d04 	.word	0x08007d04
 80078c0:	08007d04 	.word	0x08007d04
 80078c4:	08007d08 	.word	0x08007d08

080078c8 <memcpy>:
 80078c8:	b510      	push	{r4, lr}
 80078ca:	1e43      	subs	r3, r0, #1
 80078cc:	440a      	add	r2, r1
 80078ce:	4291      	cmp	r1, r2
 80078d0:	d100      	bne.n	80078d4 <memcpy+0xc>
 80078d2:	bd10      	pop	{r4, pc}
 80078d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078dc:	e7f7      	b.n	80078ce <memcpy+0x6>

080078de <memset>:
 80078de:	4402      	add	r2, r0
 80078e0:	4603      	mov	r3, r0
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d100      	bne.n	80078e8 <memset+0xa>
 80078e6:	4770      	bx	lr
 80078e8:	f803 1b01 	strb.w	r1, [r3], #1
 80078ec:	e7f9      	b.n	80078e2 <memset+0x4>
	...

080078f0 <_init>:
 80078f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f2:	bf00      	nop
 80078f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078f6:	bc08      	pop	{r3}
 80078f8:	469e      	mov	lr, r3
 80078fa:	4770      	bx	lr

080078fc <_fini>:
 80078fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fe:	bf00      	nop
 8007900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007902:	bc08      	pop	{r3}
 8007904:	469e      	mov	lr, r3
 8007906:	4770      	bx	lr
